				     1  ;******************************************************************************
				     2  ; This software is provided "as is" without warranty.  National Semiconductor
				     3  ; expressly disclaims implied warranties of merchantibility and/or fitness
				     4  ; for a particular purpose.  NSC shall not be responsible for any loss to
				     5  ; recipient, customers or third-parties by failure of this software to 
				     6  ; function.  NSC shall not be liable for any direct, indirect, special,
				     7  ; incidental or consequential damages, whether based on contract, tort or any
				     8  ; other legal theory, even if NSC has been advised of the possibliity of such
				     9  ; damages.
				    10  ;******************************************************************************
				    11
				    12  ;******************************************************************************
				    13  ; merged and debugged by migry
				    14  ; migrytech@gmail.com
				    15  ; migry@ns32000.com
				    16  ;
				    17  ; NOTE: "The Force" is the name of a homebrew NS32016 system built on a multibus card,
				    18  ;       back in 1986, but only re-surrected and got working in 2020.
				    19  ;
				    20  ; In order to re-create the (EP)ROMs needed to run the TDS on the above system,
				    21  ; which has a different hardware configuration to the DB16000/DB32000 all the 
				    22  ; assembly source code files for TDS (found on the internet) have been merged into a
				    23  ; single file in order to do away with the need for a linker, and new code has been
				    24  ; added to support "The Force".
				    25  ; 
				    26  ; The MigryTech assembler recognises most but not all the syntax of the National Semicondutor
				    27  ; NS32016 assembler, but also adds C preprocessor hash commands: #define, #ifdef, and #endif
				    28  ; which is used to allow the same code to be assembled for different platforms.
				    29  ; All the assembly source code files for TDS (found on the internet) have been merged into a
				    30  ; single file in order to do away with the need for a linker.
				    31  ; 
				    32  ; The MigryTech assembler recognises most but not all the syntax of the National Semicondutor
				    33  ; NS32016 assembler, but also adds C preprocessor hash commands: #define, #ifdef, and #endif
				    34  ; which is used to allow the same code to be assembled for different platforms.
				    35  ;
				    36  ; The original source files each assemble to a separate module, and use the support of modules
				    37  ; of the NS32016 CPU. In merging all the source files into a single composite source file
				    38  ; there is only one module, and so calls to other modules using the CXP mechanism have been
				    39  ; simplified to BSR. Also all the global variables for each of the original modules have been
				    40  ; merged into the same area and are pointed to by the Static Base register. In the original
				    41  ; code access to variables in a different module use the "EXT" addressing mode, whereas in 
				    42  ; the composite code the simpler (and faster) "SB" addressing mode is used.
				    43  ; The module structure and interrupt structure, which were likely created by the linker,
				    44  ; have be re-created manually. The need for a link table is removed.
				    45  ;
				    46  ; In order to help dedbug the code, additional code can be conditionally assembled
				    47  ; which causes write to a fixed "debug" location (DEBUGD). This can for example be used
				    48  ; to trigger a logic analyser.
				    49  ;
				    50  ;******************************************************************************
				    51
				    52  ; 09-Jun-2020 - V0.01 First write. Merge all modules. Assemble and fix bugs.
				    53  ; 10-Jun-2020 - V0.02 Change CXP to BSR and RXP to RET. Merge more modules.
				    54  ;             - Eliminate duplicate lables (usually SB or EQU).
				    55  ; 19-Jun-2020 - V0.03 Create missing module tables for traps. Now no longer crashing!
				    56  ;             - SB appears to be changed, so add debug writes in MAINLP
				    57  ; 20-Jun-2020 - V0.03 Change search for top of memory (TheForce only) to fixed value.
				    58  ; 24-Aug-2020 - V0.03 Change for new Force mk2 hardware and new UART address.
				    59  ; 27-Aug-2020 - V1.00 Correct the UART address. Doh!
				    60  ; 18-Sep-2020 - V1.01 Add ICU initialisation code.
				    61  ; 12-Nov-2020 - V1.02 Add ICU timer code.
				    62  ; 18-Dec-2020 - V1.04 Fake DIP switches for FORCE
				    63  ; 17-Jan-2021 - V1.10 Add tape save and load to/from RAM.
				    64  ; 18-Jan-2021 - V1.11 Minor tidy up.
				    65  ; 21-Jan-2021 - V1.12 Fix bug with tape write.
				    66  ; 25-Jan-2021 - V1.13 Debug tape write and read.
				    67  ; 27-Jan-2021 - V1.14 Start to debug interrupt behaviour. Use ICU LEDs for debug.
				    68  ; 28-Jan-2021 - V1.15 Fix interrupt problem and add more comments.
				    69  ; 30-Jan-2021 - V1.16 Minor tweak to TRACE interrupt.
				    70  ; 31-Jan-2021 - V1.17 Add undefined instruction trap
				    71  ; 02-Feb-2021 - V1.18 Add undefined instruction trap
				    72  ; 04-Feb-2021 - V1.19 Still debugging interrupts - write out PSR for debug.
				    73  ;             - V1.20 Fix interrupt problem, caused by out by one bit error.
				    74  ;             - V1.21 Fix interrupt count on LED bar.
				    75  ; 05-Feb-2021 - V1.22 Add ICU vector support.
				    76  ; 05-May-2024 - V1.23 Make changes so that DB16000 version assembles.
				    77
				    78
				    79  ;       DCT16 - DB16000A Diagnostic Monitor
				    80
				    81  ; remove/add add X to generate appropriate #defines
				    87
				    88  ;+++++++++++++
				    90  ;+++++++++++++
				    91  RAMBOT:   .EQU 0x8000 
				    92  SB_MAIN:  .EQU RAMBOT+0
				    93  SB_NVIRT: .EQU SB_MAIN
				    94  SB_NMIRT: .EQU SB_MAIN
				    95  SB_ABTRT: .EQU SB_MAIN
				    96  SB_FPURT: .EQU SB_MAIN
				    97  SB_ILLRT: .EQU SB_MAIN
				    98  SB_SVCRT: .EQU SB_MAIN
				    99  SB_DVZRT: .EQU SB_MAIN
				   100  SB_FLGRT: .EQU SB_MAIN
				   101  SB_BPTRT: .EQU SB_MAIN
				   102  SB_TRCRT: .EQU SB_MAIN
				   103  SB_UNINS: .EQU SB_MAIN
				   105  ;+++++++++++++
				   106
				   107  ;@@@@@@@@@@@@@@
				   138  ;@@@@@@@@@@@@@@
				   139
				   140  ;+++++++++++++
				   142  ;+++++++++++++
				   143  STACKL: .EQU    H'500           ; STACK AREA END RELATIVE TO BEGIN OF SB
				   144  STATIC: .EQU    H'C000
				   146  ;+++++++++++++
				   147
				   148  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				   149  ;;;;;                       CONSTANTS                       ;;;;;
				   150  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				   151
				   152  ;
				   153  ;     GLOBAL CONSTANTS
				   154  ;
				   155
				   156  SHRT:   .EQU    0       ;RADIX SELECTION VALUES
				   157  LNG:    .EQU    1
				   158  DEC:    .EQU    2
				   159  HEX:    .EQU    3
				   160
				   161  STALON: .EQU    0               ; STAND ALONE INDICATOR
				   162  TRANSP: .EQU    1               ; TRANSPARENT MODE
				   163  TRUE:   .EQU    1               ; DEFINE LOGICAL TRUE
				   164  FALSE:  .EQU    0               ; DEFINE LOGICAL FALSE
				   165  TRMA:   .EQU    0               ; TERMINAL A
				   166  TRMB:   .EQU    1               ; TERMINAL B
				   167  NSFBR:  .EQU    14              ; NUMBER OF SOFTWARE BREAK-POINTS
				   168
				   169  ; use following consts with CBIT and SBIT
				   170  PSR_T:  .EQU    1               ; T BIT IN PSR FOR REV E
				   171  PSR_U:  .EQU    8               ; U BIT IN PSR
				   172  PSR_S:  .EQU    9               ; S BIT IN PSR
				   173  PSR_P:  .EQU    10              ; P BIT IN PSR
				   174
				   175  ; use following consts with BICPSR and BISPSR
				   176  PSRC:   .EQU    H'001           ; PSR CARRY
				   177  PSRT:   .EQU    H'002           ; PSR TRACE
				   178  PSRL:   .EQU    H'004           ; PSR LOW
				   179  PSRV:   .EQU    H'010           ; PSR OVERFLOW
				   180  PSRF:   .EQU    H'020           ; PSR FLAG
				   181  PSRZ:   .EQU    H'040           ; PSR ZERO
				   182  PSRN:   .EQU    H'080           ; PSR NEGATIVE
				   183  PSRU:   .EQU    H'100           ; PSR SUPERVISOR MODE
				   184  PSRS:   .EQU    H'200           ; PSR STACK
				   185  PSRP:   .EQU    H'400           ; PSR PENDING
				   186  PSRI:   .EQU    H'800           ; PSR I NUMBER
				   187
				   188  BPR_BE: .EQU    29              ; BE BIT IN BPR REG OF MMU
				   189  MSR_NT: .EQU    25              ; NT BIT IN MSR
				   190  MOMOD:  .EQU    5               ; MONITOR MODULE NUMBER
				   191  BPTC:   .EQU    H'F2            ; BPT INSTRUCTION
				   192  NOERR:  .EQU    -128            ;NO ERROR FLAG
				   193  ;
				   194  ;       HUMON GLOBALS
				   195  INITMOD:.EQU     0              ;VALUE FOR FLAG INITIALIZATION
				   196  PRNTAC: .EQU     5              ;FLAG TO PRINT ALL CPU REGS VIA PROCESS
				   197  HUTERM: .EQU     H'C            ; TERMINAL SETTING FOR FULL DUPLEX
				   198  ALONE:  .EQU     H'E            ; REAL STAND ALONE INDICATOR
				   199
				   200  ;
				   201  ;     ASCII CHARACTERS
				   202  ;
				   203  CNTRA:  .EQU    H'1             ; CNTR/A
				   204  CNTRB:  .EQU    2               ; CNTR/B
				   205  BACKSP: .EQU    8               ; BACK SPACE CHARACTER
				   206  LF:     .EQU    H'0A            ; LINE FEED
				   207  CR:     .EQU    H'0D            ; RETURN
				   208  XON:    .EQU    H'11
				   209  XOFF:   .EQU    H'13
				   210  CNTRT:  .EQU    H'14            ; CNTR/T
				   211  bell:   .equ    'G' & x'1f
				   212  SPACE:  .EQU    H'20            ; SPACE CHARACTER
				   213  COMMA:  .EQU    H'2C            ; COMMA CHARACTER
				   214  DOT:    .EQU    H'2E            ; DOT
				   215  DELETE: .EQU    H'7F                    ; BACK SPACE CHARACTER
				   216  ;ENDLIN: .EQU    CR                      ; END OF LINE CHARACTER
				   217  PRINTE: .EQU    0               ; END OF LINE INDICATOR
				   218  GETI:   .EQU    0               ; GET INDICATOR
				   219  PUTI:   .EQU    1               ; PUT INDICATOR
				   220
				   221
				   222  ;;;STACKL: .EQU    H'500           ; STACK AREA END RELATIVE TO BEGIN OF SB
				   223  ;;;STATIC: .EQU    H'C000
				   224
				   225  ; from acmd.32k
				   226
				   227  NOTRC:  .EQU    0               ; FLAG OF NO TRACE ACTIVE
				   228  STPN:   .EQU    1               ; FLAG OF STEP N
				   229  STU:    .EQU    2               ; FLAG OF STEP UNTIL
				   230  STW:    .EQU    3               ; FLAG OF STEP WHILE
				   231  STBRK:  .EQU    4               ; FLAG OF BREAK STEP
				   235
				   236  SPACES: .EQU '  '
				   237  EVRF:   .EQU    12              ; VERIFY ERROR CONSTANT
				   238  ECRC:   .EQU    7               ; CRC ERROR
				   239  ESRC:   .EQU    8               ; SEARCH ERROR
				   240  ECXP:   .EQU    10              ; ERROR MORE THEN ONE CXP COMMAND
				   241  EMOD:   .EQU    11
				   242  NLIN:   .EQU    16              ; NUMBER OF BYTE IN A LINE
				   243  MOVC:   .EQU    0               ; # OF MOVE COMMAND
				   244  SRCHC:  .EQU    2               ; # OF SRCH COMMAND
				   245  PRC:    .EQU    12              ; DEFINE PRINT COMMAND
				   246  CHCM:   .EQU    13              ; CHANGE COMMAND NUMBER
				   247  JSBC:   .EQU    7               ; JSB COMMAND NUMBER
				   248  STWC:   .EQU    6               ; STW COMMAND NUMBER
				   249
				   250  msr_ft:         .equ    23
				   251  msr_ut:         .equ    24
				   252  ptbr_mask:      .equ    x'80fffc00
				   253  bpr_mask:       .equ    x'00ffffff
				   254  bcnt_mask:      .equ    bpr_mask
				   255  sc_mask:        .equ    x'ffffffff
				   256
				   257  ; TABLE OF EQUATES - ahelpio
				   258
				   259  PASS1:  .EQU    1       ;PASS 1 FLAG
				   260  PASS2:  .EQU    2       ;PASS 2 FLAG
				   261
				   262  BYTLONG:        .EQU    0       ;BASIC CODING FOR i TYPE
				   263  WRDLONG:        .EQU    1       ; i=    WORD 
				   264  DOUBLNG:        .EQU    3       ; i=    DOUBLE
				   265
				   266  SHRT_REAL:      .EQU    0       ;FLOATING POINT CONVERSION CONSTANTS
				   267  LONG_REAL:      .EQU    1
				   268
				   269  NUMOFINST:      .EQU    131     ; TOTAL NUMBER OF INSTRUCTIONS
				   270
				   271  BIT0:   .EQU    1       ;i CODING AREA CATEGORY
				   272  BIT8:   .EQU    2       ; CODE i @BIT0 OR BIT8 IF=0 THEN NO i
				   273
				   274  ; from ahelp.32k
				   275
				   276  ;EXTRACTION DATA FOR OPERAND CODING
				   277  ; OPCODE FIELD DEFINITION:
				   278  ;       1. LENGTH OF ASCII INSTRUCTION STRING
				   279  ;       2. LENGTH OF BASIC OPCODE
				   280  ;       3. CATEGORY OF LENGTH DIESIGNATOR
				   281  ;               A. 0=NO LENGTH SPECIFICATION
				   282  ;               B. 1=LENGTH SPECIFIED IN OPCODE FIELD BIT 0-1
				   283  ;               C. 2=LENGHT SPECIFIED IN OPCODE FIELD BIT 8-9
				   284  ;                       A '$' IS POSITION OF BWD OPTION
				   285  ;       4. OPCODE START BIT OF OPERAND 1
				   286  ;       5. OPCODE START BIT OF OPERAND 2
				   287  ;       6. OPCODE START BIT OF OPERAND 3
				   288  ;       7. OPCODE START BIT OF OPERAND 4
				   289
				   290  ;(   #1    ) LENGTH OF ASCII NEUMONIC
				   291  F1OFF:  .EQU    0       ;OFFSET TO START OF FIRST DATA FIELD
				   292  F1LGTH: .EQU    3       ;FIELD WIDTH = 3 BITS
				   293  ;
				   294  ;(   #2    ) LENGTH OF BASIC INSTRUCTION CODE
				   295  F2OFF:  .EQU    3       ;OFFSET TO START OF FIELD 2
				   296  F2LGTH: .EQU    2       ;FIELD WIDTH = 2 BITS
				   297  ;
				   298  ;(   #3    ) i CATEGORY
				   299  F3OFF:  .EQU    5       ;OFFSET TO FIELD 3
				   300  F3LGTH: .EQU    2       ;FIELD WIDTH = 2 BITS
				   301  ;
				   302  FLGTHO: .EQU    5       ;WIDTH OF OPERAND MODE CODING START FIELD
				   303
				   304  ;(   #4    ) START OF CODING AREA FOR FIRST OPERAND
				   305  F4OFF:  .EQU    7       ;OFFSET TO THAT FIELD
				   306  F4LGTH: .EQU    FLGTHO  ;WIDTH IS OP FIELD WIDTH 5 BITS
				   307
				   308  ;(   #5    ) START OF CODING AREA FOR SECOND OPERAND
				   309  F5OFF:  .EQU    12
				   310  F5LGTH: .EQU    FLGTHO
				   311
				   312  ;(   #6    ) START OF CODING AREA FOR THIRD OPERAND 
				   313  F6OFF:  .EQU    17
				   314  F6LGTH: .EQU    FLGTHO
				   315
				   316  ;(   #7    ) START OF FOURTH
				   317  F7OFF:  .EQU    22
				   318  F7LGTH: .EQU    FLGTHO
				   319
				   320  ;  #8 SPECIAL CASE CONTROL
				   321  CATOFF:  .EQU   27
				   322  CAT:     .EQU   5
				   323
				   324  ;       CATEGORIES OF SPECIAL CASES
				   325  ;CATEGORY A
				   326  ;       OPERAND IS A DISPLACEMENT
				   327  OP1_DISP:       .EQU    1
				   328  OP2_DISP:       .EQU    2
				   329  OP3_DISP:       .EQU    3
				   330  ;       TREAT VALUE FOUND THERE AS AN ABSOLUTE TYPE ADDR MODE
				   331  ;       ADDR MODE APPENDED TO END OF INST THEN OVERWRITTEN BY DISP VALUE.
				   332  ;       FLAG USED IS OP_IS_DISP
				   333  ;CATEGORY A1
				   334  ;       OPERAND 3 IS FOR BLOCK INSTRUCTION
				   335  ;       FOLLOW THIS ALOGORITHM  ENCODE 1BYT := ( DISP3 * i ) - i
				   336  BLOCK:  .EQU    OP3_DISP
				   337  ;DO CHECK FOR CONFLICT WITH ACBi INSTRUCTION
				   338  ;       IF (QUICK AND OP3_DISP) = TRUE 
				   339  ;       THEN OP3_DISP := ADISP
				   340  ;       ELSE OP3_DISP := BLOCK          
				   341  ;CATEGORY B
				   342  ;       OPERAND IS QUICK TYPE --OP 1 ONLY--
				   343  ;       INSERT 4 BIT FIELD INTO BASIC INST CODE @F1OFF
				   344  ;       FLAG USED IS INS_4BIT
				   345  QUICK:  .EQU    4
				   346  ACB_I:  .EQU    QUICK
				   347  ;ACB_INS:       .EQU    OP3_DISP OR ACB_I
				   348  ACB_INS:        .EQU    OP3_DISP | ACB_I
				   349  ;CATEGORY C 
				   350  ;       OPERAND IS REGLIST --OP1 ONLY--
				   351  ;       DO SPECIAL PARSE
				   352  ;       INSERT 8 BITS @F1OFF
				   353  ;       FLAG USED IS INS_8BIT
				   354  REGLIST:        .EQU    8
				   355
				   356  ;CATEGORY D
				   357  ;       OPERAND IS FOR STRING INST
				   358  ;       DO SPECIAL PARSE
				   359  ;       INSERT 4 BITS @F1OFF
				   360  ;       FLAG USED IS INS_4BIT
				   361  STRNG:  .EQU    12
				   362
				   363  ;CATEGORY E
				   364  ;       OPERAND IS SPEC REG --OP1 ONLY--
				   365  ;       INSERT 4 BITS @F1OFF
				   366  ;       FLAG USED IS INS_4BIT
				   367  SPC_REG:        .EQU    16
				   368
				   369  ;CATEGORY F
				   370  ;       INST IS FILED TYPE LONG OR SHORT OP3-OP4
				   371  ;       SPECIAL PARSE FOR SHORT
				   372  SHR_I:  .EQU    20      ;OP3+OP4=> DISP OP4
				   373  LNG_I:  .EQU    24      ;OP4 IS DISP FLAG
				   374
				   375  ;CATEGORY F1
				   376  ;       INST IS ARRAY TYPE  INDEX OR CHECK
				   377  ;       OP3 IS READi.
				   378  ARAY_I: .EQU    LNG_I
				   379
				   380  ;CATEGORY G
				   381  ;       IF OP1 = IMMED THEN IMMED VALUE <= BYTE
				   382  ;       FOR SHIFTY INST
				   383  ;       FLAG USED IS IMM_IS_BYT
				   384  SWIP:   .EQU    28
				   385
				   386  ;SPECIAL FOR ENTER INST
				   387  ;ENT_I: .EQU    OP2_DISP OR REGLIST
				   388  ENT_I:  .EQU    OP2_DISP | REGLIST
				   389
				   390  ;EQUATES FOR SEGMENT ID
				   391  SB_SEG: .EQU    2
				   392  PC_SEG: .EQU    1
				   393  ;EQUATES FOR SYMBOL ID
				   394  SB_SYM: .EQU    2
				   395  PC_SYM: .EQU    1
				   396
				   397  ;               E Q U A T E S - ahelpio
				   398
				   399  READ:           .EQU    3
				   400  WRITE:          .EQU    4
				   401  MAIN:           .EQU    0        ;USER TERMINAL 
				   402  AUX:            .EQU    1        ;BLX351 PORT
				   403  READ_NUM:       .equ    -80
				   404
				   405  DEB_FLG:        .EQU    157
				   406
				   407  ASYNC:  .EQU    1               ;TIMOUT ERROR
				   408  FREC:   .EQU    2               ;BAD TAPE FORMAT
				   409  RCRC:   .EQU    4               ;BAD CRC ON READ
				   410  CYCLE:  .EQU    100             ;BAUD SETTING FOR DB16000 @ 7MHZ IN PROM
				   411
				   412  ; from asub.32k
				   413
				   414  HANDB:  .EQU    0               ; HAND_SHAKING BIT OF OPMOD WORD
				   415  HANDLF: .EQU    1               ; ON HAND_SHAKING CR ECHO IS LF
				   416  ECHOB:  .EQU    2               ; ECHO BIT
				   417  ECHOLF: .EQU    3               ; FLAG FOR ECHO TO CR BY CR LF
				   418
				   419  ;    S R D L I N     (STANDARD READ LINE PROCEDURE )
				   420  LINLIM: .EQU    72              ; MAX NUMBER OF CHARACTERS IN INPUT LINE
				   421
				   422  ; from edit.32k
				   423
				   424  TEXT_BAD:       .EQU    2       ;BAD TEXT ERROR FLAG VALUE
				   425  LINE_LGTH:      .EQU    58      ;MAX LINE INPUT LENGTH
				   426  EMES_L:         .EQU    7
				   427
				   428  ; from tio.32k
				   429
				   430  RLEN:           .EQU    128             ;TAPE RECORD LENGTH
				   431  LEADN:          .EQU    1000            ;NUMBER OF MASTER SYNC CHARACTERS
				   432  TMARK:          .EQU    H'A5            ;BYTE SYNC MARK CHAR
				   433  RECMARK:        .EQU    H'B7            ;START OF TEXT RECORD
				   434  NUL:            .EQU    0               ;
				   435  MAXCYCLE:       .EQU    2000            ;MAX CLK PULSE WAIT TIME
				   436  ;CYCLE:         .EQU    65              ;FOR ISE WORK AT 5 MHZ CTTL(EMUL RAM)
				   437  ;CYCLE:         .EQU    100             ;FOR ISE WORK AT 5 MHZ CTTL(TARGET RAM)
				   438  ;CYCLE:         .EQU    100             ;FOR 7MHZ CTTL DB16000 (PROM SPEED)
				   439  ;CYCLE:         .EQU    135             ;FOR 7MHZ CTTL DB16000 (RAM SPEED)
				   440                                          ;EQUIVALENT TO APPROX 300 BAUD 
				   441  MAXWAIT:        .EQU    8000000         ;TAPE LEADER WAIT TIME
				   442  ;FILTER:                .EQU    10              ;NOISE FILTER COUNT 10% PERIOD
				   443  FILTER:         .EQU    6               ;NOISE FILTER COUNT 10% PERIOD
				   444
				   445  PRI_BUSY:       .equ    0               ;offset to busy bit
				   446  PRI_SLCT:       .equ    5               ;offset to select bit
				   447  DC1:            .equ    h'11    ;cntrl char to select printer
				   448
				   449  BUSY_WAIT:      .equ    500000          ;max wait time for busy loop
				   450  STRB_TIME:      .equ    1               ;strobe pulse time **ISE TUNED**
				   451
				   452  ;****NOTE****    reverse logic drivers on db16000
				   453  pTRUE:          .equ    0               ;GP logical true
				   454  pFALSE:         .equ    1               ;GP logical false
				   455
				   456  ;
				   457  ;  E R R O R    E X I T
				   458  ;
				   459  ENMI:   .EQU    -8                      ; ERROR NMI
				   460  ENVI:   .EQU    -7                      ; ERROR NVI
				   461  EFPU:   .EQU    -6                      ; ERROR FPU
				   462  EDVZ:   .EQU    -5                      ; ERROR DIVIDE BY ZERO
				   463  EUND:   .EQU    -4                      ; ERROR UN-DEFINED INSTRUCTION
				   464  EFLG:   .EQU    -3                      ; ERROR FLAG TRAP
				   465  EBPT:   .EQU    -2                      ; ERROR BPT
				   466  EILL:   .EQU    -1                      ; ERROR ILLEGAL INSTRUCTION
				   467  ETRC:   .EQU    0                       ; ERROR TRACE TRAP
				   468  EXTR:   .EQU    1                       ; ERROR EXTERNAL ABORT
				   469  EBPR:   .EQU    2                       ; MMU BREAK POINT
				   470  ENST:   .EQU    3                       ; MMU NON-SEQ TRACE
				   471  EABT:   .EQU    4                       ; ERROR ABORT
				   472  EUSR:   .EQU    5                       ; USER ERROR
				   473  ESVC:   .EQU    9                       ; SVC ERROR
				   474  EVIO:   .EQU    11                      ; VIO PROTOCOL ERROR
				   475  EPND:   .EQU    6                       ; PENNDING INTERRUPT ERROR
				   476  ERTS:   .EQU    13                      ; RUN TIME SYSTEM ERROR.
				   477
				   478  ; from pasutil.32k
				   479
				   480  CONST1: .equ    429496729       ; 2**32 / 10
				   481  CONST2: .equ    6               ; 2**32 mod 10
				   482
				   483  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				   484  ;;;;; HARDWARE REGISTERS ;;;;;
				   485  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				   486
				   487
				   488  ;       MMU CONSTANTS
				   489  ;
				   490  CNFMMU: .EQU    2               ; MMU BIT IN CONFIGURATION
				   491  MONT:   .EQU    0               ; FLAG MONITOR TIME
				   492  USERT:  .EQU    1               ; FLAG USER TIME
				   493  PNDMOD: .EQU    2               ; FLAG TO DELAY INTERRUPTS
				   494
				   495
				   496  byte_pat:       .equ    x'55            ;PPI data pattern
				   497
				   498  lor:            .equ    8               ;low order refresh bit
				   499  ms_wait:        .equ    1000            ;1000 ms (1 sec) refresh delay
				   500  cpms:           .equ    500             ;counts per millisecond (10Mhz cpu)
				   501  ;
				   502  ;       Switch S3 definitions
				   503  ;
				   504  fpu_bit:        .equ    4
				   505  mmu_bit:        .equ    5
				   506  test_ppi:       .equ    6
				   507
				   508  on:             .equ    0
				   509  off:            .equ    1
				   510
				   511  ;+++++++++++++
				   513  ;+++++++++++++
				   514
				   515  ; 0x000000 to 0x007fff - EPROM
				   516
				   517  ; 0x008000 to 0x027FFF - Dual Port RAM
				   518
				   519  ram_start:      .equ    x'10000
				   520  ram_top:        .equ    x'27fff
				   521  ram_end:        .equ    ram_top - 8     ;leave room for PC, PSR & MOD
				   522  tru_pat:        .equ    x'5746          ;RAM test pattern data (rat & rrt)
				   523
				   524  ; migry ; has to be changed since code assembles as far as this address
				   525  ;;;INTTAB: .EQU    RESET+H'5100     ; INTERRUPT TABLE ADDRESS FOR VI.03 
				   526  ;;;MODTB:  .EQU    RESET+H'5000     ; MODULE  TABLE ADDRESS FOR VI.03   
				   527  MODTB:  .EQU    RESET+H'6000        ; chnage due to code being found at 0x5000
				   528  INTTAB: .EQU    RESET+H'6100        ; possibly the tape I/O module was linked at a higher address to keep this area free?
				   529
				   530  ;
				   531  ;       usart definitions
				   532  ;
				   533
				   534  io_base:        .equ    x'c00000
				   535  j2base:         .equ    io_base + x'00
				   536  j3base:         .equ    io_base + x'40
				   537
				   538  statp:          .equ    2
				   539  ;DATAP:         .equ    0       already declared in monint
				   540
				   541  j2data:         .equ    j2base + DATAP
				   542  j2stat:         .equ    j2base + statp
				   543  j3data:         .equ    j3base + DATAP
				   544  j3stat:         .equ    j3base + statp
				   545
				   546  tx_rdy:         .equ    0               ; TX-RDY bit of status word
				   547  rx_rdy:         .equ    1               ; RX_RDY bit of status word
				   548
				   549  ; Configuration switches 0xc00030 to 0xc0003e
				   550  ;SWITCHP:       .equ    statbase                already declared
				   551  statbase:       .equ    io_base + x'30
				   552  diag_mode:      .equ    statbase + 8
				   553  ds1:            .equ    statbase + 6    ; LED1  0xc00036
				   554  ds2:            .equ    statbase + 4    ; LED2  0xc00034
				   555  ds3:            .equ    statbase + 2    ; LED3  0xc00032
				   556  diag_run:       .equ    ds1
				   557  diag_fail:      .equ    ds2
				   559  ;+++++++++++++
				   560
				   561  ;
				   562  ;       PSR definitions
				   563  ;
				   564  ipsr:   .equ    1 << 11         ;interrupt enable PSR bit
				   565  spsr:   .equ    1 << 9          ;stack selection bit
				   566  ;
				   567  ;       icu definitions
				   568  ;
				   569  icu:    .equ    x'fffe00
				   570  hvct:   .equ    0 * 2
				   571  svct:   .equ    1 * 2
				   572  eltgl:  .equ    2 * 2
				   573  eltgh:  .equ    3 * 2
				   574  tpll:   .equ    4 * 2
				   575  tplh:   .equ    5 * 2
				   576  ipndl:  .equ    6 * 2
				   577  ipndh:  .equ    7 * 2
				   578  isrvl:  .equ    8 * 2
				   579  isrvh:  .equ    9 * 2
				   580  imskl:  .equ    10 * 2
				   581  imskh:  .equ    11 * 2
				   582  csrcl:  .equ    12 * 2
				   583  csrch:  .equ    13 * 2
				   584  fprtl:  .equ    14 * 2
				   585  fprth:  .equ    15 * 2
				   586  mctl:   .equ    16 * 2
				   587  ocasn:  .equ    17 * 2
				   588  ciptr:  .equ    18 * 2
				   589  pdat:   .equ    19 * 2
				   590  ips:    .equ    20 * 2
				   591  pdir:   .equ    21 * 2
				   592  cctl:   .equ    22 * 2
				   593  cictl:  .equ    23 * 2
				   594  lcsvl:  .equ    24 * 2
				   595  lcsvh:  .equ    25 * 2
				   596  hcsvl:  .equ    26 * 2
				   597  hcsvh:  .equ    27 * 2
				   598  lccvl:  .equ    28 * 2
				   599  lccvh:  .equ    29 * 2
				   600  hccvl:  .equ    30 * 2
				   601  hccvh:  .equ    31 * 2
				   602
				   603  CRunl:  .equ    1 << 2
				   604  CRunh:  .equ    1 << 3
				   605  ;
				   606  ;       mode control definitions
				   607  ;
				   608  coutd:  .equ    1 << 6
				   609  ntar:   .equ    1 << 1
				   610  bus8:   .equ    0
				   611  frz:    .equ    1 << 3
				   612  clkm:   .equ    1 << 4
				   613  cfrz:   .equ    1 << 7
				   614
				   615  USRT_BN: .EQU   6               ; BIT NUBER THAT SELECT 7 OR 8 BIT PER CHAR
				   616
				   617  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				   618  ;;;;;                     DATA SECTION                      ;;;;;
				   619  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				   620  ;       TERMINAL RECORD
00000000 IM			   621          .DSECT
00000000 IM			   622  INBUF:  .BLKB   80              ; INPUT BUFER
00000050 IM			   623  INLM:   .BLKB   4               ; POINTER TO LAST CHARACTER READ
				   624  OUTB:   .EQU    INBUF           ; OUTPUT BUFFER (SAME AS INPUT )
				   625  OUTLM:  .EQU    INLM            ; POINTER TO LAST BYTE IN OUTB TO BE PRINTED
				   626  TRMRLG: .EQU    $               ; TERMINAL RECORD LENGTH
00000054 IM			   627          .ENDSEG
				   628
				   629  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				   630  ;;;;;                   STATIC SECTION                      ;;;;;
				   631  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				   632
00000000 SB			   633          .STATIC                 ; DEFINE STATIC AREA
				   634
00000000 SB			   635  FIRST:  .BLKW   1               ; FOR USE IN DETERMINING WHETER TO RUN CONFIDENCE TEST
00000002 SB			   636  OPMOD:  .BLKB   1               ; OPERATION MODE VARIABLE
00000003 SB			   637  OPHND:  .BLKB   1               ; OPERATION MODE HAND_SHAKING
00000004 SB			   638  MON_USR:.BLKB   1               ; MONITOR/USER TIME FLAG
00000005 SB			   639  NOTECHO:.BLKB   1               ; TERM READ ECHO FLAG
00000006 SB			   640  NDTRM:  .BLKB   1               ; #  OF DEFULT TERMINAL
00000007 SB			   641  ERRTYP: .BLKB   1               ; ENTRY TYPE
00000008 SB			   642  CONFIG: .BLKB   1               ; CONFIGURATION BYTE
00000009 SB			   643  DTRM:   .BLKB   4               ; POINTER TO DEFULT TERMINAL BUFFER
0000000d SB			   644  L:      .BLKB   1               ; SAVE COMMAND NUMBER
0000000e SB			   645          .ALIGN 2
00000010 SB			   646  SCRCH1: .BLKB   4               ; SCRACH 1
00000014 SB			   647  SCRCH2: .BLKB   4               ; SCRACH 2
00000018 SB			   648  STRTADR:.BLKB   4               ; SAVE RESET ADDRESS
0000001c SB			   649  ENDADR: .BLKB   4               ; SAVE END INTERRUPT ROUTINE ADDRESS
				   650  SEREA:
00000020 SB			   651  SVFP:   .BLKB   4               ; SAVE FP
00000024 SB			   652  SVUS:   .BLKB   4               ; SAVE US
00000028 SB			   653  SVIS:   .BLKB   4               ; SAVE IS
0000002c SB			   654  SVPC:   .BLKB   4               ; SAVE PC
00000030 SB			   655  SVMOD:  .BLKB   4               ; SAVE MOD
00000034 SB			   656  SVPSR:  .BLKB   4               ; SAVE PSR
00000038 SB			   657  SVINTB: .BLKB   4               ; SAVE INTB
0000003c SB			   658  SVR7:   .BLKB   4*7             ; SAVE R
00000058 SB			   659  SVR0:   .BLKB   4               ; SAVE R0
				   660  ;
0000005c SB			   661  SVMSR:  .BLKB   4               ; SAVE MSR
00000060 SB			   662  SVBPR0: .BLKB   4               ; SAVE BPR0
00000064 SB			   663  SVBPR1: .BLKB   4               ; SAVE BPR1
00000068 SB			   664  DUM1:   .BLKB   4               ; DUMMY STORAGE
0000006c SB			   665  DUM2:   .BLKB   4               ; 
00000070 SB			   666  DUM3:   .BLKB   4               ; 
				   667  ;
				   668  ;
00000074 SB			   669  MNFP:   .BLKB   4               ; SAVE MONITOR FP
00000078 SB			   670  MNMSR:  .BLKB   4               ; SAVE MONITOR MSR
0000007c SB			   671  MNSP:   .BLKB   4               ; SAVE MONITOR SP
00000080 SB			   672  MNINTB: .BLKB   4               ; ""     ""    INTB
00000084 SB			   673  MNPSR:  .BLKB   2               ; MONITOR PSR
00000086 SB			   674  BRKAR:  .BLKB   NSFBR*4         ; SOFT-BPR ARRAY
000000be SB			   675  STPCNT: .BLKB   4               ; STEP COUNTER
000000c2 SB			   676  ACTBRK: .BLKB   4               ; # OF CURRENT BREAK
000000c6 SB			   677  INS:    .BLKB   NSFBR           ; ARRAY OF BRPR INSTRUCTION SAVE
000000d4 SB			   678  OLDPC:  .BLKB   16              ; SAVE OLD PC,US,IS,MOD IN CXP COMMAND
000000e4 SB			   679  STUADD: .BLKB   16              ; STU COMMAND VERIABLE ADDRESS
000000f4 SB			   684  STEPFLG: .BLKB  1               ; STEP FLAG
000000f5 SB			   685  ACKFLG: .BLKB   1               ; ACKNOLEDGE FLAGE
000000f6 SB			   686  CXPFLG: .BLKB   1               ; CXP COMMAND COUNTER
				   687  ;
000000f7 SB			   688          .ALIGN 0x100
00000100 SB			   689  TERM1:  .BLKB   TRMRLG          ; TERMINAL 1 RECORD
00000154 SB			   690  TERM2:  .BLKB   TRMRLG          ; TERMINAL 2 RECORD
				   691  JMPRAM: .EQU    SCRCH1
				   692  ;
				   693  ;       SB AREA FOR HUMON NEEDS
000001a8 SB			   694  DEFSET: .BLKB                   ; DEFUALT FLAG START AREA
				   695  ASCII:  .EQU    DEFSET          ; FLAG TO ACTIVATE ASCII DUMP ON PRINTOUT
000001a9 SB			   696  SPACIT: .BLKB                   ; SPACES DURING DUMP
000001aa SB			   697  PROCESS:.BLKB                   ; COMPLEX COMMAND PROCESS FLAG
000001ab SB			   698  ALONFLG:.BLKB                   ; REAL STAND ALONE INDICATOR
000001ac SB			   699  NEGIT:  .BLKB                   ; FLAG TO NEGATE A NUMBER
000001ad SB			   700          .ALIGN 2
000001ae SB			   701  LADDR:  .BLKD                   ; ADDRESS OF LAST LOAD
000001b2 SB			   702  REGCHR: .BLKD                   ; REGISTER ID FOR PRINTOUT OF COMPLEX COMNDS.
				   703  CHRNUM: .EQU    REGCHR          ; NUMBER OF ASCII DUMP CHARS
				   704  BUFLGT: .EQU    36              ; CHR BUFFER FOR PROCESS AND ASCII DUMP
000001b6 SB			   705  PROCBUF:.BLKB BUFLGT    ; CMPLX COMND BUFFER AREA
				   706  ASCDUMP:.EQU  PROCBUF   ; ASCDUMP AND PROBUF ARE EQUAL FOR ECONOMY
000001da SB			   707          .BLKD   4       ;BUFFER ZONE
000001ea SB			   708  TEMP1:  .BLKD           ;STATIC WORKING AREA
				   709  ;TEMP2: .BLKB           ;FOR USERAID - ; migry ; removed as not used
00000000 SB			   710          .BLKB   8       ;ROUTINES
000001f6 SB			   711  ANUMBER:.BLKB   40
				   712
				   713
				   714  ;       STATIC BASE AREA - ahelpio
				   715  ;
				   716  ;       THIS AREA CONTAINS DYNAMIC CODE BUILDING DATA
				   717
0000021e SB			   718  LASTSEG:        .BLKB   ;LAST SEGMENT BEORE CHANGE
0000021f SB			   719  SEGMENT:        .BLKB   ;CURRENT SEGMENT
00000220 SB			   720  SBCOUNT:        .BLKD   ;SB COUNTER
00000224 SB			   721                  .BLKD   ;THESE GLOBALS ARE INIT BY AHELPIO AND ARE NOT ZEROED
				   722                          ;AT THE START OF MONASM ENTRY
				   723  SBSTRT:
				   724
00000228 SB			   725  BASECODE:       .BLKD   ;BASIC INSTRUCTION CODE
00000000 SB			   726                  .BLKW   ;BIT BUFFER
				   727  SUFFIX:                 ;SUFFIX FOR INDEX ADDR MODE 
0000022e SB			   728  SUFFIX1:        .BLKB   ; FOR OPERANDS 1-4
0000022f SB			   729  SUFFIX2:        .BLKB
00000230 SB			   730  SUFFIX3:        .BLKB
00000231 SB			   731  SUFFIX4:        .BLKB
				   732
				   733  SUFF_FLGS:              ;FLAG THAT SUFFIX IS PRESSENT
00000232 SB			   734  S_FLG1:         .BLKB
00000233 SB			   735  S_FLG2:         .BLKB
00000234 SB			   736  S_FLG3:         .BLKB
00000235 SB			   737  S_FLG4:         .BLKB
				   738
				   739  DISP1X:                 ;FIRST DISPLACEMENT FOR 
00000236 SB			   740  DISP1A:         .BLKD   ; OPERANDS 1-4
0000023a SB			   741  DISP1B:         .BLKD
0000023e SB			   742  DISP1C:         .BLKD
00000242 SB			   743  DISP1D:         .BLKD
				   744
				   745  DISP2X:                 ;SECOND DISPLACEMENT FOR
00000246 SB			   746  DISP2A:         .BLKD   ; OPERANDS 1-4
0000024a SB			   747  DISP2B:         .BLKD
0000024e SB			   748  DISP2C:         .BLKD
00000252 SB			   749  DISP2D:         .BLKD
				   750
				   751  LEN1:                   ;LENGTH OF DISPLACE MENTS FOR
00000256 SB			   752  LEN1A:          .BLKB   ; OPERANDS 1-4
00000257 SB			   753  LEN1B:          .BLKB
00000258 SB			   754  LEN1C:          .BLKB
00000259 SB			   755  LEN1D:          .BLKB
				   756
				   757  LEN2:                   ;LENGTH OF DISPLACEMENT 2
0000025a SB			   758  LEN2A:          .BLKB   ; FOR OPERANDS 1-4
0000025b SB			   759  LEN2B:          .BLKB
0000025c SB			   760  LEN2C:          .BLKB
0000025d SB			   761  LEN2D:          .BLKB
				   762
				   763  ;       SYMBOL ID VARIABLE
0000025e SB			   764  SYM_TYPE:       .BLKB   ;SET BY SYM_SRCH
0000025f SB			   765  SBC:            .BLKD   ;STATIC BASE SYMBOL VALU TO DEDUG CONTROL
00000263 SB			   766  LABEL:          .BLKD   ;LABEL IF ANY FOR CURRENT LINE
				   767  ;       VARIABLE USED TO CONSTRUCT THE INST CODE
00000267 SB			   768  CODELGTH:       .BLKB   ;BASIC CODELENGTH :INT 1..4
00000268 SB			   769  ITYPE:          .BLKB   ;DATUM LENGTH :INT 1..4
00000269 SB			   770  DISPLACE:       .BLKB   ; FLAG OF DATUM TYPE IMMD/DISP :BOOL
				   771
				   772  ;       PARSING VARIABLES
0000026a SB			   773  NUMLETS:        .BLKB   ; LENGTH OF ASCCII NEUMONIC
0000026b SB			   774  ADDRMODE:       .BLKB   ; BASIC ADDR MODE
0000026c SB			   775  OPFIELD:        .BLKB   ; OFFSET TO START OF CURRENT ADDR MODE FIELD
0000026d SB			   776  OPCLGTH:        .BLKB   ; LENGTH OF BASIC INST
0000026e SB			   777  ICODE:          .BLKB   ; i CATEGORY
0000026f SB			   778  OPSTRT:         .BLKD   ; VECTOR TO CURRENT OPERAND INPUT
00000273 SB			   779  INS_4BIT:       .BLKB   ;FLAG TO INSERT 4BIT ADDR MODE FIELD
00000274 SB			   780  INS_8BIT:       .BLKB   ; "      "   "   8
00000275 SB			   781  CATGORY:        .BLKB   ;OPERAND CATEGORIES
00000276 SB			   782  OP_IS_DISP:     .BLKB   ;OPERAND IS A DISP
00000277 SB			   783  ADISP:          .BLKB   ; WHICH DISP IS A DISP
00000278 SB			   784  IMM_IS_BYT:     .BLKB   ; IMM VAL IS BYTE
00000279 SB			   785  A_LONG_F:       .BLKB   ;FLAG THAT DISP IS FOR LONG FIELD INST
0000027a SB			   786  VECIN:          .BLKD   ;START OF INPUT LINE
0000027e SB			   787  ENDLIN:         .BLKD   ;END OF INPUT LINE
00000282 SB			   788  PC_ADDR:        .BLKD   ;CURRENT ADDRESS
00000286 SB			   789  ERR_FLG:        .BLKB   ;ROUTINE ERROR FLAG FOR SYMBOLTABLE FUNCTIONS
00000287 SB			   790  YES_SYM:        .BLKB   ;FLAG THAT SYMBOL WAS FOUND
00000288 SB			   791  S_FOUND:        .BLKB   ;BOOLEAN TO INDICATE PRESENSE OF A SYMBOL
00000289 SB			   792  SYM_VAL:        .BLKD   ;THE SYMBOL VALUE
0000028d SB			   793  PC_REL:         .BLKB   ;FLAG TO CALCULATE PFOGRAM BASE ADDRESS
				   794  DISP_FLGS:              ;SYMBOL LENGHT DIRECTIVE FOR FORWARD REF VALUES
0000028e SB			   795  DISP_B:         .BLKB   ;BYTE LONG
0000028f SB			   796  DISP_W:         .BLKB   ;WORD LONG
00000290 SB			   797  DISP_D:         .BLKB   ;DOUBLE LONG
00000000 SB			   798                  .BLKB   ;FLAG BUFFER AREA
00000292 SB			   799  FORM:           .BLKD   ;LONG OR SHORT FLOATING POINT FLAG      
00000296 SB			   800  F_ERROR:        .BLKD   ;FLOATING POINT CONVERSION ERROR FLAG
0000029a SB			   801  CONREAL:        .BLKB   ;A SHORT REAL NUMBER CONVERSION INST FLAG
0000029b SB			   802  SHRTREAL:       .BLKB   ;A REAL TO REAL SHORT NUMBER INST FLAG
0000029c SB			   803  A_REAL_NUM:     .BLKD   ;A REAL NUMBER
000002a0 SB			   804                  .BLKD   ;2 DOUBLES IF LONG
000002a4 SB			   805  TXT_BUF:        .BLKB   80      ;ADJUSTED INPUT LINE
000002f4 SB			   806                  .BLKD
				   807  SBEND:          .EQU    $
				   808  SBSIZE: .EQU    ($ - SBSTRT)
				   809
				   810  ;       STATIC BASE AREA - ahelp
				   811
000002f8 SB			   812                  .ALIGN 2
000002fa SB			   813  VECIN3:         .BLKD           ;was VECIN ; migry ;
000002fe SB			   814  VECEN:          .BLKD
00000302 SB			   815  MEMSIZ:         .BLKD           ;MEMORY SIZE
00000306 SB			   816  PAR_VAL:        .BLKD           ;LINE PARAMETER VALUE
0000030a SB			   817  MON_BASE:       .BLKB
0000030b SB			   818  BASE:           .BLKB
0000030c SB			   819  A_PARAM:        .BLKB           ;BOOLEAN FOR LINE PARAM
0000030d SB			   820  HISTF:          .BLKD           ;HISTORY FILE
00000311 SB			   821  DELIMIT:        .BLKB           ;PARAMETER DELIMITER CHAR
00000312 SB			   822  LEADZERO:       .BLKB
00000313 SB			   823  ERROR:          .BLKD           ;ERROR CODE
00000317 SB			   824  ASM_ERR:        .BLKD           ;ASSEMBLER ERROR
0000031b SB			   825  ERR_CNT:        .BLKD           ;ASSEMBLY ERROR COUNT
0000031f SB			   826  TEMP4:          .BLKD           ;GENERAL PURPOSE VARIABLE - was TEMP1 ; migry ;
00000323 SB			   827  TEMP2:          .BLKD           ;   ''      ''      ''
00000327 SB			   828  TEMP3:          .BLKD           ;   ''      ''      ''
0000032b SB			   829  COUNTER:        .BLKD
0000032f SB			   830  PROG_BASE:      .BLKD           ;PC START
00000333 SB			   831  ASM_LIN:        .BLKD
00000337 SB			   832  ASS_BLED:       .BLKB           ;FLAG FOR SUCCESFUL ASSEMBLY
00000338 SB			   833  PASS_NUM:       .BLKB           ;PASS NUMBER
00000339 SB			   834  LIN_ERR:        .BLKB           ;ASSEMBLED LINE ERROR FLAG
0000033a SB			   835  SYM_TAB:        .BLKD 
0000033e SB			   836  CODESTAR:       .BLKD
00000342 SB			   837  A_SP:           .BLKD           ;AUTO SELECTED SP
00000346 SB			   838  A_MOD:          .BLKD           ;EXPORTED TO MONITOR
0000034a SB			   839  IOBUF:          .BLKB   70     ; ASCII string data
00000390 SB			   840  IOBUF2:         .BLKB   60
				   841
000003cc SB			   842                  .ALIGN H'10     ;AUTO MODE MODULE TABLE
				   843  MODTAB:
000003d0 SB			   844  A_SB:           .BLKD
000003d4 SB			   845                  .BLKD
000003d8 SB			   846  A_PC:           .BLKD
000003dc SB			   847                  .BLKD
				   848
				   849  ; STATIC BASE AREA - edit
000003e0 SB			   850  SAFETY: .BLKB               ;SANITY TIMER               
				   851
				   852  ; STATIC BASE AREA - autil
000003e1 SB			   853  NUMCH:    .BLKB 82
00000433 SB			   854  LEAD_0:   .BLKB
00000434 SB			   855  DEC_VAL:  .BLKD
00000438 SB			   856  STROBE:   .BLKB
				   857
00000439 SB			   858  FLOATS: .BLKB   208             ; 140(SB)-208(SB): SYSTEM working area
				   859
00000509 SB			   860           .ALIGN 0x800
				   861  ; STATIC BASE AREA - edit
00000800 SB			   862  LGTH:   .BLKD               ;LENGTH OF INPUT LINE
00000804 SB			   863  LINNUM: .BLKD               ;ACTION LINE NUMBER
00000808 SB			   864  NEXT_LN:.BLKD               ;AUTO SEQUENCE LINE NUMBER
0000080c SB			   865  LAST_L: .BLKD               ;LAST GOOD LINE NUMBER FOR ERROR RECOVERY
00000810 SB			   866  LAST_AD:.BLKD               ;ADDRESS OF LAST GOOD LINE  
00000814 SB			   867  L_ADDR: .BLKD               ;LINE ADDRESS
00000818 SB			   868  LINES:  .BLKD               ;NUMBER OF LINES IN BUFFER
0000081c SB			   869  TXTEND: .BLKD               ;END OF TEXT
00000820 SB			   870  TEXT:   .BLKB               ; EDIT TEXT STORAGE AREA ??? SO MUST BE AT THE END OF SB???
				   871
				   872  STATICSZ: .EQU $-OPMOD
				   873
00000821 SB			   874          .ENDSEG
				   875

00000000                           .org 0
				   877
				   878  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				   879  ; start of aint.32k
				   880
				   881  ;
				   882  ;
				   883  ;   R E S E T    R O U T I N E
				   884  ;
				   885  ;
				   886
				   887
				   888  RESET:
00000000 PC ea8003		   889          br       RESETF:w              ; skip TRAP module descriptors
				   890
				   891  ;@@@@@@@@@@@@@@
				  1038  ;@@@@@@@@@@@@@@
				  1039
				  1040  ;@@@@@@@@@@@@@@
				  1113  ;@@@@@@@@@@@@@@
				  1114
				  1115  ;+++++++++++++
				  1117  ;+++++++++++++
				  1118  RESETF:
				  1119
				  1120          ;;;;;;;;;;;;;;;;;;
				  1121          ; ORIGINAL RESET ;
				  1122          ;;;;;;;;;;;;;;;;;;
00000003 PC 7da10200		  1123          BICPSRW PSRS                    ; {STOP EXECUTION IF PSR_U ON}
00000007 PC 67d8c0005ff9	  1124          ADDR    MODTB,R1                ; 
0000000d PC ed0f		  1125          LPRW    MOD,R1                  ; INIT MOD REG so check of first will
0000000f PC 6f4d00		  1126          LPRD    SB,0(R1)                ; work,  INIT SB REG
00000012 PC 85a6303900		  1127          CMPW    12345,FIRST             ; IF THIS IS POWER UP RESET THEN
00000017 PC 1ac00008b8		  1128          BNE     dct16:d                 ; migry add :D ; Do the diagnostics 
				  1129
				  1130  RESET2: 
0000001c PC 67d8c0005fe4	  1131          ADDR    MODTB,R1                ; return point from diagnostics
00000022 PC ed0f		  1132          LPRW    MOD,R1                  ; INIT MOD REG
00000024 PC 6f4d00		  1133          LPRD    SB,0(R1)                ; INIT SB REG
00000027 PC 67d8c00060d9	  1134          ADDR    INTTAB,R1
0000002d PC 6f0f		  1135          LPRD    INTBASE,R1              ; INTBASE:=ADDRESS OF INTTAB
0000002f PC 970e38		  1136          MOVD    R1,SVINTB               ; INIT USER INTBASE
00000032 PC 67d08500		  1137          ADDR    STACKL(SB),R1           ; SP:=ADDRESS OF STACK AREA
00000036 PC ef0c		  1138          LPRD    SP,R1                   ;   ( SP:=SB+STACKL)
00000038 PC a74e810028		  1139          ADDR    256(R1),SVIS            ; SVIS:=SP+20 INIT USE IS
0000003d PC 5cd006		  1140          MOVQB   TRMA,NDTRM              ; NDTRM:=TRMA (* SET TERM A AS DEFAULT
00000040 PC 5fd002		  1141          MOVQD   0,OPMOD                 ; OPERATION MOD := STAND ASIDE
00000043 PC 94a60c02		  1142          MOVB    HUTERM,OPMOD            ; SET TERM TO NO ECHO/CRLF      
00000047 PC 5cd005		  1143          MOVQB   FALSE,NOTECHO           ; MON_USR := MONITOR  
0000004a PC 5fd081a8		  1144          MOVQD   INITMOD,DEFSET          ; SET STAND ALONE MODE,PROCESS OFF
0000004e PC 94a60e81ab		  1145          MOVB    ALONE,ALONFLG
00000053 PC 5fd02c		  1146          MOVQD   0,SVPC                  ; USER_PC := 0
00000056 PC 5fd034		  1147          MOVQD   0,SVPSR                 ; USER_PSR := 0
00000059 PC ce58a00f		  1148          MOVZBD  NSFBR+1,R1              ; INIT SOFTWARE BPR ARRAY
0000005d PC 5ff0d18082		  1149  RST1:   MOVQD   0,BRKAR-4[R1:D]         ; FOR I:=1,NSFBR DO BRKAR:=0
00000062 PC cc0f7b		  1150          ACBB    -1,R1,RST1
00000065 PC a7de802918		  1151          ADDR    BEGINA:W,STRTADR        ; SAVE START ADDRESS
0000006a PC a7de82b51c		  1152          ADDR    ENDINT:W,ENDADR         ; SAVE END INTERRUPT ROUTINE ADDRESS
				  1153  ;
0000006f PC 02c00051c2		  1154          BSR     INITICU
				  1155  ;
00000074 PC 02c000515e		  1156          BSR     INITTIMER
				  1157  ;
00000079 PC 02c0005057		  1158          BSR     INITUART                ; migry ; MUST CALL HARDWARE DEPENDANT ROUTINE
				  1159
0000007e PC 0e0b00		  1160          SETCFG  []
00000081 PC 5cd008		  1161          MOVQB   0,CONFIG                ; SET CONFIGURATION
00000084 PC 029300		  1162          BSR     MAINLP                  ; TYPE RESET MESSAGE
				  1163          ;
00000087 PC 02c00050ff		  1164          BSR     INITAUXU
				  1165
				  1166          ;??? FALLS THRU TO NOTHING???? 
0000008c PC ea00		  1167          BR      $
				  1169  ;+++++++++++++
				  1170  ;
				  1171  BEGINA:
				  1172  ;
0000008e PC 57d010		  1173  ERROR1: MOVD    SCRCH1,R1               ; RELOAD R1
00000091 PC 0213		  1174  ERROR2: BSR     MNENTR:B                ; SAVE USER STATUS LOAD MONITOR STATUS
00000093 PC 0280d6		  1175  ERROR3: BSR     BRKRMV:W                ; BRKRMV {BREAK REMOVE ROUTINE}
00000096 PC ce5cd007		  1176          MOVXBD  ERRTYP,R1               ; LOAD ERROR PARAMETER
0000009a PC 17d08054		  1177          MOVD    SVR0-4,R0               ; LOAD NUMBER TO BE PRINTED WITH ERROR
				  1178  ERROR4: 
0000009e PC 029465		  1179          BSR     ERENT                   ; JUMP TO ERROR IM COMMAND LOOP
				  1180  ;
				  1181  ;
				  1182  ;   M N E N T R     (* ENTER COMMAND LINE INPUT MODE*)
				  1183  ;
				  1184  ;
000000a1 PC 57d010		  1185  MNENTRA: MOVD   SCRCH1,R1               ; RELOAD R1 FROM EXIT
000000a4 PC 97ce0014		  1186  MNENTR: MOVD    0(SP),SCRCH2            ; SAVE RETURN ADDRESS OF THIS ROUTINE
000000a8 PC 1cd004		  1187          CMPQB   MONT,MON_USR            ; IF MON_USER<> MONT THEN 
				  1188                                          ;       { MONITOR TIME  }
000000ab PC 0a805b		  1189          BEQ     MNENTR3:W               ; BEGIN
000000ae PC ce99ce0830		  1190          MOVZWD  8(SP),SVMOD             ;   SAVE MOD  OF USER PROGRAM
000000b3 PC 95ce0a34		  1191          MOVW    10(SP),SVPSR            ;   SAVE PSR
000000b7 PC 97ce042c		  1192          MOVD    4(SP),SVPC              ;   SAVE PC
000000bb PC a7ce0c28		  1193          ADDR    12(SP),SVIS             ;   SAVE IS
000000bf PC 7da30200		  1194          BISPSRW PSRS                    ;   PSR-S :=1
000000c3 PC a7ce0024		  1195          ADDR    0(SP),SVUS              ;   SAVE US
000000c7 PC 2fd420		  1196          SPRD    FP,SVFP                 ;   SAVE FP
000000ca PC 2fd738		  1197          SPRD    INTBASE,SVINTB          ;   SABE INTB
000000cd PC a7d6805c10		  1198          ADDR    SVR0+4,SCRCH1
000000d2 PC efd410		  1199          LPRD    SP,SCRCH1               ;   SP:= ADDRESS OF SVR0
000000d5 PC 62ff		  1200          SAVE    [R0,R1,R2,R3,R4,R5,R6,R7]       ; SAVE R0-R7
				  1201                                          ; END;
000000d7 PC edd68084		  1202          LPRW    PSR,MNPSR               ; LOAD MONITOR PSR
000000db PC efd4807c		  1203          LPRD    SP,MNSP                 ; LOAD MONITOR SP
000000df PC 72ff		  1204          RESTORE [R0,R1,R2,R3,R4,R5,R6,R7] ; LOAD MONITOR R0-R7
000000e1 PC 6fd48074		  1205          LPRD    FP,MNFP                 ; LOAD MONITOR FP
000000e5 PC 6fd78080		  1206          LPRD    INTBASE,MNINTB          ; LOAD MONITOR INTB
000000e9 PC 57d61400		  1207          MOVD    SCRCH2,0(SP)            ; PUT RETURN ADDRESS ON STACK
000000ed PC 5cd004		  1208          MOVQB   MONT,MON_USR            ; MON_USER:= MONITOR TIME
000000f0 PC b4a60208		  1209          TBITB   CNFMMU,CONFIG           ; IF CNG.MMU ON  THEN
000000f4 PC 9a12		  1210          BFC     MNENTR3:B               ;   BEGIN
000000f6 PC 1fd0805c		  1211          CMPQD   0,SVMSR                 ;     IF MSR WAS NOT SAVED THEN
000000fa PC 1a07		  1212          BNE     MNENTR2:B               ;       BEGIN
000000fc PC 1e0fd5805c		  1213          SMR     MSR,SVMSR               ;         SAVE MSR;
00000101 PC 1e0bd58078		  1214  MNENTR2:LMR     MSR,MNMSR               ;         MSR := MONITOR MSR;
				  1215  MNENTR3:                                ;       END;
00000106 PC e7d18100		  1216          ADDR    TERM1,R7                ; DTRM:=TERM1
0000010a PC a77900		  1217          ADDR    OUTB(R7),R6             ; INIT DTRM.OUTB
0000010d PC 1200		  1218          RET     0
				  1219  ;
				  1220  ;
				  1221  ;   M N E X I T     (* EXIT COMMAND LINE MODE *)
				  1222  ;
				  1223  ;
0000010f PC 94a68007		  1224  MNEXIT: MOVB    NOERR, ERRTYP           ;NO ERROR FLAG
				  1225  ;       MOVQB   FALSE,PNDF              ; RESET PENDING INTERRUPT FLAG
00000113 PC 2fd48074		  1226          SPRD    FP,MNFP                 ; SAVE MONITOR FP
00000117 PC 2fd78080		  1227          SPRD    INTBASE,MNINTB          ; SAVE MONITOR INTB
0000011b PC add68084		  1228          SPRW    PSR,MNPSR               ; SAVE MONITOR PSR
0000011f PC 62ff		  1229          SAVE    [R0,R1,R2,R3,R4,R5,R6,R7] ; SAVE MONITOR R0-R7
00000121 PC afd4807c		  1230          SPRD    SP,MNSP                 ; SAVE MONITOR SP
00000125 PC dcd004		  1231          MOVQB   USERT,MON_USR           ; MON_USR:= USER TIME
00000128 PC 7da30200		  1232          BISPSRW PSRS                    ; SET S BIT IN PSR {LOAD US}
0000012c PC efd424		  1233          LPRD    SP,SVUS                 ; LOAD USER  US
0000012f PC 6fd420		  1234          LPRD    FP,SVFP                 ; LOAD FP
00000132 PC 6fd738		  1235          LPRD    INTBASE,SVINTB          ; LOAD INTB
00000135 PC 7da10200		  1236          BICPSRW PSRS                    ; PSR-S:=0
00000139 PC a7d63c10		  1237          ADDR    SVR7,SCRCH1
0000013d PC efd410		  1238          LPRD    SP,SCRCH1               ; SP:= ADDRESS SVR7             
00000140 PC 72ff		  1239          RESTORE [R0,R1,R2,R3,R4,R5,R6,R7] ; LOAD R0-R7
00000142 PC efd428		  1240          LPRD    SP,SVIS                 ; LOAD IS
00000145 PC 4e88a60a34		  1241          CBITB   PSR_P,SVPSR             ; CLEAR P BIT IN PSR
0000014a PC d5d534		  1242          MOVW    SVPSR,TOS               ; PREPARE RETURN PUSH PSR
0000014d PC d5d530		  1243          MOVW    SVMOD,TOS               ; PUSH MOD
00000150 PC d7d52c		  1244          MOVD    SVPC,TOS                ; PUSH PC
00000153 PC b4a60208		  1245          TBITB   CNFMMU,CONFIG           ; IF CONFIG.MMU THEN
00000157 PC 9a10		  1246          BFC     MNEXT1:B                ;   BEGIN
00000159 PC 1e0fd58078		  1247          SMR     MSR,MNMSR               ;     MNMSR := MONITOR MSR;
0000015e PC 1e0bd5805c		  1248          LMR     MSR,SVMSR               ;     MSR := SVMSR {LOAD MSR}
00000163 PC 5fd0805c		  1249          MOVQD   0,SVMSR                 ;     SVMSR := 0 {FLAG FOR SAVING NSR}
00000167 PC 4200		  1250  MNEXT1: RETT    0                       ;   END;
				  1251  ;
				  1252  ;
				  1253  ;
				  1254  ;
				  1255  ;                  B R E A K    R E M O V E
				  1256  ;
				  1257  ;     REMOVES  BPT INSTRUCTION OF EACH ACTIVE BREAK POINTS 
				  1258  ;
				  1259  ;
				  1260  ;
00000169 PC 5f18		  1261  BRKRMV: MOVQD   0,R3            ; BRKN:=0
0000016b PC 57d02c		  1262          MOVD    SVPC,R1         ; R1:=USE_PC
0000016e PC ce18a00e		  1263          MOVZBD  NSFBR,R0        ; FOR I:= NSFBR DOWNTO 1 DO
00000172 PC 97f0d08082		  1264  RMV1:   MOVD    BRKAR-4[R0:D],R2 ;BEGIN
00000177 PC b4a01d		  1265          TBITB   BPR_BE,R2       ;    R2:=BRKAR[I];
0000017a PC 9a1c		  1266          BFC     RMV2:B          ;    IF BRKAR[I].BE THEN
0000017c PC aba000ffffff	  1267          ANDD    H'FFFFFF,R2     ;   BEGIN
00000182 PC 04a7d0f280c5	  1268          CMPB    BPTC,INS-1[R0:B]; IF BP THEN SKIP SAVE
00000188 PC 0a08		  1269          BEQ     RMV1A:B 
0000018a PC 94e2d080c500	  1270          MOVB    INS-1[R0:B],0(R2);    M(BRKAK[I].ADDR):=INS[I]
				  1271                  ; **** MOVSU ****;    (* RELOAD INSTRUCTION TO MEMORY *)
00000190 PC 8708		  1272  RMV1A:  CMPD    R1,R2           ;     IF BRKAR[I].ADDR=USER_PC THEN
00000192 PC 1a04		  1273          BNE     RMV2:B          ;     BEGIN
00000194 PC d700		  1274          MOVD    R0,R3           ;       BRKN:=I
00000196 PC cc075c		  1275  RMV2:   ACBB    -1,R0,RMV1      ; END FOR
00000199 PC 84a68007		  1276          CMPB    NOERR, ERRTYP
0000019d PC 1a8051		  1277          BNE     RMVEX:W
000001a0 PC 1c18		  1278          CMPQB   0,R3            ; IF BPRN>1 THEN (* SOFTWARE BP *)
000001a2 PC 0a1c		  1279          BEQ     RMV4:B          ; BEGIN
000001a4 PC 97db804c00		  1280          MOVD    MESG:W,0(R6)    ;    OUTB(DTRM.OUTLM):=CR LF B
000001a9 PC 94e3dbc0003ad303	  1281          MOVB    HEXAN+1[R3:B],3(R6) ;  OUTB(DTRM.OUTLM):= ASCII (BRKN)
000001b1 PC 0f32		  1282          ADDQD   4,R6            ;    DTRM.OUTLM:=DTRM.OUTLM+7
				  1283  ;ORIGINAL DISPLAY SOURCE LINE SET 
000001b3 PC dcd281aa		  1284          MOVQB   PRNTAC,PROCESS  ;  CPU REGISTER SET
000001b7 PC 5cd081ab		  1285          MOVQB   0,ALONFLG
000001bb PC 0292e8		  1286  RMV2A:  BSR     MSGENT          ; END (GOTO MESSAGE PRINT)
000001be PC a7d89789		  1287  RMV4:   ADDR    CXPRL,R2        ; IF USE_PC = RETURN FROM CXP THEN
000001c2 PC 8708		  1288          CMPD    R1,R2
000001c4 PC 1a2a		  1289          BNE     RMVEX:B         ; BEGIN
000001c6 PC 5cd081aa		  1290          MOVQB   FALSE, PROCESS  ;NO DEBUG WHEN DONE
000001ca PC ce83d680d42c08	  1291  RMV6:   MOVMD   OLDPC,SVPC,3    ;    SVPC:=OLDPC SVUS:=OLDUS SVIS:=OLDIS SVMOD
				  1292                          ; XXX 12
000001d1 PC 97a35445522002	  1293          MOVD    H'54455220,2(R6);    OUTB(DTRM.OUTLM):= " RET"
000001d8 PC ccd780f60c		  1294          ACBB    -1,CXPFLG,RMV5:B ;   CXPFLG:=CXPFLG-1; 
000001dd PC 97a3444e452002	  1295          MOVD    H'444E4520,2(R6);    IF CXPFLG=0 "B END" {END OF PROGRAM}
000001e4 PC 95db800c00		  1296  RMV5:   MOVW    MESG:W,0(R6)    ;    OUTB(DTRM.OUTLM):=CR LF B
000001e9 PC 0f33		  1297          ADDQD   6,R6            ;    DTRM.OUTLM:=DTRM.OUTLM+7
000001eb PC 0292b8		  1298          BSR     MSGENT          ; END  (GO TO PRINT MESSAGE )
000001ee PC 1200		  1299  RMVEX:  RET     0
				  1300  ;
				  1301  ;
				  1302  ;   B P T     ROUTINE
				  1303  ;
				  1304  ;
000001f0 PC 0d4220		  1305  MESG:   .BYTE   CR,"B"," "      ; BREAK POINT MESSAGE
				  1306  ;
				  1307  BPTRT: 
000001f3 PC 02beb1		  1311          BSR     MNENTR          ; MNENTR {SAVE USER STATUS & LOAD MONITOR }
000001f6 PC 02bf73		  1312          BSR     BRKRMV          ; BRKRMV {REMOVE BPT'S AND FIND ACTUAL BREAK}
000001f9 PC 5fd707		  1313  BPTER:  MOVQD   EBPT,ERRTYP     ; ELSE
000001fc PC eabe95		  1314          BR      ERROR2          ;    ERROR(EBPT)
				  1315  ;
				  1316  ;
				  1317  ;   T R A C E    T R A P    R O U T I N E
				  1318  ;
				  1319  ;
				  1320  TRCRT:
000001ff PC 970e10		  1325          MOVD    R1,SCRCH1       ; SAVE R1
00000202 PC ce58d080f4		  1326  TRCT1:  MOVZBD  STEPFLG,R1      ; R1:=STEP_FLAG
00000207 PC 7ce7d904		  1327  TRCCS:  CASEB   TRCCT:B[R1:B]   ; CASE OF STEP_FLAG
0000020b PC 0c			  1328  TRCCT:  .BYTE   TRCER-TRCCS     ;  NO MONITOR TRACE
0000020c PC 2c			  1329          .BYTE   TRCSTPN-TRCCS   ;  STEP  N
0000020d PC 49			  1330          .BYTE   TRCSTU-TRCCS    ;  STU
0000020e PC 49			  1331          .BYTE   TRCSTU-TRCCS    ;  STW
0000020f PC 12			  1332          .BYTE   TRCGO-TRCCS     ;  TRACE AFTER GO
00000210 PC 17			  1333          .BYTE   TRCGO2-TRCCS    ;  TRACE AFTER STN
00000211 PC 17			  1334          .BYTE   TRCGO2-TRCCS    ;  TRACE AFTER STU
00000212 PC 17			  1335          .BYTE   TRCGO2-TRCCS    ;  TRACE AFTER STW
00000213 PC 5cd007		  1339  TRCER:  MOVQB   ETRC,ERRTYP     ; 0 : ERROR_TYPE:=ETRC
00000216 PC eabe78		  1340          BR      ERROR1
				  1341  TRCGO:                          ; 1 : TRACE OF GO
00000219 PC 4e48a60106		  1342          CBITB   PSR_T,6(SP)     ;       PSR_T:=0
0000021e PC 94a4f280c200	  1343  TRCGO2: MOVB    BPTC,0(ACTBRK)  ;       M(PC):=BPTC (* BPT INSTRCTION
				  1344          ;      *** MOVSU ***
00000224 PC 0cd680f4		  1345          ADDQB   (-STBRK),STEPFLG ;      STEP_FLAG:=NO MONITOR TRACE
00000228 PC 1cd080f4		  1346          CMPQB   NOTRC,STEPFLG   ;       IF GO & STEP TRACE GOTO TRCT1
0000022c PC 1a56		  1347          BNE     TRCT1           ;       ELSE
0000022e PC 57d010		  1348  TRC2:   MOVD    SCRCH1,R1       ;          RELOAD R1
00000231 PC 4200		  1349          RETT    0               ;          RETURN TO USER
				  1350  TRCSTPN:                        ; 2 : TRACE STEP N
00000233 PC cfd780be7b		  1351          ACBD    -1,STPCNT,TRC2  ;       STEP_COUNT:=STEP_COUNT-1
				  1352                                  ;       IF STEP_COUNT>0
				  1353                                  ;       THEN RETURN TO USER
00000238 PC 02be69		  1354          BSR     MNENTRA         ;       ELSE MNENTR
0000023b PC 97a34352542002	  1355  TRC3:   MOVD    H'43525420,2(R6)    ;            OUTB:=" TRC"
				  1356  ;ORIGINAL DISPLAY SOURCE LINE SET 
00000242 PC dcd281aa		  1357          MOVQB   PRNTAC,PROCESS  ; PRINT ALL CPU REGS
00000246 PC 5cd081ab		  1358          MOVQB   0, ALONFLG
0000024a PC 02bf1f		  1359  TRC33:  BSR     BRKRMV          ;            REMOVE B.P. {EXIT TO COMMAND LOOP}
0000024d PC eabf97		  1360          BR      RMV5            ;            EXIT TO WRITE MESSAGE
00000250 PC 02be51		  1361  TRCSTU: BSR     MNENTRA         ; 3 : STU/STU
00000253 PC 5cb8		  1362          MOVQB   GETI,TOS        ;       MNENTR (* SAVE USER STATUS
00000255 PC ce98d080e7		  1363          MOVZBD  STUADD+3,R2     ;       GETPUT (GET,STUADD.TYPE,STUADD.NO)
0000025a PC d7d580e4		  1364          MOVD    STUADD,TOS
0000025e PC 5cc803		  1365          MOVQB   0,3(SP)
00000261 PC 02c0003b98		  1366          BSR     GETPUT          ;       (* FIND VARIABLE USING GET-PUT ROUTINE
00000266 PC 6bd080e8		  1367          ANDD    STUADD+4,R1     ;       VAR:=VAR AND MASK
0000026a PC ee43d080ec		  1368          CHECKD  R0,STUADD+8,R1  ;       F=VAR>=LIMIT.LOWER AND VAR<=LIMIT.UPPER
0000026f PC 1cd180f4		  1369          CMPQB   STU,STEPFLG
00000273 PC 8a07		  1370          BFS     TRC6:B          ;       IF NOT F THEN
00000275 PC 0a46		  1371          BEQ     TRC3            ;         IF STEPFLG=STU GOTO TRC3
				  1372  TRC5:  
00000277 PC 02be98		  1373  TRC55:  BSR     MNEXIT          ;         ELSE RETURN TO USER
0000027a PC 1a41		  1374  TRC6:   BNE     TRC3            ;       ELSE IF STEPFLG<>STU GOTO TRC3
0000027c PC ea7b		  1375          BR      TRC5            ;               ELSE RETURN TO USER
				  1385  ;
				  1386  ;
				  1387  ;  N M I     R O U T I N E
				  1388  ;
				  1389  ;
				  1390  ;
				  1391  NMIRT:  
0000027e PC 5cd005		  1395          MOVQB   FALSE,NOTECHO   ;CANCEL NO ECHO
00000281 PC 94a6f807		  1396          MOVB    ENMI,ERRTYP     ; 
00000285 PC 1cd004		  1397          CMPQB   MONT,MON_USR    ; IF MTIME TIME ERROR(NMI)
				  1398                                  ;BNE     ERROR
00000288 PC 0abe09		  1399          BEQ     ERROR2
0000028b PC dcd080f5		  1400          MOVQB   1,ACKFLG        ; ELSE RESET NMI
0000028f PC 02be15		  1401          BSR     MNENTR          ; {ACKFLG:=1} RETURN USER STATUS
00000292 PC 02bed7		  1402          BSR     BRKRMV          ; BRKRMV {BREAK REMOVE ROUTINE}
00000295 PC 0290ef		  1403          BSR     MAINLP          ;
				  1404  ;
				  1405  ;  A B O R T   R O U T I N E
				  1406  ;
				  1407  ;
				  1408  ABTRT: 
00000298 PC dcd007		  1412          MOVQB    EXTR, ERRTYP
0000029b PC b4a60208		  1413          TBITB   CNFMMU, CONFIG  ;IF NO MMU THEN UNKNOWN ABORT CONDITION
0000029f PC 9abdf2		  1414          BFC     ERROR2  
000002a2 PC 1e0fd5805c		  1415          SMR     MSR, SVMSR      ;SAVE MSR
000002a7 PC 5cd207		  1416          MOVQB   EABT, ERRTYP
000002aa PC b7a600000000805c	  1417          TBITD   0, SVMSR        ;IF NOT ADDR TRANSLATION ERROR
000002b2 PC 8abddf		  1418          BFS     ERROR2          
000002b5 PC 5cd107		  1419          MOVQB   EBPR, ERRTYP    ;THEN IF NOT MMU BREAKPOINT
000002b8 PC b7a600000002805c	  1420          TBITD   2, SVMSR
000002c0 PC 8abdd1		  1421          BFS     ERROR2          ;THEN NON SEQ MMU TRACE TRAP
000002c3 PC dcd107		  1422          MOVQB   ENST, ERRTYP
000002c6 PC eabdcb		  1423          BR      ERROR2                  
				  1424
				  1425  ;
				  1426  ;
				  1427  ; E R R O R S    &   T R A P S
				  1428  ;
				  1429  ;
				  1430
				  1431  INSRT:
000002c9 PC eabdc8		  1435          BR      ERROR2
				  1436
000002cc PC dcd407		  1437  NVIRT:  MOVQB   ENVI,ERRTYP
000002cf PC eabdc2		  1451          BR      ERROR2
				  1452
000002d2 PC 5cd507		  1453  FPURT:  MOVQB   EFPU,ERRTYP
000002d5 PC eabdbc		  1457          BR      ERROR2
				  1458
000002d8 PC dcd707		  1459  ILLRT:  MOVQB   EILL,ERRTYP
000002db PC eabdb6		  1463          BR      ERROR2
				  1464
000002de PC dcd507		  1465  DVZRT:  MOVQB   EDVZ,ERRTYP
000002e1 PC eabdb0		  1469          BR      ERROR2
				  1470
000002e4 PC dcd607		  1471  FLGRT:  MOVQB   EFLG,ERRTYP
000002e7 PC eabdaa		  1475          BR      ERROR2
				  1476
000002ea PC 5cd607		  1477  UNDRT:  MOVQB   EUND,ERRTYP
000002ed PC eabda4		  1481          BR      ERROR2
				  1482  ;
				  1483  ; SVC   R O U T I N E S
				  1484  ;
				  1485  ;
				  1486
000002f0 PC 0300		  1487  RNG:    .BYTE 3, 0      ;USERAID RANGE CHECK
000002f2 PC 0703		  1488  SVCLM:  .BYTE   7,3     ;SVC LIMITS
				  1489
				  1490  SVCRT:  
000002f4 PC 94d60481ae		  1494          MOVB    MON_USR, LADDR          ;SAVE TIME FLAG
000002f9 PC 5cd004		  1495          MOVQB   MONT,MON_USR            ; FLAG PENNDING MODE:= TRUE
000002fc PC 6209		  1496          SAVE    [R0,R3]
000002fe PC 2ba0000000ff	  1497          ANDD    H'FF,R0                 ; LIMIT R0
00000304 PC ee00d86e		  1498          CHECKB  R0,SVCLM,R0
00000308 PC 9a09		  1499          BFC     SVCS:B                  ; IF SVC#> SVCLM ERROR
0000030a PC 94a60907		  1500  SVCER:  MOVB    ESVC,ERRTYP
0000030e PC eabd85		  1501          BR      ERROR3
00000311 PC 7defd804		  1502  SVCS:   CASEW   SVCTB:B[R0:W]           ; BRANCH TO SVC[R0]
00000315 PC 0e00		  1503  SVCTB:  .WORD   SVC3-SVCS
00000317 PC 2b00		  1504          .WORD   SVC4-SVCS
00000319 PC 3d00		  1505          .WORD   SVC5-SVCS
0000031b PC a500		  1506          .WORD   SVC6-SVCS
0000031d PC 1001		  1507          .WORD   SVC7-SVCS
				  1508  ;
				  1509  ENDINT:
				  1510  ;
				  1511  ;  S V C 3    R E A D N 
				  1512  ;
				  1513  ;
0000031f PC d515		  1514  SVC3:   MOVW    R2,TOS
00000321 PC d41d		  1515          MOVB    R3,TOS                  ; RDLIN(R2,R3,R1);
00000323 PC d70d		  1516          MOVD    R1,TOS
00000325 PC 02c0003807		  1517          BSR     RDLIN
0000032a PC ce99b8		  1518          MOVZWD  TOS,R2                  ; R2:= # OF READ CHAR
0000032d PC 7290		  1519  SVCEX:  RESTORE [R0,R3]
0000032f PC 94d681ae04		  1520          MOVB    LADDR, MON_USR          ;RESTORE FLAG
00000334 PC 8fc800		  1521          ADDQD   1,0(SP)                 ; {SKIP SVC INSTRUCTION. }
				  1522  ;       CMPQB   TRUE,PNDF               ; IF PENNDING INTERRUPT EXISTS
				  1523  ;       BR      SVCEX1:B                ;       BNE     SVCEX1:B THEN
				  1524  ;SVCEX2:        MOVB    EPND,ERRTYP             ; ERROR(PND)
				  1525  ;       BR      ERROR2                  ; ELSE
				  1526  SVCEX1:                                 ;IF SVC REQUEST CAME FROM OUTSIDE
				  1527                                          ;THEN IT WAS A MONT TIME CASE
00000337 PC 5cd005		  1528          MOVQB   FALSE,NOTECHO           ; FLAGE USER TIME
0000033a PC 4200		  1529          RETT    0
				  1530  ;
				  1531  ;
				  1532  ;  S V C 4   P R I N T N
				  1533  ;
				  1534  ;
0000033c PC d70d		  1535  SVC4:   MOVD    R1,TOS                  ; PRINTA (R1,R1+R2,R3)
0000033e PC 8308		  1536          ADDD    R1,R2
00000340 PC d715		  1537          MOVD    R2,TOS
00000342 PC d41d		  1538          MOVB    R3,TOS
00000344 PC d4a591		  1539          MOVB    0x91,TOS                ; migry - for alignment
00000347 PC 02c00038cb		  1540          BSR     PRINTA
0000034c PC ea61		  1541          BR      SVCEX
				  1542  ;
				  1543  ;
				  1544  ;  S V C 5   G E T _ N U M
				  1545  ;
				  1546  ;
				  1547  SVC5:   
				  1548                  ;GET_NUM
0000034e PC ce1821		  1549                  MOVZBD  R4, R4          ;GET CONVERSION CHOICE
00000351 PC ee20d9bf9f		  1550                  CHECKB  R4, RNG, R4     ;CHECK FOR LEGALITY
00000356 PC 8abfb4		  1551                  BFS     SVCER
00000359 PC 4eb310		  1552                  ABSD    R2, R2
0000035c PC 7defdc04		  1553          HERE:   CASEW   NUMS:B[R4:W]
00000360 PC 0c00		  1554          NUMS:   .WORD   A_S - HERE
00000362 PC 1200		  1555                  .WORD   A_L - HERE
00000364 PC 2b00		  1556                  .WORD   A_D - HERE
00000366 PC 3200		  1557                  .WORD   A_H - HERE
				  1558
00000368 PC 5fd081ea		  1559          A_S:    MOVQD   SHRT, TEMP1     ;SET RADIX TO SHORT FLOAT
0000036c PC ea06		  1560                  BR      FLOATIT:B
0000036e PC dfd081ea		  1561          A_L:    MOVQD   LNG, TEMP1      ;SET RADIX TO LONG FLOAT
00000372 PC d71d		  1562  FLOATIT:        MOVD    R3, TOS         ;ADDR OF RESULT
00000374 PC d70d		  1563                  MOVD    R1, TOS         ;PASS START OF ASC LINE
00000376 PC d715		  1564                  MOVD    R2, TOS         ;PASS LENGTH
00000378 PC e7d581ea		  1565                  ADDR    TEMP1, TOS      ;PASS LONG OR SHORT
0000037c PC e7d58313		  1566                  ADDR    ERROR, TOS      ;ERROR RET
00000380 PC 02c000454b		  1567                  BSR     ASC_2_RE
00000385 PC ea1e		  1568                  BR      EXx:B
				  1569
00000387 PC 94a602830b		  1570          A_D:    MOVB    DEC, BASE       ;INTEGER CONVERSIONS
0000038c PC ea07		  1571                  BR      NUMIT:B         ;DECIMAL
0000038e PC 94a603830b		  1572          A_H:    MOVB    HEX, BASE       ;HEX
00000393 PC d70d		  1573  NUMIT:          MOVD    R1, TOS         ;START OF ASC LINE
00000395 PC 8308		  1574                  ADDD    R1, R2          ;GET LENGTH
00000397 PC 0f17		  1575                  ADDQD   -2, R2          ;SKIP TO LAST CHAR(NOT CR)
00000399 PC d715		  1576                  MOVD    R2, TOS         ;END OF ASC LINE
0000039b PC 02c0003bf8		  1577                  BSR     A_NUM           ;CONVERT
000003a0 PC d7ba00		  1578                  MOVD    TOS, 0(R3)      ;STORE RESULT
000003a3 PC 5f20		  1579          EXx:    MOVQD   0, R4           ;NO ERROR
000003a5 PC 1fd08313		  1580                  CMPQD   FALSE, ERROR    ;CHECK FOR ERROR        
000003a9 PC 0a06		  1581                  BEQ     EX_IT:B         ;RETURN BOOLEAN IN R4
000003ab PC df20		  1582                  MOVQD   TRUE, R4
000003ad PC ea02		  1583                  BR      ERR_EX:B
				  1584  EX_IT:          
000003af PC 5fd08313		  1585  ERR_EX:         MOVQD   FALSE, ERROR    ;CLEAR GENERAL ERROR FLAG
000003b3 PC eabf7a		  1586                  BR      SVCEX           ;RETT
				  1587
				  1588  ;
				  1589  ;
				  1590  ;   S V C 6    P U T _ N U M
				  1591  ;
				  1592  ;
				  1593  SVC6:
				  1594                  ;PUT_NUM
000003b6 PC ce9810		  1595                  MOVZBD  R2, R2          ;GET RADIX AND CHECK FOR VALID RANGE
000003b9 PC ee90d8bf37		  1596                  CHECKB  R2, RNG, R2
000003be PC 8abf4c		  1597                  BFS     SVCER
000003c1 PC 7defda04		  1598          PHERE:  CASEW   ASCN:B[R2:W]
000003c5 PC 0c00		  1599          ASCN:   .WORD   S_A - PHERE
000003c7 PC 1200		  1600                  .WORD   L_A - PHERE
000003c9 PC 2b00		  1601                  .WORD   D_A - PHERE
000003cb PC 3200		  1602                  .WORD   H_A - PHERE
				  1603
000003cd PC 5fd081ea		  1604          S_A:    MOVQD   SHRT, TEMP1
000003d1 PC ea06		  1605                  BR      UNFLOATIT:B
000003d3 PC dfd081ea		  1606          L_A:    MOVQD   LNG, TEMP1
000003d7 PC e7d581f6		  1607  UNFLOATIT:      ADDR    ANUMBER, TOS
000003db PC e7d581ea		  1608                  ADDR    TEMP1, TOS
000003df PC d70d		  1609                  MOVD    R1, TOS
000003e1 PC 02c00047e0		  1610                  BSR     REAL_2_A
000003e6 PC 67d081f6		  1611                  ADDR    ANUMBER, R1 
000003ea PC ea20		  1612                  BR      EXP:B
				  1613
000003ec PC 94a602830b		  1614          D_A:    MOVB    DEC, BASE
000003f1 PC ea0b		  1615                  BR      UNNUMIT:B
000003f3 PC 94a603830b		  1616          H_A:    MOVB    HEX, BASE
000003f8 PC 5cd08312		  1617                  MOVQB   FALSE, LEADZERO
000003fc PC d74d00		  1618  UNNUMIT:        MOVD    0(R1), TOS
000003ff PC 02c0003c80		  1619                  BSR     N_TO_ASC
00000404 PC 57b8		  1620                  MOVD    TOS, R1         ;CLEAN STACK
00000406 PC 67d083e1		  1621                  ADDR    NUMCH, R1
				  1622          EXP:    
0000040a PC 9718		  1623                  MOVD    R3, R2
0000040c PC ce804a00000f	  1624                  MOVMB   0(R1), 0(R2), 16
00000412 PC ce804a10100f	  1625                  MOVMB   16(R1), 16(R2), 16
00000418 PC ce804a202002	  1626                  MOVMB   32(R1), 32(R2), 3
0000041e PC eabf0f		  1627                  BR      SVCEX
				  1628  ;
				  1629  ;
				  1630  ;   S V C 7   P R I N T E R   O U T P U T
				  1631  ;
				  1632  ;
				  1633  SVC7:   
				  1634          ;PINTER OUTPUT
00000421 PC d70d		  1635          MOVD    R1, TOS         ;START OF STRING
00000423 PC d715		  1636          MOVD    R2, TOS         ;LENGTH
00000425 PC 02c0004e4f		  1637          BSR     PRINTC
0000042a PC eabf03		  1638          BR      SVCEX
				  1639
				  1640  ;
				  1641  ;
				  1642  ;
				  1643
				  1644
				  1645  ;+++++++++++++
				  1647  ;+++++++++++++
				  1649  ;
				  1650  ;
				  1651  ;               A non-destructive place for pc & psr when exceptions
				  1652  ;               occur.  Not necessary to reserve PROM space but its
				  1653  ;               helpful for RAM debug of DCT16
				  1654  ;
0000042d PC 0000000000000000	  1655          .double 0,0
				  1656
				  1657  stack_top:
				  1658  sign_on:
00000435 PC 0d0a		  1659          .byte   CR,LF
00000437 PC 4443543136202d204442  1660          .byte   'DCT16 - DB16000A Diagnostics - ver. 1.01 - 01/03/84',0 
				  1661  pass_msg:
0000046b PC 0d0a444354313620636f  1662          .byte   CR,LF,'DCT16 complete - ALL TESTS PASSED',CR,LF,0
				  1663  fail_msg:
00000491 PC 0d0a2a2a2a2044435431  1664          .byte   CR,LF,'*** DCT16 FAIL ***',bell,CR,LF,0
				  1665  ;
				  1666  ;       fail flags and messages
				  1667  ;
				  1668  flag_base:      .equ    16      ;use upper word so lower holds fail code
				  1669  usart_rdy:      .equ    flag_base + 13
				  1670  any_fail:       .equ    flag_base + 14
				  1671  msg_present:    .equ    flag_base + 15
				  1672
				  1673  cpu_fail:       .equ    flag_base + 0
000004a9 PC 20435055206661696c75  1674   cpu_msg:       .byte   ' CPU failure',0
				  1675  prom_fail:      .equ    flag_base + 1
000004b6 PC 2050524f4d2043686563  1676   prom_msg:      .byte   ' PROM Checksum failed     ',0
				  1677  j2_pr_fail:     .equ    flag_base + 2
000004d1 PC 204a32205472616e736d  1678   j2_pr_msg:     .byte   ' J2 Transmitter failed    ',0
				  1679
				  1680  f_msg_size:     .equ    j2_pr_msg - prom_msg
				  1681
				  1682  j2_rd_fail:     .equ    flag_base + 3
000004ec PC 204a3220526563656976  1683   j2_rd_msg:     .byte   ' J2 Receiver failed       ',0
				  1684  j2_ll_fail:     .equ    flag_base + 4
00000507 PC 204a32204c6f63616c20  1685   j2_ll_msg:     .byte   ' J2 Local loop back failed',0
				  1686  j3_pr_fail:     .equ    flag_base + 5
00000522 PC 204a33205472616e736d  1687   j3_pr_msg:     .byte   ' J3 Transmitter failed    ',0
				  1688  j3_rd_fail:     .equ    flag_base + 6
0000053d PC 204a3320526563656976  1689   j3_rd_msg:     .byte   ' J3 Receiver failed       ',0
				  1690  j3_ll_fail:     .equ    flag_base + 7
00000558 PC 204a33204c6f63616c20  1691   j3_ll_msg:     .byte   ' J3 Local loop back failed',0
				  1692  om_fail:        .equ    flag_base + 8
00000573 PC 204f7574707574206d65  1693   om_msg:        .byte   ' Output message failed    ',0
				  1694  ;
				  1695  ;       NOTE: messages above must all be of same length
				  1696  ;
0000058e PC 2052414d206461746120  1697   rdt_msg:       .byte   ' RAM data test failure:           ',0
000005b1 PC 2052414d206164647265  1698   rat_msg:       .byte   ' RAM address test failure:',0
000005cc PC 2052414d205265667265  1699   rrt_msg:       .byte   ' RAM Refresh test failure',0
000005e6 PC 204d4d55207265676973  1700   mmur_msg:      .byte   ' MMU register failure: ',0
000005fe PC 204d4d55207472616365  1701   mmu_msg:       .byte   ' MMU trace test failure',0
00000616 PC 20465055207465737420  1702   fpu_msg:       .byte   ' FPU test failed',0
				  1703  pit_fail:       .equ    flag_base + 9
00000627 PC 20504954207465737420  1704   pit_msg:       .byte   ' PIT test failure: ',0
				  1705  ppi_fail:       .equ    flag_base + 10
0000063b PC 20505049207465737420  1706   ppi_msg:       .byte   ' PPI test failure: ',0
				  1707  icu_fail:       .equ    flag_base + 11
0000064f PC 204943552074696d6572  1708   icu_msg:       .byte   ' ICU timer failure: ',0
00000664 PC 2049435520696e746572  1709   icu_imsg:      .byte   ' ICU interrupt failure',0
				  1711  ;
				  1712  ;       Exception processing
				  1713  ;
				  1714  ;               Link table builds dispatch table
				  1715  ;
0000067b PC 4e5649004e4d49004142  1716  exc_tab:        .byte   'NVI',0,'NMI',0,'ABT',0,'FPU',0
0000068b PC 494c4c00535643004456  1717                  .byte   'ILL',0,'SVC',0,'DVZ',0,'FLG',0
0000069b PC 4250540054524300554e  1718                  .byte   'BPT',0,'TRC',0,'UND',0  
000006a7 PC 20657863657074696f6e  1719  exc_msg:        .byte   ' exception occured, ***DCT16 ABORTED***'
000006ce PC 2000		  1720  sp_msg:         .byte   ' ',0
				  1721  ;
				  1722  ;       No exceptions other than nvi should normally occur
				  1723  ;
000006d0 PC ea8b22		  1724  nvisvc: br      icu_int:w
000006d3 PC ce18a000		  1725  nvierr: movzbd  0,r0
000006d7 PC ea3c		  1726          br      excp_abt:b
000006d9 PC ce18a001		  1727  nmisvc: movzbd  1,r0
000006dd PC ea36		  1728          br      excp_abt:b
000006df PC ce18a002		  1729  abtsvc: movzbd  2,r0
000006e3 PC ea30		  1730          br      excp_abt:b
000006e5 PC ce18a003		  1731  fpusvc: movzbd  3,r0
000006e9 PC ea2a		  1732          br      excp_abt:b
000006eb PC ce18a004		  1733  illsvc: movzbd  4,r0
000006ef PC ea24		  1734          br      excp_abt:b
000006f1 PC ce18a005		  1735  svcsvc: movzbd  5,r0
000006f5 PC ea1e		  1736          br      excp_abt:b
000006f7 PC ce18a006		  1737  dvzsvc: movzbd  6,r0
000006fb PC ea18		  1738          br      excp_abt:b
000006fd PC ce18a007		  1739  flgsvc: movzbd  7,r0
00000701 PC ea12		  1740          br      excp_abt:b
00000703 PC ce18a008		  1741  bptsvc: movzbd  8,r0
00000707 PC ea0c		  1742          br      excp_abt:b
00000709 PC ce18a009		  1743  trcsvc: movzbd  9,r0
0000070d PC ea06		  1744          br      excp_abt:b
0000070f PC ce18a00a		  1745  undsvc: movzbd  10,r0
				  1746  ;
				  1747  excp_abt:
00000713 PC 4ed8a11e		  1748          sbitb   any_fail,r7
00000717 PC 5ca8c0c00034	  1749          movqb   on,@diag_fail
				  1750
0000071d PC 67d8bfb1		  1751          addr    sp_msg,r1
00000721 PC a7d905		  1752          addr    exc_1:b,r6
00000724 PC ea2c		  1753          br      fcemsg
				  1754  exc_1:
00000726 PC 67f0d8bf55		  1755          addr    exc_tab[r0:d],r1
0000072b PC a7d906		  1756          addr    exc_2:b,r6
0000072e PC ea8093		  1757          br      outmsg:w
				  1758  exc_2:
00000731 PC 67d8bf76		  1759          addr    exc_msg,r1
00000735 PC a7d98b88		  1760          addr    diag_end:w,r6
00000739 PC ea8088		  1761          br      outmsg
				  1762
				  1763  ;       .subtitle       "FCEMSG: Fail code + message routine"
				  1764  ;
				  1765  ;       Fail code + error message subroutine
				  1766  ;
				  1767  ;       input:  r6 = return address
				  1768  ;               r7 = fail code (low order word)
				  1769  ;               r1 = address of message, message terminated with zero byte
				  1770  ;
				  1771  ;       output: r2, r3 & r4 destroyed
				  1772  ;               all other (general) registers unchanged
				  1773  ;
0000073c PC 30313233343536373839  1774  ascii_tab:      .byte   '0123456789ABCDEF'
0000074c PC 0d0a0700		  1775  CRLFb:          .byte   CR,LF,bell,0
				  1776
				  1777  fcemsg: 
00000750 PC 6f0d		  1778          lprd    sb,r1                   ; save message address
00000752 PC 6f34		  1779          lprd    fp,r6                   ; save return address
				  1780
00000754 PC 67d878		  1781          addr    CRLFb,r1                ; Begin with CR, LF & BELL
00000757 PC a7d906		  1782          addr    fce_rtn:b,r6
0000075a PC ea8067		  1783          br      outmsg:w
				  1784  fce_rtn:
				  1785                                          ; now output fail code
0000075d PC d7a000c00000	  1786          movd    j2base,r3               ; r3 address of terminal 
				  1787  fce_loop:
00000763 PC 5c22		  1788          movqb   4,r4                    ; four digit code
				  1789  fce_nxt:
00000765 PC ce98a8c0c00030	  1790          movzbd  @SWITCHP,r2
0000076c PC a8a00f		  1791          andb    x'0f,r2
0000076f PC ce99e8dac00002b7	  1792          movzwd  wctb:d[r2:w],r2         ; migry; wait count
00000777 PC 4ec1a104		  1793          rotw    4,r7                    ; next digit to low order position
0000077b PC ce5838		  1794          movzbd  r7,r1
0000077e PC 68a00f		  1795          andb    x'0f,r1                 ; isolate lsd
				  1796  fce_pr_wait:
00000781 PC f4a20002		  1797          tbitb   tx_rdy,statp(r3)        ; if TX-RDY != 0
00000785 PC 8a05		  1798          bfs     fce_print_it:b
00000787 PC cf177a		  1799          acbd    -1,r2,fce_pr_wait
				  1800  fce_print_it:
0000078a PC d4e2d9bfb200	  1801          movb    ascii_tab[r1:b],DATAP(r3)
				  1802
00000790 PC cc2755		  1803          acbb    -1,r4,fce_nxt
				  1804
00000793 PC c7a000c00040	  1805          cmpd    j3base,r3               ; have we done both usarts?
00000799 PC d7a000c00040	  1806          movd    j3base,r3
0000079f PC 1a44		  1807          bne     fce_loop                        ; if not, do j3
				  1808
000007a1 PC 2f0d		  1809          sprd    sb,r1
000007a3 PC 2f34		  1810          sprd    fp,r6
000007a5 PC ea1c		  1811          br      outmsg:b
				  1812
				  1813  ;       .subtitle       "ERRMSG Error message with spaces for fail code"
				  1814  ;
				  1815  ;       error message subroutine (without fail code)
				  1816  ;
				  1817  ;       input:  r6 = return address
				  1818  ;               r1 = address of message, message terminated with zero byte
				  1819  ;
				  1820  ;       output: r2, r3 & r4 destroyed
				  1821  ;               all other (general) registers unchanged
				  1822  ;
000007a7 PC 0d0a072020202000	  1823  CRLFbspace:     .byte   CR,LF,bell,'    ',0
				  1824
				  1825  errmsg: 
000007af PC 6f0d		  1826          lprd    sb,r1                   ; save message address
000007b1 PC 6f34		  1827          lprd    fp,r6                   ; save return address
				  1828
000007b3 PC 67d874		  1829          addr    CRLFbspace,r1           ; Begin with CR, LF & BELL
000007b6 PC a7d905		  1830          addr    err_rtn:b,r6
000007b9 PC ea08		  1831          br      outmsg:b
				  1832  err_rtn:
				  1833
000007bb PC 2f0d		  1834          sprd    sb,r1                   ; restore original parameters
000007bd PC 2f34		  1835          sprd    fp,r6                   ; and output message
000007bf PC ea02		  1836          br      outmsg:b
				  1837
				  1838  ;       .subtitle       "OUTMSG  Ouput message to console(s) routine"
				  1839  ;
				  1840  ;       output message subroutine (with out using RAM)
				  1841  ;
				  1842  ;       input:  r6 = return address
				  1843  ;               r1 = address of message, message terminated with zero byte
				  1844  ;
				  1845  ;       output: r2, r3 & r4 destroyed
				  1846  ;               all other (general) registers unchanged
				  1847
				  1848  outmsg: 
000007c1 PC 4ed8a11f		  1849          sbitb   msg_present,r7
				  1850  s_outmsg:
000007c5 PC d7a000c00000	  1851          movd    j2base,r3               ; r3 address of terminal 
				  1852  om_loop:
000007cb PC 1709		  1853          movd    r1,r4
				  1854  om_nxt:
000007cd PC ce98a8c0c00030	  1855          movzbd  @SWITCHP,r2
000007d4 PC a8a00f		  1856          andb    x'0f,r2
000007d7 PC ce99e8dac000024f	  1857          movzwd  wctb:d[r2:w],r2         ; migry; wait count
				  1858  om_pr_wait:
000007df PC f4a20002		  1859          tbitb   tx_rdy,statp(r3)        ; if TX-RDY != 0
000007e3 PC 8a11		  1860          bfs     om_print_it:b
000007e5 PC cf177a		  1861          acbd    -1,r2,om_pr_wait
000007e8 PC 5ca8c0c00034	  1862          movqb   on,@diag_fail
000007ee PC 4ed8a118		  1863          sbitb   om_fail,r7
000007f2 PC ea0d		  1864          br      msg_error:b
				  1865  om_print_it:
000007f4 PC d4620000		  1866          movb    0(r4),DATAP(r3)
				  1867
000007f8 PC 8f20		  1868          addqd   1,r4                    ; inCRement message pointer
000007fa PC 1c6000		  1869          cmpqb   0,0(r4)                 ; at end of message?
000007fd PC 1a50		  1870          bne     om_nxt                  ; transmit next char    
				  1871
				  1872  msg_error:                              ; may still be able to send
				  1873                                          ; message to other port even
				  1874                                          ; first errored
				  1875
000007ff PC c7a000c00040	  1876          cmpd    j3base,r3               ; have we done both usarts?
00000805 PC d7a000c00040	  1877          movd    j3base,r3
0000080b PC 1a40		  1878          bne     om_loop                 ; if not, do j3
				  1879  om_done:
0000080d PC 7f7200		  1880          jump    0(r6)                   ; return from subroutine
				  1882  ;
				  1883  ;       output tick to console, including CR,LF if necessary
				  1884  ;
00000810 PC 0d0a		  1885  CRLF_tick:      .byte   CR,LF
00000812 PC 2b00		  1886  tick_only:      .byte   '+',0
				  1887
				  1888  tick:
00000814 PC 67d87c		  1889          addr    CRLF_tick,r1
00000817 PC 4ec8a11f		  1890          cbitb   msg_present,r7
0000081b PC 8abfaa		  1891          bfs     s_outmsg
0000081e PC 67d874		  1892          addr    tick_only,r1
00000821 PC eabfa4		  1893          br      s_outmsg
				  1894  ;       .subtitle       "DISP_BINARY: Binary data display on console(s)"
				  1895  ;
				  1896  ;       disp_binary     Subroutine to display on console(s) binary
				  1897  ;                       data
				  1898  ;       input:  r0 = data to be displayed, right justified
				  1899  ;               r1 = number of bits to display (1 <= r1 <= 32)
				  1900  ;               r6 = return address
				  1901  ;
				  1902  ;       output: r2, r3 & r4 are destroyed
				  1903  ;
				  1904  disp_binary:
00000824 PC 97a000c00000	  1905          movd    j2base,r2
				  1906  db_loop:
0000082a PC d708		  1907          movd    r1,r3
				  1908  db_nxbit:
0000082c PC 8c1f		  1909          addqb   -1,r3
0000082e PC ce18a9c0c00030	  1910          movzbd  @SWITCHP,r4
00000835 PC 28a10f		  1911          andb    x'0f,r4
00000838 PC ce19e9dcc00001ee	  1912          movzwd  wctb:d[r4:w],r4         ; migry add :d ;
				  1913  db_wait:
00000840 PC b4a20002		  1914          tbitb   tx_rdy,statp(r2)
00000844 PC 8a05		  1915          bfs     db_print:b
00000846 PC cf277a		  1916          acbd    -1,r4,db_wait
				  1917  db_print:
00000849 PC 3418		  1918          tbitb   r3,r0
0000084b PC 8ac000000e		  1919          bfs     db_1:d                  ; migry add :d ;
00000850 PC 94a23000		  1920  db_0:   movb    '0',DATAP(r2)
00000854 PC eac0000009		  1921          br      db_la:d                 ; migry add :d ;
00000859 PC 94a23100		  1922  db_1:   movb    '1',DATAP(r2)
				  1923  db_la:  
0000085d PC 1c18		  1924          cmpqb   0,r3
0000085f PC 1a4d		  1925          bne     db_nxbit
00000861 PC 87a000c00040	  1926          cmpd    j3base,r2
00000867 PC 97a000c00040	  1927          movd    j3base,r2
0000086d PC 1abfbd		  1928          bne     db_loop
				  1929  db_done:
00000870 PC 7f7200		  1930          jump    0(r6)
				  1931  ;       .subtitle       "DISP_HEX: Binary data display on console(s)"
				  1932  ;
				  1933  ;       disp_hex        Subroutine to display on console(s) hex data
				  1934  ;
				  1935  ;       input:  r0 = data to be displayed, right justified
				  1936  ;               r1 = number of digits to display (1 <= r1 <= 8)
				  1937  ;               r6 = return address
				  1938  ;
				  1939  ;       output: r2, r3, & r4 are destroyed
				  1940  ;
				  1941  disp_hex:
00000873 PC 97a000c00000	  1942          movd    j2base,r2
				  1943  dh_loop:
00000879 PC 4ee008		  1944          negb    r1,r3
0000087c PC c0a008		  1945          addb    8,r3
0000087f PC 1c18		  1946          cmpqb   0,r3
00000881 PC 0ac000000c		  1947          beq     dh_noadj:d              ; migry add :d ;
00000886 PC 4e03a004		  1948  dh_adj: rotd    4,r0
0000088a PC cc1f7c		  1949          acbb    -1,r3,dh_adj
				  1950  dh_noadj:
0000088d PC d408		  1951          movb    r1,r3
				  1952  dh_nxdig:
0000088f PC 4e03a004		  1953          rotd    4,r0
00000893 PC ce18a9c0c00030	  1954          movzbd  @SWITCHP,r4
0000089a PC 28a10f		  1955          andb    x'0f,r4
0000089d PC ce19e9dcc0000189	  1956          movzwd  wctb:d[r4:w],r4         ; migry add :d ;
				  1957  dh_wait:
000008a5 PC b4a20002		  1958          tbitb   tx_rdy,statp(r2)
000008a9 PC 8a05		  1959          bfs     dh_print:b
000008ab PC cf277a		  1960          acbd    -1,r4,dh_wait
				  1961  dh_print:
000008ae PC ce1801		  1962          movzbd  r0,r4
000008b1 PC 28a10f		  1963          andb    x'0f,r4
000008b4 PC 94e2dcbe8800	  1964          movb    ascii_tab[r4:b],DATAP(r2)
000008ba PC cc1f55		  1965          acbb    -1,r3,dh_nxdig
000008bd PC 87a000c00040	  1966          cmpd    j3base,r2
000008c3 PC 97a000c00040	  1967          movd    j3base,r2
000008c9 PC 1abfb0		  1968          bne     dh_loop
				  1969  dh_done:
000008cc PC 7f7200		  1970          jump    0(r6)
				  1971
				  1973  ;
				  1974  ;       extingquish all three LEDs
				  1975  ;
000008cf PC dca8c0c00036	  1976  dct16:  movqb   off,@ds1
000008d5 PC dca8c0c00034	  1977          movqb   off,@ds2
000008db PC dca8c0c00032	  1978          movqb   off,@ds3
				  1979  ;
				  1980  ;       turn on diagnostic run LED
				  1981  ;
000008e1 PC 5ca8c0c00036	  1982          movqb   on,@diag_run
000008e7 PC 5ca8c0c00038	  1983          movqb   0,@diag_mode
000008ed PC dca8c0c00038	  1984          movqb   1,@diag_mode
				  1986  ;
				  1987  ;       CPU Test
				  1988  ;       write & read all program accessable registers
				  1989  ;
				  1990  cpu_bgn:
				  1991  ;
				  1992  ;               first verify integrity of r7 (in trouble if it's bad!)
				  1993  ;
000008f3 PC df3f		  1994          movqd   -1,r7
000008f5 PC 9f3f		  1995          cmpqd   -1,r7
000008f7 PC 5f38		  1996          movqd   0,r7
000008f9 PC 1a80b0		  1997          bne     cpu_error:w                     ;0000
000008fc PC 5f38		  1998          movqd   0,r7
000008fe PC 1f38		  1999          cmpqd   0,r7
00000900 PC d7a1000000ff	  2000          movd    x'ff,r7                         ;00FF
00000906 PC 1a80a3		  2001          bne     cpu_error:w
				  2002
00000909 PC 5d38		  2003          movqw   0,r7    
0000090b PC df07		  2004          movqd   -1,r0
0000090d PC 9f07		  2005          cmpqd   -1,r0
0000090f PC 8c38		  2006          addqb   1,r7
00000911 PC 1a8098		  2007          bne     cpu_error:w                     ;0000/0011
00000914 PC 5f00		  2008          movqd   0,r0
00000916 PC 1f00		  2009          cmpqd   0,r0
00000918 PC 8c38		  2010          addqb   1,r7
0000091a PC 1a808f		  2011          bne     cpu_error:w                     ;0002/0012
				  2012  cpu_tag1:
0000091d PC 5700		  2013          movd    r0,r1
0000091f PC 4700		  2014          cmpd    r0,r1
00000921 PC 8c38		  2015          addqb   1,r7
00000923 PC 1a8086		  2016          bne     cpu_error:w                     ;0003/0013
00000926 PC 9700		  2017          movd    r0,r2
00000928 PC 8700		  2018          cmpd    r0,r2
0000092a PC 8c38		  2019          addqb   1,r7
0000092c PC 1a807d		  2020          bne     cpu_error:w                     ;0004/0014
0000092f PC d700		  2021          movd    r0,r3
00000931 PC c700		  2022          cmpd    r0,r3
00000933 PC 8c38		  2023          addqb   1,r7
00000935 PC 1a8074		  2024          bne     cpu_error:w                     ;0005/0015
00000938 PC 1701		  2025          movd    r0,r4
0000093a PC 0701		  2026          cmpd    r0,r4
0000093c PC 8c38		  2027          addqb   1,r7
0000093e PC 1a806b		  2028          bne     cpu_error:w                     ;0006/0016
00000941 PC 5701		  2029          movd    r0,r5
00000943 PC 4701		  2030          cmpd    r0,r5
00000945 PC 8c38		  2031          addqb   1,r7
00000947 PC 1a8062		  2032          bne     cpu_error:w                     ;0007/0017
0000094a PC 9701		  2033          movd    r0,r6
0000094c PC 8701		  2034          cmpd    r0,r6
0000094e PC 8c38		  2035          addqb   1,r7
00000950 PC 1a8059		  2036          bne     cpu_error:w                     ;0008/0018
00000953 PC 9f07		  2037          cmpqd   -1,r0
00000955 PC 0a09		  2038          beq     cpu_tag2:b
00000957 PC df07		  2039          movqd   -1,r0
00000959 PC d4a110		  2040          movb    x'10,r7
0000095c PC ea41		  2041          br      cpu_tag1
				  2042  cpu_tag2:
				  2043  ;
				  2044  ;       CPU Test continued
				  2045  ;       check out all processor registers
				  2046  ;       (we enter this test with r0 set to -1
				  2047  ;
0000095e PC 2ba000ffffff	  2048          andd    h'ffffff,r0     ;only 24 bits for next tests
00000964 PC d4a120		  2049          movb    x'20,r7
				  2050  cpu_tag3:
00000967 PC 6f04		  2051          lprd    fp,r0
00000969 PC 2f0c		  2052          sprd    fp,r1
0000096b PC 4700		  2053          cmpd    r0,r1
0000096d PC 8c38		  2054          addqb   1,r7
0000096f PC 1a3a		  2055          bne     cpu_error:b                     ;0021/0031
00000971 PC af34		  2056          sprd    sp,r6           ;save sp
00000973 PC ef04		  2057          lprd    sp,r0
00000975 PC af0c		  2058          sprd    sp,r1
00000977 PC 4700		  2059          cmpd    r0,r1
00000979 PC ef34		  2060          lprd    sp,r6           ;restore sp
0000097b PC 8c38		  2061          addqb   1,r7
0000097d PC 1a2c		  2062          bne     cpu_error:b                     ;0022/0032
0000097f PC 6f05		  2063          lprd    sb,r0
00000981 PC 2f0d		  2064          sprd    sb,r1
00000983 PC 4700		  2065          cmpd    r0,r1
00000985 PC 8c38		  2066          addqb   1,r7
00000987 PC 1a22		  2067          bne     cpu_error:b                     ;0023/0033
00000989 PC 2f37		  2068          sprd    intbase,r6      ;save intbase
0000098b PC 6f07		  2069          lprd    intbase,r0
0000098d PC 2f0f		  2070          sprd    intbase,r1
0000098f PC 4700		  2071          cmpd    r0,r1
00000991 PC 6f37		  2072          lprd    intbase,r6      ;restore intbase
00000993 PC 8c38		  2073          addqb   1,r7
00000995 PC 1a14		  2074          bne     cpu_error:b                     ;0024/0034
00000997 PC ed07		  2075          lprw    mod,r0
00000999 PC ad0f		  2076          sprw    mod,r1
0000099b PC 4500		  2077          cmpw    r0,r1
0000099d PC 8c38		  2078          addqb   1,r7
0000099f PC 1a0a		  2079          bne     cpu_error:b                     ;0025/0035
000009a1 PC 1f00		  2080          cmpqd   0,r0
000009a3 PC 0a10		  2081          beq     cpu_tag4:b
000009a5 PC 5f00		  2082          movqd   0,r0
000009a7 PC ea40		  2083          br      cpu_tag3
				  2084  cpu_error:
				  2085
000009a9 PC 4ed8a110		  2086          sbitb   cpu_fail,r7     ;flag cpu failure
000009ad PC 5ca8c0c00034	  2087          movqb   on,@diag_fail   ;indicate failure
				  2088  cpu_tag4:
000009b3 PC 6d3c		  2089          lprw    fp,r7           ;save fail code if fp
				  2090  ;       .subtitle       "01XX Configuration and exception setup"
000009b5 PC d5a10100		  2091          movw    x'0100,r7
				  2092  ;
				  2093  ;       set exception environment
				  2094  ;
000009b9 PC eda60000		  2095          lprw    psr,0                   ;system / interrupt stack
000009bd PC 27d8ba78		  2096          addr    stack_top,r0
000009c1 PC ef04		  2097          lprd    sp,r0
000009c3 PC 27d8c000573d	  2098          addr    INTTAB,r0
000009c9 PC 03a00000002c	  2099          ADDD    4*11,R0
000009cf PC 6f07		  2100          lprd    intbase,r0
				  2101  ;
				  2102  ;       set configuration register
				  2103  ;
000009d1 PC ce58a004		  2104          movzbd  fpu_bit,r1
000009d5 PC 2e0ba8c0c0003002	  2105          extd    r1,@SWITCHP,r0,2
000009dd PC 7ce7d8c0000007	  2106  c_base: caseb   c_table:d[r0:b]         ; migry add :d ;
				  2107  c_table:
000009e4 PC 0b			  2108          .byte   c_11 - c_base
000009e5 PC 13			  2109          .byte   c_10 - c_base
000009e6 PC 1b			  2110          .byte   c_01 - c_base
000009e7 PC 23			  2111          .byte   c_00 - c_base
				  2112
000009e8 PC 0e0b03		  2113  c_11:   setcfg  [m,f]
000009eb PC eac0000018		  2114          br      c_done:d                ; migry add :d ;
000009f0 PC 0e0b02		  2115  c_10:   setcfg  [m]
000009f3 PC eac0000010		  2116          br      c_done:d                ; migry add :d ;
000009f8 PC 0e0b01		  2117  c_01:   setcfg  [f]
000009fb PC eac0000008		  2118          br      c_done:d                ; migry add :d ;
00000a00 PC 0e0b00		  2119  c_00:   setcfg  []
				  2120  c_done:
				  2121
				  2123  ;
				  2124  ;       PROM TEST
				  2125  ;         simple word check sum of prom area
				  2126  ;
				  2127  ;       NOTE:   No fail code used but assigned for consistency
				  2128  ;
				  2129  ;
				  2130  ;
				  2131  ;prom_bgn:
				  2132  ;       movqw   0,r0
				  2133  ;       movw    code_length,r1
				  2134  ;       addr    code_base,r2
				  2135  ;prom_loop:
				  2136  ;       addw    0(r2),r0
				  2137  ;       addqd   2,r2
				  2138  ;       acbw    -2,r1,prom_loop
				  2139  ;       cmpqw   0,r0
				  2140  ;       beq     prom_end:b
				  2141  ;       sbitb   prom_fail,r7
				  2142  ;       movqb   on,@diag_fail
				  2143  ;prom_end:
				  2144  ;       lprw    sb,r0           ;save checksum in sb register
				  2146  ;
				  2147  ;       Set up ICU (if it exists) for baud clock
				  2148  ;
				  2149  ;       icu baud table
				  2150  ;
00000a03 PC ea8043		  2151          br      icu_init:w
00000a06 PC 0200050007000b00	  2152  icutbx: .word   2,5,7,11
00000a0e PC 0f0017001c001f00	  2153          .word   15,23,28,31
00000a16 PC 2f005f00bf007f01	  2154          .word   47,95,191,383
00000a1e PC ad010b02ff027f04	  2155          .word   429,523,767,1151
				  2156  ;
				  2157  ;       wait count table
				  2158  ;
00000a26 PC 5b015b01cf01b602	  2159  wctb:   .word   347,347,463,694
00000a2e PC 9e036d0583063c07	  2160          .word   926,1389,1667,1852
00000a36 PC da0ab415672bce56	  2161          .word   2778,5556,11111,22222
00000a3e PC 2c615f769cade8fd	  2162          .word   24876,30303,44444,65000
				  2163
				  2164  icu_init:
00000a46 PC 57a100fffe00	  2165          movd    icu,r5
00000a4c PC 54a31020		  2166          movb    clkm+bus8,mctl(r5)
				  2167
00000a50 PC 5c682c		  2168          movqb   0,cctl(r5)
				  2169
00000a53 PC ce58a8c0c00030	  2170          movzbd  @SWITCHP,r1
00000a5a PC 68a00f		  2171          andb    h'0f,r1
00000a5d PC 54ebd9bfa930	  2172          movb    icutbx:w[r1:w],lcsvl(r5)
00000a63 PC 54ebd9bfa432	  2173          movb    icutbx+1:w[r1:w],lcsvh(r5)
00000a69 PC 54ebd9bf9d38	  2174          movb    icutbx:w[r1:w],lccvl(r5)
00000a6f PC 54ebd9bf983a	  2175          movb    icutbx+1:w[r1:w],lccvh(r5)
				  2176
00000a75 PC 54a3542c		  2177          movb    x'54,cctl(r5)
				  2178  ;
				  2179  ;       init usart j2 & j3 usarts
				  2180  ;
				  2181  ;
				  2182  ;       usart initialization sequence
				  2183  ;
00000a79 PC ea08		  2184          br      init_usart:b
00000a7b PC 000000404e37	  2185  termi:  .byte   0,0,0,x'40,x'4e,x'37
				  2186
				  2187  init_usart:
00000a81 PC 5f0d		  2188          movqd   -6,r1
00000a83 PC 54e5d97ec0c00002	  2189  iulp:   movb    termi+6[r1:b],@j2stat
00000a8b PC 54e5d976c0c00042	  2190          movb    termi+6[r1:b],@j3stat
00000a93 PC cc0870		  2191          acbb    1,r1,iulp
				  2192
00000a96 PC 4ed8a11d		  2193          sbitb   usart_rdy,r7            ;flag for exception error exit
				  2194  ;       .subtitle       "03XX J2 & J3 USART Sign-on and loop back tests"
				  2195  ;
				  2196  ;       set local loop back mode and send & receive a message
				  2197  ;       The message sent is the sign on message and is sent to both 
				  2198  ;       j2 & j3
				  2199  ;
				  2200  ;       NOTE:   Fail codes not used but assigned for consistency
				  2201  ;
				  2202  ll_bgn:
00000a9a PC 57a000c00000	  2203          movd    j2base,r1               ; r1 address of terminal A
				  2204  ll_loop:
00000aa0 PC e7d8b995		  2205          addr    sign_on,r3
				  2206  pr_bgn:
00000aa4 PC ce98a8c0c00030	  2207          movzbd  @SWITCHP,r2
00000aab PC a8a00f		  2208          andb    x'0f,r2
00000aae PC ce99e8dabf78	  2209          movzwd  wctb[r2:w],r2
				  2210  pr_wait:
00000ab4 PC 74a20002		  2211          tbitb   tx_rdy,statp(r1)        ; if TX-RDY != 0
00000ab8 PC 8a1f		  2212          bfs     print_it:b
00000aba PC cf177a		  2213          acbd    -1,r2,pr_wait
00000abd PC 5ca8c0c00034	  2214          movqb   on,@diag_fail
00000ac3 PC ce18a012		  2215          movzbd  j2_pr_fail,r0
00000ac7 PC 47a000c00000	  2216          cmpd    j2base,r1
00000acd PC 0a04		  2217          beq     not_j3:b
00000acf PC 8c01		  2218          addqb   3,r0
				  2219  not_j3:
00000ad1 PC 4ed801		  2220          sbitb   r0,r7   
00000ad4 PC ea805e		  2221          br      usart_error:w
				  2222
				  2223  print_it:
00000ad7 PC 545a0000		  2224          movb    0(r3),DATAP(r1)
00000adb PC ce98a8c0c00030	  2225          movzbd  @SWITCHP,r2
00000ae2 PC a8a00f		  2226          andb    x'0f,r2
00000ae5 PC ce99e8dabf41	  2227          movzwd  wctb[r2:w],r2
				  2228  ;    Now to read the char just transmitted
				  2229  rd_wait:
00000aeb PC 74a20102		  2230          tbitb   rx_rdy,statp(r1)        ; if RX_RDY != 0
00000aef PC 8a1e		  2231          bfs     read_it:b
00000af1 PC cf177a		  2232          acbd    -1,r2,rd_wait
00000af4 PC 5ca8c0c00034	  2233          movqb   on,@diag_fail
00000afa PC ce18a013		  2234          movzbd  j2_rd_fail,r0
00000afe PC 47a000c00000	  2235          cmpd    j2base,r1
00000b04 PC 0a04		  2236          beq     not_j3a:b
00000b06 PC 8c01		  2237          addqb   3,r0
				  2238  not_j3a:
00000b08 PC 4ed801		  2239          sbitb   r0,r7   
00000b0b PC ea1f		  2240          br      next_chr:b              ; continue in loop even if read wrong
				  2241
				  2242  read_it:
00000b0d PC c44a0000		  2243          cmpb    DATAP(r1),0(r3)         ; was char written same read?
00000b11 PC 0a19		  2244          beq     read_ok:b
00000b13 PC 5ca8c0c00034	  2245          movqb   on,@diag_fail
00000b19 PC ce18a014		  2246          movzbd  j2_ll_fail,r0
00000b1d PC 47a000c00000	  2247          cmpd    j2base,r1
00000b23 PC 0a04		  2248          beq     not_j3b:b
00000b25 PC 8c01		  2249          addqb   3,r0
				  2250  not_j3b:
00000b27 PC 4ed801		  2251          sbitb   r0,r7   
				  2252  read_ok:
				  2253  next_chr:
00000b2a PC 8f18		  2254          addqd   1,r3            ; inCRement message pointer
00000b2c PC 1c5800		  2255          cmpqb   0,0(r3)         ; at end of message?
00000b2f PC 1abf75		  2256          bne     pr_bgn          ; transmit next char    
				  2257  usart_error:
00000b32 PC 47a000c00040	  2258          cmpd    j3base,r1       ; have we done both usarts?
00000b38 PC 57a000c00040	  2259          movd    j3base,r1
00000b3e PC 1abf62		  2260          bne     ll_loop         ; if not, do j3
				  2261  ll_te_done:
00000b41 PC 4ed8a11f		  2262          sbitb   msg_present,r7  ; flag for 'tick's
				  2263  ;       .subtitle       "Output accumulated error messages"
				  2264  ;
				  2265  ;       now output all the errors we may have accumulated before usart rdy
				  2266  ;
				  2267  oe_bgn:
00000b45 PC 2d2d		  2268          sprw    sb,r5                   ;get prom check sum / save in r5
				  2269  ;
				  2270  ;               first the CPU separately since it can have valid fail code
				  2271  ;
00000b47 PC a7d912		  2272          addr    ocpu_rtn:b,r6
00000b4a PC f4a110		  2273          tbitb   cpu_fail,r7
00000b4d PC 9abcc7		  2274          bfc     tick                    ;tick if it passed
00000b50 PC 2d3c		  2275          sprw    fp,r7                   ;Fail code saved in fp
00000b52 PC 67d8b957		  2276          addr    cpu_msg,r1
00000b56 PC eabbfa		  2277          br      fcemsg
				  2278  ocpu_rtn:
				  2279  ;
				  2280  ;               next the PROM so we can display checksum
				  2281  ;
00000b59 PC f4a111		  2282          tbitb   prom_fail,r7
00000b5c PC a7d906		  2283          addr    oprom_rtn:b,r6
00000b5f PC eabcb5		  2284          BR      tick
				  2285  ;       bfc     tick                    ;tick if it passed
				  2286  ;       movw    x'02ff,r7               ;Fail code saved in fp
				  2287  ;       addr    prom_msg,r1
				  2288  ;       addr    op1:b,r6
				  2289  ;       br      fcemsg
				  2290  ;op1:
				  2291  ;       movw    r5,r0                   ;get checksum
				  2292  ;       movb    4,r1
				  2293  ;       addr    oprom_rtn:b,r6
				  2294  ;       br      disp_hex
				  2295  oprom_rtn:
				  2296  ;
				  2297  ;               now the rest that could have occured to this point
				  2298  ;
00000b62 PC d5a103ff		  2299          movw    x'03ff,r7
00000b66 PC 67d9b96b		  2300          addr    j2_pr_msg,r5            ;point to first message
00000b6a PC ce18a012		  2301          movzbd  j2_pr_fail,r0           ;bit pointer
00000b6e PC a7d90d		  2302          addr    oe_rtn:b,r6
				  2303
				  2304  oe_loop:        
00000b71 PC 5728		  2305          movd    r5,r1
00000b73 PC f401		  2306          tbitb   r0,r7
00000b75 PC 8abc3a		  2307          bfs     errmsg                  ;error message if bit set
00000b78 PC eabc9c		  2308          br      tick                    ;tick if not
00000b7b PC 43a10000001b	  2309  oe_rtn: addd    f_msg_size,r5
00000b81 PC 8c00		  2310          addqb   1,r0
00000b83 PC 040518		  2311          cmpb    r0,om_fail
00000b86 PC 7a6b		  2312          ble     oe_loop
				  2314  ;
				  2315  ;       non destructive Ram Data Test (look for a bad chip or data line)
				  2316  ;
				  2317  rdt_bgn:
00000b88 PC d5a10400		  2318          movw    x'400,r7
00000b8c PC 17a100010000	  2319          movd    ram_start,r4                            ;address pointer
00000b92 PC d7a000017ff8	  2320          movd    (ram_end - ram_start + 1) & ~ 3,r3      ;byte count
00000b98 PC 5f28		  2321          movqd   0,r5                                    ;fail accumulator
				  2322  rdt_loop:
00000b9a PC 176000		  2323          movd    0(r4),r0                ;get current contents
00000b9d PC 4e7700		  2324          comd    r0,r1                   ;complement it
00000ba0 PC 170b00		  2325          movd    r1,0(r4)                ;store complement
00000ba3 PC 7b6000		  2326          xord    0(r4),r1                ;check complement
00000ba6 PC 170300		  2327          movd    r0,0(r4)                ;store true
00000ba9 PC 3b6000		  2328          xord    0(r4),r0                ;test true
00000bac PC 1b08		  2329          ord     r1,r0                   ;or two results
00000bae PC 5b01		  2330          ord     r0,r5                   ;combine with overall
00000bb0 PC 0f22		  2331          addqd   4,r4
00000bb2 PC 4f1e68		  2332          acbd    -4,r3,rdt_loop
				  2333
00000bb5 PC 1f28		  2334          cmpqd   0,r5
00000bb7 PC 0a28		  2335          beq     rdt_pass:b
00000bb9 PC 5ca8c0c00034	  2336          movqb   on,@diag_fail
00000bbf PC 4ed8a11e		  2337          sbitb   any_fail,r7
00000bc3 PC 67d8b9cb		  2338          addr    rdt_msg,r1
00000bc7 PC a7d906		  2339          addr    rdf_dsp:b,r6
00000bca PC eabb86		  2340          br      fcemsg
				  2341  rdf_dsp:
00000bcd PC 1728		  2342          movd    r5,r0
00000bcf PC 4e03a010		  2343          rotd    16,r0
00000bd3 PC 1b28		  2344          ord     r5,r0
00000bd5 PC ce58a010		  2345          movzbd  16,r1
00000bd9 PC a7d90c		  2346          addr    rdt_done:b,r6
00000bdc PC eabc48		  2347          br      disp_binary
				  2348
				  2349  rdt_pass:
00000bdf PC a7d906		  2350          addr    rdt_done:b,r6
00000be2 PC eabc32		  2351          br      tick
				  2352
				  2353  rdt_done:
				  2355  ;
				  2356  ;       Non-destructive Ram Address Test (look for bad address line)
				  2357  ;
				  2358  ;               r0:     first address save data
				  2359  ;               r1:     second address save data
				  2360  ;               r2:     first address
				  2361  ;               r3:     second address
				  2362  ;               r4:     address bit number (ordinal)
				  2363  ;               r5:     error field
				  2364  ;               r6:     true test data pattern
				  2365  ;
				  2366  rat_bgn:
00000be5 PC d5a10500		  2367          movw    x'500,r7
00000be9 PC 5f28		  2368          movqd   0,r5                                    ;fail accumulator
00000beb PC 95a15746		  2369          movw    tru_pat,r6
00000bef PC df20		  2370          movqd   1,r4
				  2371  rat_loop:
00000bf1 PC 97a000010000	  2372          movd    ram_start,r2
00000bf7 PC b420		  2373          tbitb   r4,r2
00000bf9 PC 9ac000000c		  2374          bfc     rat_ns:d                ; migry add :d ;
00000bfe PC 1720		  2375          movd    r4,r0
00000c00 PC 8c00		  2376          addqb   1,r0
00000c02 PC 4e9800		  2377          sbitb   r0,r2
00000c05 PC d710		  2378  rat_ns: movd    r2,r3
00000c07 PC 4ef820		  2379          ibitb   r4,r3
00000c0a PC 071500027ff7	  2380          cmpd    r2,ram_end
00000c10 PC 6ac000003f		  2381          bgt     rat_exit:d              ; migry add :d ;exit_if first address beyond ram_end
00000c15 PC 071d00027ff7	  2382          cmpd    r3,ram_end
00000c1b PC 6ac0000034		  2383          bgt     rat_exit:d              ; migry add :d ;exit_if second address beyond ram_end
				  2384
00000c20 PC 155000		  2385          movw    0(r2),r0                ;get current RAM contents
00000c23 PC 555800		  2386          movw    0(r3),r1
				  2387
00000c26 PC 953200		  2388          movw    r6,0(r2)                ;write to first
00000c29 PC 4ef53200		  2389          comw    r6,0(r3)                ;complement to second
00000c2d PC 853200		  2390          cmpw    r6,0(r2)                ;check integrity of first
00000c30 PC 0a05		  2391          beq     rat_1ok:b
00000c32 PC 4e5821		  2392          sbitb   r4,r5
				  2393  rat_1ok:
00000c35 PC d53200		  2394          movw    r6,0(r3)                ;write to second
00000c38 PC 4eb53200		  2395          comw    r6,0(r2)                ;complement to first
00000c3c PC c53200		  2396          cmpw    r6,0(r3)                ;check integrity of second
00000c3f PC 0a05		  2397          beq     rat_2ok:b
00000c41 PC 4e5821		  2398          sbitb   r4,r5
				  2399  rat_2ok:
00000c44 PC 950200		  2400          movw    r0,0(r2)                ;restore original data
00000c47 PC d50a00		  2401          movw    r1,0(r3)
00000c4a PC 8c20		  2402          addqb   1,r4
00000c4c PC eabfa5		  2403          br      rat_loop                ;end_loop
				  2404
				  2405  rat_exit:
00000c4f PC 1f28		  2406          cmpqd   0,r5
00000c51 PC 0a22		  2407          beq     rat_pass:b
00000c53 PC 5ca8c0c00034	  2408          movqb   on,@diag_fail
00000c59 PC 4ed8a11e		  2409          sbitb   any_fail,r7
00000c5d PC 67d8b954		  2410          addr    rat_msg,r1
00000c61 PC a7d906		  2411          addr    raf_dsp:b,r6
00000c64 PC eabaec		  2412          br      fcemsg
				  2413  raf_dsp:
00000c67 PC 1728		  2414          movd    r5,r0
00000c69 PC ce58a018		  2415          movzbd  24,r1
00000c6d PC a7d90c		  2416          addr    rat_done:b,r6
00000c70 PC eabbb4		  2417          br      disp_binary
				  2418
				  2419  rat_pass:
00000c73 PC a7d906		  2420          addr    rat_done:b,r6
00000c76 PC eabb9e		  2421          br      tick
				  2422  rat_done:
				  2424  ;
				  2425  ;       Non-destructive Ram Refresh Test
				  2426  ;
				  2427  rrt_bgn:
00000c79 PC d5a10600		  2428          movw    x'600,r7
00000c7d PC 97a100010000	  2429          movd    ram_start,r6            ;save ram data in r0..r5 & initialize
00000c83 PC 17a100005746	  2430          movd    tru_pat,r4
00000c89 PC 4e7721		  2431          comd    r4,r5
				  2432
00000c8c PC 157000		  2433          movw    0(r6),r0
00000c8f PC 4e03a010		  2434          rotd    16,r0
00000c93 PC 952300		  2435          movw    r4,0(r6)
00000c96 PC 4e98a108		  2436          sbitb   lor + 0,r6
00000c9a PC 157000		  2437          movw    0(r6),r0
00000c9d PC 952b00		  2438          movw    r5,0(r6)
				  2439
00000ca0 PC 4e98a109		  2440          sbitb   lor + 1,r6
00000ca4 PC 557000		  2441          movw    0(r6),r1
00000ca7 PC 4e43a010		  2442          rotd    16,r1
00000cab PC 952300		  2443          movw    r4,0(r6)
00000cae PC 4e98a10a		  2444          sbitb   lor + 2,r6
00000cb2 PC 557000		  2445          movw    0(r6),r1
00000cb5 PC 952b00		  2446          movw    r5,0(r6)
				  2447
00000cb8 PC 4e98a10b		  2448          sbitb   lor + 3,r6
00000cbc PC 957000		  2449          movw    0(r6),r2
00000cbf PC 4e83a010		  2450          rotd    16,r2
00000cc3 PC 952300		  2451          movw    r4,0(r6)
00000cc6 PC 4e98a10c		  2452          sbitb   lor + 4,r6
00000cca PC 957000		  2453          movw    0(r6),r2
00000ccd PC 952b00		  2454          movw    r5,0(r6)
				  2455
00000cd0 PC 4e98a10d		  2456          sbitb   lor + 5,r6
00000cd4 PC d57000		  2457          movw    0(r6),r3
00000cd7 PC 4ec3a010		  2458          rotd    16,r3
00000cdb PC 952300		  2459          movw    r4,0(r6)
00000cde PC 4e98a10e		  2460          sbitb   lor + 6,r6
00000ce2 PC d57000		  2461          movw    0(r6),r3
00000ce5 PC 952b00		  2462          movw    r5,0(r6)
				  2463
00000ce8 PC 97a10007a120	  2464          movd    cpms * ms_wait,r6               ;delay for wait time
				  2465  rrt_wait:
00000cee PC cf3700		  2466          acbd    -1,r6,rrt_wait
				  2467
00000cf1 PC 97a100010000	  2468          movd    ram_start,r6                    ;now check and restore RAM
				  2469
00000cf7 PC 852300		  2470          cmpw    r4,0(r6)
00000cfa PC 0a06		  2471          beq     rrt7:b
00000cfc PC 4ed8a107		  2472          sbitb   7,r7
00000d00 PC 4e03a010		  2473  rrt7:   rotd    16,r0
00000d04 PC 950300		  2474          movw    r0,0(r6)
00000d07 PC 4e98a108		  2475          sbitb   lor + 0,r6
00000d0b PC 852b00		  2476          cmpw    r5,0(r6)
00000d0e PC 0a06		  2477          beq     rrt0:b
00000d10 PC 4ed8a100		  2478          sbitb   0,r7
00000d14 PC 4e03a010		  2479  rrt0:   rotd    16,r0
00000d18 PC 950300		  2480          movw    r0,0(r6)
				  2481
00000d1b PC 4e98a109		  2482          sbitb   lor + 1,r6
00000d1f PC 852300		  2483          cmpw    r4,0(r6)
00000d22 PC 0a06		  2484          beq     rrt1:b
00000d24 PC 4ed8a101		  2485          sbitb   1,r7
00000d28 PC 4e43a010		  2486  rrt1:   rotd    16,r1
00000d2c PC 950b00		  2487          movw    r1,0(r6)
00000d2f PC 4e98a10a		  2488          sbitb   lor + 2,r6
00000d33 PC 852b00		  2489          cmpw    r5,0(r6)
00000d36 PC 0a06		  2490          beq     rrt2:b
00000d38 PC 4ed8a102		  2491          sbitb   2,r7
00000d3c PC 4e43a010		  2492  rrt2:   rotd    16,r1
00000d40 PC 950b00		  2493          movw    r1,0(r6)
				  2494
00000d43 PC 4e98a10b		  2495          sbitb   lor + 3,r6
00000d47 PC 852300		  2496          cmpw    r4,0(r6)
00000d4a PC 0a06		  2497          beq     rrt3:b
00000d4c PC 4ed8a103		  2498          sbitb   3,r7
00000d50 PC 4e83a010		  2499  rrt3:   rotd    16,r2
00000d54 PC 951300		  2500          movw    r2,0(r6)
00000d57 PC 4e98a10c		  2501          sbitb   lor + 4,r6
00000d5b PC 852b00		  2502          cmpw    r5,0(r6)
00000d5e PC 0a06		  2503          beq     rrt4:b
00000d60 PC 4ed8a104		  2504          sbitb   4,r7
00000d64 PC 951300		  2505  rrt4:   movw    r2,0(r6)
				  2506
00000d67 PC 4e98a10d		  2507          sbitb   lor + 5,r6
00000d6b PC 852300		  2508          cmpw    r4,0(r6)
00000d6e PC 0a06		  2509          beq     rrt5:b
00000d70 PC 4ed8a105		  2510          sbitb   5,r7
00000d74 PC 4ec3a010		  2511  rrt5:   rotd    16,r3
00000d78 PC 951b00		  2512          movw    r3,0(r6)
00000d7b PC 4e98a10e		  2513          sbitb   lor + 6,r6
00000d7f PC 852b00		  2514          cmpw    r5,0(r6)
00000d82 PC 0a06		  2515          beq     rrt6:b
00000d84 PC 4ed8a106		  2516          sbitb   6,r7
00000d88 PC 4ec3a010		  2517  rrt6:   rotd    16,r3
00000d8c PC 951b00		  2518          movw    r3,0(r6)
				  2519
00000d8f PC 1c38		  2520          cmpqb   0,r7
00000d91 PC 1a08		  2521          bne     rrt_error:b
00000d93 PC a7d91a		  2522          addr    rrt_done:b,r6
00000d96 PC eaba7e		  2523          br      tick
				  2524
				  2525  rrt_error:
00000d99 PC 5ca8c0c00034	  2526          movqb   on,@diag_fail
00000d9f PC 4ed8a11e		  2527          sbitb   any_fail,r7
00000da3 PC 67d8b829		  2528          addr    rrt_msg,r1
00000da7 PC a7d906		  2529          addr    rrt_done:b,r6
00000daa PC eab9a6		  2530          br      fcemsg
				  2531  rrt_done:
				  2533  ;
				  2534  ;       mmu test (if present)
				  2535  ;
				  2536  ;       checks only for proper operation of registers as memory cannot
				  2537  ;       be counted on
				  2538  ;
				  2539  ;
				  2540
				  2541  mmu_bgn:
00000dad PC d5a10700		  2542          movw    x'700,r7
00000db1 PC 74a505c0c00030	  2543          tbitb   mmu_bit,@SWITCHP
00000db8 PC 8a8167		  2544          bfs     no_mmu:w
				  2545
00000dbb PC 5f00		  2546          movqd   0,r0
				  2547
00000dbd PC 8c38		  2548          addqb   1,r7                    ;start with step 1
				  2549
				  2550                                          ;test page table registers
				  2551                                          ;non-destructively
00000dbf PC 57a080fffc00	  2552          movd    ptbr_mask,r1
				  2553
00000dc5 PC 1e0f0e		  2554          smr     ptb0,r1
00000dc8 PC 1e0b06		  2555          lmr     ptb0,r0
00000dcb PC 1e0f1e		  2556          smr     ptb0,r3
00000dce PC fb00		  2557          xord    r0,r3
00000dd0 PC eb08		  2558          andd    r1,r3
00000dd2 PC 1f18		  2559          cmpqd   0,r3
00000dd4 PC 1e0b0e		  2560          lmr     ptb0,r1
00000dd7 PC 1a80d0		  2561          bne     mmur_error:w            ;0701
00000dda PC 8c38		  2562          addqb   1,r7
00000ddc PC 1e0b0e		  2563          lmr     ptb0,r1
00000ddf PC 1e0f1e		  2564          smr     ptb0,r3
00000de2 PC fb08		  2565          xord    r1,r3
00000de4 PC eb08		  2566          andd    r1,r3
00000de6 PC 1e0b16		  2567          lmr     ptb0,r2
00000de9 PC 1f18		  2568          cmpqd   0,r3
00000deb PC 1a80bc		  2569          bne     mmur_error:w            ;0702
00000dee PC 8c38		  2570          addqb   1,r7
				  2571
00000df0 PC 1e8f16		  2572          smr     ptb1,r2
00000df3 PC 1e8b06		  2573          lmr     ptb1,r0
00000df6 PC 1e8f1e		  2574          smr     ptb1,r3
00000df9 PC fb00		  2575          xord    r0,r3
00000dfb PC eb08		  2576          andd    r1,r3
00000dfd PC 1e8b16		  2577          lmr     ptb1,r2
00000e00 PC 1f18		  2578          cmpqd   0,r3
00000e02 PC 1a80a5		  2579          bne     mmur_error:w            ;0703
00000e05 PC 8c38		  2580          addqb   1,r7
00000e07 PC 1e8b0e		  2581          lmr     ptb1,r1
00000e0a PC 1e8f1e		  2582          smr     ptb1,r3
00000e0d PC fb08		  2583          xord    r1,r3
00000e0f PC eb08		  2584          andd    r1,r3
00000e11 PC 1e8b16		  2585          lmr     ptb1,r2
00000e14 PC 1f18		  2586          cmpqd   0,r3
00000e16 PC 1a8091		  2587          bne     mmur_error:w            ;0704
00000e19 PC 8c38		  2588          addqb   1,r7
				  2589
00000e1b PC 57a000ffffff	  2590          movd    bpr_mask,r1
				  2591                                          ;check bpr0
00000e21 PC 1e0f10		  2592          smr     bpr0,r2
00000e24 PC 1e0b00		  2593          lmr     bpr0,r0
00000e27 PC 1e0f18		  2594          smr     bpr0,r3
00000e2a PC fb00		  2595          xord    r0,r3
00000e2c PC eb08		  2596          andd    r1,r3
00000e2e PC 1e0b10		  2597          lmr     bpr0,r2
00000e31 PC 1f18		  2598          cmpqd   0,r3
00000e33 PC 1a8074		  2599          bne     mmur_error:w            ;0705
00000e36 PC 8c38		  2600          addqb   1,r7
00000e38 PC 1e0b08		  2601          lmr     bpr0,r1
00000e3b PC 1e0f18		  2602          smr     bpr0,r3
00000e3e PC fb08		  2603          xord    r1,r3
00000e40 PC eb08		  2604          andd    r1,r3
00000e42 PC 1f18		  2605          cmpqd   0,r3
00000e44 PC 1a8063		  2606          bne     mmur_error:w            ;0706
00000e47 PC 8c38		  2607          addqb   1,r7
00000e49 PC 1e0b10		  2608          lmr     bpr0,r2
				  2609
				  2610
00000e4c PC 1e8f10		  2611          smr     bpr1,r2                 ;check bpr1
00000e4f PC 1e8b00		  2612          lmr     bpr1,r0
00000e52 PC 1e8f18		  2613          smr     bpr1,r3
00000e55 PC fb00		  2614          xord    r0,r3
00000e57 PC eb08		  2615          andd    r1,r3
00000e59 PC 1e8b10		  2616          lmr     bpr1,r2
00000e5c PC 1f18		  2617          cmpqd   0,r3
00000e5e PC 1a8049		  2618          bne     mmur_error:w            ;0707
00000e61 PC 8c38		  2619          addqb   1,r7
00000e63 PC 1e8b08		  2620          lmr     bpr1,r1
00000e66 PC 1e8f18		  2621          smr     bpr1,r3
00000e69 PC fb08		  2622          xord    r1,r3
00000e6b PC eb08		  2623          andd    r1,r3
00000e6d PC 1e8b10		  2624          lmr     bpr1,r2
00000e70 PC 1f18		  2625          cmpqd   0,r3
00000e72 PC 1a35		  2626          bne     mmur_error:b            ;0708
00000e74 PC 8c38		  2627          addqb   1,r7
				  2628
00000e76 PC 57a000ffffff	  2629          movd    bcnt_mask,r1
				  2630
00000e7c PC 1e8f15		  2631          smr     bcnt,r2                 ;check bcnt
00000e7f PC 1e8b05		  2632          lmr     bcnt,r0
00000e82 PC 1e8f1d		  2633          smr     bcnt,r3
00000e85 PC fb00		  2634          xord    r0,r3
00000e87 PC eb08		  2635          andd    r1,r3
00000e89 PC 1e8b15		  2636          lmr     bcnt,r2
00000e8c PC 1f18		  2637          cmpqd   0,r3
00000e8e PC 1a19		  2638          bne     mmur_error:b            ;0709
00000e90 PC 8c38		  2639          addqb   1,r7
00000e92 PC 1e8b0d		  2640          lmr     bcnt,r1
00000e95 PC 1e8f1d		  2641          smr     bcnt,r3
00000e98 PC fb08		  2642          xord    r1,r3
00000e9a PC eb08		  2643          andd    r1,r3
00000e9c PC 1e8b15		  2644          lmr     bcnt,r2
00000e9f PC 1f18		  2645          cmpqd   0,r3
00000ea1 PC 1a06		  2646          bne     mmur_error:b            ;070A
00000ea3 PC 8c38		  2647          addqb   1,r7
				  2648
00000ea5 PC ea23		  2649          br      mmur_ok:b
				  2650
				  2651  mmur_error:                             ;mmu register error has occured
00000ea7 PC 1718		  2652          movd    r3,r0                   ;save the error field in r0
00000ea9 PC 5ca8c0c00034	  2653          movqb   on,@diag_fail
00000eaf PC 4ed8a11e		  2654          sbitb   any_fail,r7
00000eb3 PC 67d8b733		  2655          addr    mmur_msg,r1
00000eb7 PC a7d906		  2656          addr    mmur_rtn:b,r6
00000eba PC eab896		  2657          br      fcemsg
				  2658  mmur_rtn:
00000ebd PC ce58a008		  2659          movzbd  8,r1                    ;32 bits of significance
00000ec1 PC a7d98078		  2660          addr    mmu_done:w,r6
00000ec5 PC eab9ae		  2661          br      disp_hex
				  2662
				  2663  mmur_ok:                                ;tick
00000ec8 PC a7d906		  2664          addr    mmurt:b,r6
00000ecb PC eab949		  2665          br      tick
				  2666  mmurt:                                  ;now try some tracing
00000ece PC d4a111		  2667          movb    x'11,r7                 ;start step at x'11
00000ed1 PC 1e0f35		  2668          smr     msr,r6                  ;save msr and set ft
00000ed4 PC 4e98a117		  2669          sbitb   msr_ft,r6
00000ed8 PC 4e88a118		  2670          cbitb   msr_ut,r6
00000edc PC 1e0b35		  2671          lmr     msr,r6
				  2672
00000edf PC 1e0b02		  2673          lmr     pf0,r0
00000ee2 PC ea03		  2674          br      extra:b
00000ee4 PC a2			  2675          nop
				  2676  extra:
00000ee5 PC ea02		  2677          br      pf1_addr:b
				  2678  pf1_addr:
00000ee7 PC 9731		  2679          movd    r6,r6
00000ee9 PC 1700		  2680          movd    r0,r0
00000eeb PC ea02		  2681          br      pf0_addr:b
				  2682  pf0_addr:
00000eed PC 1e0f02		  2683          smr     pf0,r0                  ;check the last nsf
00000ef0 PC 67d87d		  2684          addr    pf0_addr,r1
				  2685
00000ef3 PC 4e88a117		  2686          cbitb   msr_ft,r6               ;turn off trace
00000ef7 PC 1e0b35		  2687          lmr     msr,r6
				  2688
00000efa PC 4700		  2689          cmpd    r0,r1
00000efc PC 1a29		  2690          bne     mmu_error:b             ;0711 error if pf0 not correct
00000efe PC 8c38		  2691          addqb   1,r7
				  2692
00000f00 PC 1e8f02		  2693          smr     pf1,r0
00000f03 PC 67d864		  2694          addr    pf1_addr,r1
00000f06 PC 4700		  2695          cmpd    r0,r1
00000f08 PC 1a1d		  2696          bne     mmu_error:b             ;0712
00000f0a PC 8c38		  2697          addqb   1,r7
				  2698
00000f0c PC 1e0f04		  2699          smr     sc,r0
00000f0f PC 3ba000030004	  2700          xord    x'00030004,r0           ;asynchonism cause sc0 to be imprecise
00000f15 PC 2ba0fffffff0	  2701          andd    x'fffffff0,r0
00000f1b PC 1f00		  2702          cmpqd   0,r0
00000f1d PC 1a08		  2703          bne     mmu_error:b             ;0713
				  2704
				  2705  no_mmu:                                 ;Want tick even if test not done
00000f1f PC a7d91a		  2706          addr    mmu_done:b,r6           ;tick
00000f22 PC eab8f2		  2707          br      tick
				  2708
				  2709  mmu_error:
00000f25 PC 5ca8c0c00034	  2710          movqb   on,@diag_fail
00000f2b PC 4ed8a11e		  2711          sbitb   any_fail,r7
00000f2f PC 67d8b6cf		  2712          addr    mmu_msg,r1
00000f33 PC a7d906		  2713          addr    mmu_done:b,r6
00000f36 PC eab81a		  2714          br      fcemsg
				  2715
				  2716  mmu_done:
				  2718  ;
				  2719  ;       FPU test (if available)
				  2720  ;
				  2721  fpu_bgn:
00000f39 PC d5a10800		  2722          movw    x'800,r7
00000f3d PC 74a504c0c00030	  2723          tbitb   fpu_bit,@SWITCHP
00000f44 PC 8a8098		  2724          bfs     no_fpu:w
				  2725
00000f47 PC be05a08554ad2e	  2726          movf    -1.0e-35,f0
00000f4e PC be4500		  2727          movf    f0,f1
00000f51 PC be8508		  2728          movf    f1,f2
00000f54 PC bec510		  2729          movf    f2,f3
00000f57 PC be0519		  2730          movf    f3,f4
00000f5a PC be4521		  2731          movf    f4,f5
00000f5d PC be8529		  2732          movf    f5,f6
00000f60 PC bec531		  2733          movf    f6,f7
00000f63 PC bec9a18554ad2e	  2734          cmpf    -1.0e-35,f7
00000f6a PC 8c38		  2735          addqb   1,r7
00000f6c PC 1a8076		  2736          bne     fpu_error:w             ;0801
				  2737
00000f6f PC be05a040000000	  2738          movf    2.0,f0
00000f76 PC be4500		  2739          movf    f0,f1
00000f79 PC be8508		  2740          movf    f1,f2
00000f7c PC bec510		  2741          movf    f2,f3
00000f7f PC be0519		  2742          movf    f3,f4
00000f82 PC be4521		  2743          movf    f4,f5
00000f85 PC be8529		  2744          movf    f5,f6
00000f88 PC bec531		  2745          movf    f6,f7
00000f8b PC bec9a140000000	  2746          cmpf    2.0,f7
00000f92 PC 8c38		  2747          addqb   1,r7
00000f94 PC 1a804e		  2748          bne     fpu_error:w             ;0802
				  2749
00000f97 PC 3e04a064		  2750          movbf   100,f0
00000f9b PC be7100		  2751          mulf    f0,f1
00000f9e PC beb108		  2752          mulf    f1,f2
00000fa1 PC bef110		  2753          mulf    f2,f3
00000fa4 PC be3119		  2754          mulf    f3,f4
00000fa7 PC be7121		  2755          mulf    f4,f5
00000faa PC beb129		  2756          mulf    f5,f6
00000fad PC bef131		  2757          mulf    f6,f7
				  2758
00000fb0 PC be4100		  2759          addf    f0,f1
00000fb3 PC be8108		  2760          addf    f1,f2
00000fb6 PC bec110		  2761          addf    f2,f3
00000fb9 PC be0119		  2762          addf    f3,f4
00000fbc PC be4121		  2763          addf    f4,f5
00000fbf PC be8129		  2764          addf    f5,f6
00000fc2 PC bec131		  2765          addf    f6,f7
				  2766
00000fc5 PC bef139		  2767          mulf    f7,f7
00000fc8 PC bee1a1447a0000	  2768          divf    1000.0,f7
				  2769
00000fcf PC 3e2f38		  2770          truncfd f7,r0
00000fd2 PC 07a00009ec0a	  2771          cmpd    650250,r0
00000fd8 PC 8c38		  2772          addqb   1,r7                    ;0803
00000fda PC 1a08		  2773          bne     fpu_error:b
				  2774
				  2775  no_fpu:
00000fdc PC a7d91a		  2776          addr    fpu_done:b,r6           ;tick
00000fdf PC eab835		  2777          br      tick
				  2778
				  2779  fpu_error:
00000fe2 PC 5ca8c0c00034	  2780          movqb   on,@diag_fail
00000fe8 PC 4ed8a11e		  2781          sbitb   any_fail,r7
00000fec PC 67d8b62a		  2782          addr    fpu_msg,r1
00000ff0 PC a7d906		  2783          addr    fpu_done:b,r6
00000ff3 PC eab75d		  2784          br      fcemsg
				  2785  fpu_done:
				  2786
				  2787  pit_bgn:
00000ff6 PC ea17		  2788          br      pit_s:b
00000ff8 PC 34			  2789  pit_m_cmd:      .byte   pit_sc0 + pit_rlboth + pit_rate_gen + pit_binary
00000ff9 PC 74			  2790                  .byte   pit_sc1 + pit_rlboth + pit_rate_gen + pit_binary
00000ffa PC b4			  2791                  .byte   pit_sc2 + pit_rlboth + pit_rate_gen + pit_binary
00000ffb PC 04			  2792  pit_l_cmd:      .byte   pit_sc0 + pit_latch  + pit_rate_gen + pit_binary
00000ffc PC 44			  2793                  .byte   pit_sc1 + pit_latch  + pit_rate_gen + pit_binary
00000ffd PC 84			  2794                  .byte   pit_sc2 + pit_latch  + pit_rate_gen + pit_binary
00000ffe PC 36			  2795  pit_s_cmd:      .byte   pit_sc0 + pit_rlboth + pit_square   + pit_binary
00000fff PC 76			  2796                  .byte   pit_sc1 + pit_rlboth + pit_square   + pit_binary
00001000 PC b6			  2797                  .byte   pit_sc2 + pit_rlboth + pit_square   + pit_binary
00001001 PC f40188138813	  2798  pit_min:        .word    500, 5000, 5000
00001007 PC 881350c350c3	  2799  pit_max:        .word   5000,50000,50000
				  2800  pit_s:
0000100d PC d5a10900		  2801          movw    x'900,r7
00001011 PC 57a100c00050	  2802          movd    pit_base,r5             ;pit io_pointer
00001017 PC 0c28		  2803          addqb   pit_c0,r5               ;start with 0
				  2804  pit_loop:
				  2805  ;
				  2806  ;               set up for rate gen with max count
				  2807  ;
00001019 PC 1729		  2808          movd    r5,r4
0000101b PC 23a100c00050	  2809          subd    pit_base + pit_c0,r4
00001021 PC 4e07a1ff		  2810          ashd    -1,r4                   ;compute counter number
				  2811
00001025 PC 54e5dc53c0c00056	  2812          movb    pit_m_cmd[r4:b],@pit_mode       ;set up to load count
				  2813
0000102d PC 17a0000009c4	  2814          movd    cpms * 5,r0             ;prepare for 5 millisecond wait loop
00001033 PC 5c6800		  2815          movqb   0,0(r5)                 ;set max count
00001036 PC 5c6800		  2816          movqb   0,0(r5)
				  2817  pit_w0:
00001039 PC cf0700		  2818          acbd    -1,r0,pit_w0            ;wait for 5 ms. (10 Mhz)
				  2819
0000103c PC 54e5dcbfbfc0c00056	  2820          movb    pit_l_cmd[r4:b],@pit_mode       ;latch the count
				  2821
00001045 PC 54e5dcbfb3c0c00056	  2822          movb    pit_m_cmd[r4:b],@pit_mode       ;setup to read both bytes
				  2823
0000104e PC 146800		  2824          movb    0(r5),r0
00001051 PC ce98a008		  2825          movzbd  8,r2                    ;read the counter to r0
00001055 PC ae10680008		  2826          insb    r2,0(r5),r0,8
0000105a PC 4e2100		  2827          negw    r0,r0                   ;get positive number of cycles
				  2828
0000105d PC 8c38		  2829          addqb   1,r7
0000105f PC 4507dcbfa2		  2830          cmpw    r0,pit_min[r4:w]        ;0901/0911/0921
00001064 PC aa0b		  2831          blo     pit_err:b
				  2832
00001066 PC 8c38		  2833          addqb   1,r7
00001068 PC 4507dcbf9f		  2834          cmpw    r0,pit_max[r4:w]
0000106d PC 5a18		  2835          bls     pit_nxt:b
				  2836  pit_err:
0000106f PC 67d8b5b8		  2837          addr    pit_msg,r1
00001073 PC a7d90a		  2838          addr    pit_u:b,r6              ;0902/0912/0922
00001076 PC 4ed8a119		  2839          sbitb   pit_fail,r7
0000107a PC eab6d6		  2840          br      fcemsg
0000107d PC a7d908		  2841  pit_u:  addr    pit_nxt:b,r6
00001080 PC 5c0a		  2842          movqb   4,r1
00001082 PC eab7f1		  2843          br      disp_hex
				  2844
				  2845  pit_nxt:
00001085 PC c0a110		  2846          addb    x'10,r7
00001088 PC e8a1f0		  2847          andb    x'f0,r7
0000108b PC 0c29		  2848          addqb   pit_c2 - pit_c1,r5
0000108d PC 072d00c00054	  2849          cmpd    r5,pit_base + pit_c2
00001093 PC 7abf86		  2850          ble     pit_loop
				  2851  ;
				  2852  ;       set up timers as square wave to aid debug
				  2853  ;
				  2854  ;       TMR0:   100 hertz
				  2855  ;       TMR1:   1   Khz.
				  2856  ;       TMR2:   1   Khz.
				  2857  ;                       NOTE:   Above frequencies are based on factory
				  2858  ;                               shipping configuration
				  2859  ;
00001096 PC 57a100c00050	  2860          movd    pit_base,r5
				  2861
0000109c PC 54dbbf6206		  2862          movb    pit_s_cmd+0,pit_moff(r5)
000010a1 PC 54dbbf5e06		  2863          movb    pit_s_cmd+1,pit_moff(r5)
000010a6 PC 54dbbf5a06		  2864          movb    pit_s_cmd+2,pit_moff(r5)
				  2865
000010ab PC 0c28		  2866          addqb   pit_c0,r5
				  2867  pit_2loop:
000010ad PC 54a3cd00		  2868          movb    1229 & x'ff,0(r5)
000010b1 PC 54a30400		  2869          movb    1229 / 256,0(r5)
000010b5 PC 0c29		  2870          addqb   pit_c2-pit_c1,r5
000010b7 PC 47a100c00054	  2871          cmpd    pit_base + pit_c2,r5
000010bd PC da70		  2872          bge     pit_2loop
				  2873
000010bf PC f4a119		  2874          tbitb   pit_fail,r7
000010c2 PC 8a08		  2875          bfs     pit_error:b
000010c4 PC a7d90c		  2876          addr    pit_done:b,r6
000010c7 PC eab74d		  2877          br      tick
				  2878
				  2879  pit_error:
000010ca PC 5ca8c0c00034	  2880          movqb   on,@diag_fail
				  2881
				  2882  pit_done:
				  2883
				  2884
				  2885  ;
				  2886  ;       Programmable Peripheral Interface (PPI) test
				  2887  ;
				  2888  ppi_base:       .equ    io_base + x'020 ;Programmable peripheral interface
				  2889  ppi_pa:         .equ    0
				  2890  ppi_pb:         .equ    2
				  2891  ppi_pc:         .equ    4
				  2892  ppi_ctl:        .equ    6
				  2893  ppi_inp_mode:   .equ    x'9b
				  2894  ppi_out_mode:   .equ    x'80
				  2895
				  2896  ppi_bgn:
000010d0 PC d5a10a00		  2897          movw    x'0a00,r7
000010d4 PC 74a506c0c00030	  2898          tbitb   test_ppi,@SWITCHP       ;If switch on, don't test ppi
000010db PC 8ac0000069		  2899          bfs     no_ppi:d                ; migry add :d ;
				  2900
000010e0 PC 57a100c00020	  2901          movd    ppi_base,r5
000010e6 PC 54a38006		  2902          movb    ppi_out_mode,ppi_ctl(r5);Output mode
				  2903
000010ea PC 0c28		  2904          addqb   ppi_pa,r5               ;start on port a
				  2905
				  2906  ppi_loop:
000010ec PC 14a055		  2907          movb    byte_pat,r0
000010ef PC 540300		  2908          movb    r0,0(r5)
000010f2 PC 386800		  2909          xorb    0(r5),r0
000010f5 PC 8c38		  2910          addqb   1,r7
000010f7 PC 1c00		  2911          cmpqb   0,r0
000010f9 PC 1a12		  2912          bne     ppi_d_err:b
				  2913
000010fb PC 4e34a055		  2914          comb    byte_pat,r0
000010ff PC 540300		  2915          movb    r0,0(r5)
00001102 PC 386800		  2916          xorb    0(r5),r0
00001105 PC 8c38		  2917          addqb   1,r7
00001107 PC 1c00		  2918          cmpqb   0,r0
00001109 PC 0a18		  2919          beq     ppi_nxt:b
				  2920  ppi_d_err:
0000110b PC 4ed8a11a		  2921          sbitb   ppi_fail,r7
0000110f PC 67d8b52c		  2922          addr    ppi_msg,r1
00001113 PC a7d906		  2923          addr    ppi_2:b,r6
00001116 PC eab63a		  2924          br      fcemsg
00001119 PC a7d908		  2925  ppi_2:  addr    ppi_nxt:b,r6
0000111c PC 5c09		  2926          movqb   2,r1
0000111e PC eab755		  2927          br      disp_hex
				  2928
				  2929  ppi_nxt:
00001121 PC c0a110		  2930          addb    x'10,r7
00001124 PC e8a1f0		  2931          andb    x'f0,r7
00001127 PC 0c29		  2932          addqb   ppi_pb - ppi_pa,r5
00001129 PC 072d00c00024	  2933          cmpd    r5,ppi_base + ppi_pc
0000112f PC 7abfbd		  2934          ble     ppi_loop
				  2935
00001132 PC 57a100c00020	  2936          movd    ppi_base,r5
00001138 PC 54a39b06		  2937          movb    ppi_inp_mode,ppi_ctl(r5)
				  2938
0000113c PC f4a11a		  2939          tbitb   ppi_fail,r7
0000113f PC 8ac000000b		  2940          bfs     ppi_error:d            ; migry add :D ;
				  2941  no_ppi:
00001144 PC a7d90c		  2942          addr    ppi_done:b,r6
00001147 PC eab6cd		  2943          br      tick
				  2944  ppi_error:
0000114a PC 5ca8c0c00034	  2945          movqb   on,@diag_fail
				  2946  ppi_done:
				  2948  ;
				  2949  ;       Interrupt Control Unit test
				  2950  ;
				  2951
				  2952  icu_bgn:
00001150 PC d5a10b00		  2953          movw    icu_code,r7
00001154 PC 57a100fffe00	  2954          movd    icu,r5
0000115a PC 14a055		  2955          movb    byte_pat,r0
0000115d PC 4e7400		  2956          comb    r0,r1
00001160 PC 540334		  2957          movb    r0,hcsvl(r5)
00001163 PC 386834		  2958          xorb    hcsvl(r5),r0
00001166 PC 540b34		  2959          movb    r1,hcsvl(r5)
00001169 PC 786834		  2960          xorb    hcsvl(r5),r1
0000116c PC 1808		  2961          orb     r1,r0
0000116e PC 1c00		  2962          cmpqb   0,r0
00001170 PC 1a8144		  2963          bne     no_icu:w
				  2964  ;
				  2965  ;               check out h counter (l counter is the baud clock)
				  2966  ;
00001173 PC 14a0ff		  2967          movb    x'ff,r0         ;set up max count
00001176 PC 54033c		  2968          movb    r0,hccvl(r5)
00001179 PC 540334		  2969          movb    r0,hcsvl(r5)
0000117c PC 54033e		  2970          movb    r0,hccvh(r5)
0000117f PC 540336		  2971          movb    r0,hcsvh(r5)
				  2972
00001182 PC 17a0000009c4	  2973          movd    cpms * 5,r0             ;prepare for 5 millisecond wait loop
				  2974
00001188 PC 54a35c2c		  2975          movb    x'5c,cctl(r5)           ;start counter
0000118c PC 54a39020		  2976          movb    clkm + bus8 + cfrz,mctl(r5)
				  2977                                          ;freeze the current value registers
				  2978
00001190 PC ce58683e		  2979          movzbd  hccvh(r5),r1
00001194 PC 4e45a008		  2980          ashw    8,r1
00001198 PC 54683c		  2981          movb    hccvl(r5),r1            ;read the count
0000119b PC 54a31020		  2982          movb    clkm + bus8,mctl(r5)
				  2983  icu_w1:
0000119f PC cf0700		  2984          acbd    -1,r0,icu_w1
000011a2 PC 54a39020		  2985          movb    clkm + bus8 + cfrz,mctl(r5)
				  2986                                          ;freeze the current value registers
				  2987
000011a6 PC ce18683e		  2988          movzbd  hccvh(r5),r0
000011aa PC 4e05a008		  2989          ashw    8,r0
000011ae PC 14683c		  2990          movb    hccvl(r5),r0            ;read the count
000011b1 PC 6100		  2991          subw    r0,r1
000011b3 PC 1508		  2992          movw    r1,r0
				  2993
000011b5 PC 8c38		  2994          addqb   1,r7
000011b7 PC 05051ccd		  2995          cmpw    r0,icu_min
000011bb PC aac0000010		  2996          blo     icu_t_err:d            ; migry add :D ;
000011c0 PC 8c38		  2997          addqb   1,r7
000011c2 PC 0505fde8		  2998          cmpw    r0,icu_max
000011c6 PC 5ac0000022		  2999          bls     icu_t_ok:d             ; migry add :D ;
				  3000  icu_t_err:
000011cb PC 4ed8a11b		  3001          sbitb   icu_fail,r7
000011cf PC 5ca8c0c00034	  3002          movqb   on,@diag_fail
000011d5 PC 67d8b47a		  3003          addr    icu_msg,r1
000011d9 PC a7d906		  3004          addr    icu_1:b,r6
000011dc PC eab574		  3005          br      fcemsg
				  3006  icu_1:
000011df PC a7d909		  3007          addr    icu_t_ok:b,r6
000011e2 PC 54a004		  3008          movb    4,r1
000011e5 PC eab68e		  3009          br      disp_hex
				  3010
				  3011  icu_t_ok:
000011e8 PC 54a31020		  3012          movb    clkm + bus8,mctl(r5)
000011ec PC 54a3542c		  3013          movb    x'54,cctl(r5)
				  3014  ;
				  3015  ;       Now try an interrupt
				  3016  ;
000011f0 PC ea16		  3017          br      icu_itest:b             ;branch around exception code
				  3018  ;
				  3019  ;       Non vectored interrupt entry point
				  3020  ;
				  3021  icu_int:
000011f2 PC 1538		  3022          movw    r7,r0
000011f4 PC 29a0ff00		  3023          andw    x'ff00,r0
000011f8 PC 05a00b00		  3024          cmpw    icu_code,r0
000011fc PC 1ab4d7		  3025          bne     nvierr                  ;error if not in icu test
000011ff PC 17b8		  3026          movd    tos,r0                  ;adjust stack pointer
00001201 PC 17b8		  3027          movd    tos,r0
00001203 PC ea80a9		  3028          br      icu_iok:w
				  3029
				  3030  icu_itest:
00001206 PC c0a110		  3031          addb    x'10,r7
00001209 PC e8a1f0		  3032          andb    x'f0,r7
0000120c PC 57a100fffe00	  3033          movd    icu,r5
				  3034
00001212 PC 54a31220		  3035          movb    clkm + bus8 + ntar,mctl(r5) ;fixed priority mode
00001216 PC 5c681c		  3036          movqb   0,fprtl(r5)             ;make IR0 highest prior.
				  3037
00001219 PC dc07		  3038          movqb   -1,r0                   ;Mask all interrupts
0000121b PC 540314		  3039          movb    r0,imskl(r5)
0000121e PC 440314		  3040          cmpb    r0,imskl(r5)
00001221 PC 8c38		  3041          addqb   1,r7
00001223 PC 1a8075		  3042          bne     icu_i_error:w           ;0B11
				  3043
00001226 PC 540316		  3044          movb    r0,imskh(r5)
00001229 PC 440316		  3045          cmpb    r0,imskh(r5)
0000122c PC 8c38		  3046          addqb   1,r7
0000122e PC 1a806a		  3047          bne     icu_i_error:w           ;0B12
				  3048
00001231 PC 14a01a		  3049          movb    clkm + bus8 + frz + ntar,r0     ;freeze interrupt samp
00001234 PC 540320		  3050          movb    r0,mctl(r5)
00001237 PC 440320		  3051          cmpb    r0,mctl(r5)
0000123a PC 8c38		  3052          addqb   1,r7
0000123c PC 1a805c		  3053          bne     icu_i_error:w           ;0B13
				  3054
0000123f PC 54a3400c		  3055          movb    x'40,ipndl(r5)          ;clear any pending interrupts
00001243 PC 54a3400e		  3056          movb    x'40,ipndh(r5)
				  3057
00001247 PC 1c680c		  3058          cmpqb   0,ipndl(r5)             ;make sure they are clear
0000124a PC 8c38		  3059          addqb   1,r7
0000124c PC 1a804c		  3060          bne     icu_i_error:w           ;0B14
				  3061
0000124f PC 1c680e		  3062          cmpqb   0,ipndh(r5)
00001252 PC 8c38		  3063          addqb   1,r7
00001254 PC 1a8044		  3064          bne     icu_i_error:w           ;0B15
				  3065
00001257 PC 14a012		  3066          movb    clkm + bus8 + ntar,r0   ;unfreeze interrupt requests
0000125a PC 540320		  3067          movb    r0,mctl(r5)
0000125d PC 440320		  3068          cmpb    r0,mctl(r5)
00001260 PC 8c38		  3069          addqb   1,r7
00001262 PC 1a8036		  3070          bne     icu_i_error:w           ;0B16
				  3071
00001265 PC 14a0fe		  3072          movb    x'fe,r0                 ;unmask IR0
00001268 PC 540314		  3073          movb    r0,imskl(r5)
0000126b PC 440314		  3074          cmpb    r0,imskl(r5)
0000126e PC 8c38		  3075          addqb   1,r7
00001270 PC 1a8028		  3076          bne     icu_i_error:w           ;0B17
				  3077
00001273 PC 54a3880c		  3078          movb    x'88,ipndl(r5)          ;set ipnd for IR0
00001277 PC 8c38		  3079          addqb   1,r7
00001279 PC 74a3000c		  3080          tbitb   0,ipndl(r5)
0000127d PC 9a1b		  3081          bfc     icu_i_error:b           ;0B18
				  3082
0000127f PC c0a110		  3083          addb    x'10,r7
00001282 PC e8a1f0		  3084          andb    x'f0,r7
00001285 PC efa400008260	  3085          LPRD    SP,H'8260               ;TO AVOID ISE PROTECTION ERROR
0000128b PC 7da30800		  3086          bispsrw ipsr                    ;we should interrupt now
0000128f PC 17a00000c350	  3087          movd    cpms * 100,r0
00001295 PC cf0700		  3088  icu_iw: acbd    -1,r0,icu_iw            ;0B20
				  3089                                          ;Should never get here
				  3090  icu_i_error:
00001298 PC 4ed8a11b		  3091          sbitb   icu_fail,r7
0000129c PC 5ca8c0c00034	  3092          movqb   on,@diag_fail
				  3093
000012a2 PC 67d8b3c2		  3094          addr    icu_imsg,r1
000012a6 PC a7d917		  3095          addr    icu_done:b,r6
000012a9 PC eab4a7		  3096          br      fcemsg
				  3097
				  3098  icu_iok:
				  3099
000012ac PC f4a11b		  3100          tbitb   icu_fail,r7
000012af PC 8ac000000e		  3101          bfs     icu_done:d              ; migry add :D ;
				  3102  no_icu:
000012b4 PC a7d9c0000009	  3103          addr    icu_done:d,r6           ; migry add :D ;
000012ba PC eab55a		  3104          br      tick
				  3105  icu_done:
				  3106
				  3107  ;       .subtitle       "EXIT from DCT"
				  3108  ;
				  3109  ;       DCT16 Exit code
				  3110  ;
				  3111  diag_end:
000012bd PC 1738		  3112          movd    r7,r0
000012bf PC 4e08a01f		  3113          cbitb   msg_present,r0          ;isolate fail bits
000012c3 PC 4e08a01d		  3114          cbitb   usart_rdy,r0
000012c7 PC 5d00		  3115          movqw   0,r0
000012c9 PC 1f00		  3116          cmpqd   0,r0
000012cb PC a7d9c0000019	  3117          addr    sf_rtn:d,r6             ; migry add :D ;
000012d1 PC 0ac000000c		  3118          beq     diag_pass:d             ; migry add :D ;
000012d6 PC 67d8b1bb		  3119          addr    fail_msg,r1
000012da PC eab4e7		  3120          br      outmsg
				  3121
				  3122  diag_pass:
000012dd PC 67d8b18e		  3123          addr    pass_msg,r1
000012e1 PC eab4e0		  3124          br      outmsg
				  3125
				  3126  sf_rtn:
				  3127
000012e4 PC dca8c0c00036	  3128          movqb   off,@diag_run
000012ea PC 5ca8c0c00038	  3129          movqb   0,@diag_mode    
000012f0 PC eaad2c		  3130  ex:     br      RESET2                  ; RETURN TO TDS INIT
				  3132  ;+++++++++++++
				  3133
				  3134  ; end of aint.32k
				  3135  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				  3136  ; start of acmd.32k
				  3137
				  3138  ;
				  3139  ;  TABLE OF COMMANDS NAME FOR SEARCH
				  3140  ;
000012f3 PC 50435553		  3141  REGNTB: .BYTE   "P","C"    ,"U","S"
000012f7 PC 4953494e		  3142          .BYTE   "I","S"    ,"I","N"
000012fb PC 53424650		  3143          .BYTE   "S","B"    ,"F","P"
000012ff PC 4d4f5053		  3144          .BYTE   "M","O"    ,"P","S"
00001303 PC 4d534549		  3145          .BYTE   "M","S"    ,"E","I"
00001307 PC 50545046		  3146          .BYTE   "P","T"    ,"P","F"
0000130b PC 53434250		  3147          .BYTE   "S","C"    ,"B","P"
0000130f PC 42434d4d		  3148          .BYTE   "B","C"    ,"M","M"
00001313 PC 53504653		  3149          .BYTE   "S","P"    ,"F","S"
00001317 PC 46205220		  3150          .BYTE   "F"," "    ,"R"," "
0000131b PC 43464144		  3151          .BYTE   "C","F"    ,"A","D"
0000131f PC 4d464d4c		  3152          .BYTE   "M","F"    ,"M","L"
00001323 PC 4d424d57		  3153          .BYTE   "M","B"    ,"M","W"
00001327 PC 4d44		  3154          .BYTE   "M","D"
				  3155  REGTLN: .EQU    ($-REGNTB) / 2
00001329 PC 4d204620		  3156  CMNDTB: .BYTE   "M"," "    ,"F"," "
0000132d PC 53524c20		  3157          .BYTE   "S","R"    ,"L"," "
00001331 PC 44205355		  3158          .BYTE   "D"," "    ,"S","U"
00001335 PC 53574a53		  3159          .BYTE   "S","W"    ,"J","S"
00001339 PC 43584720		  3160          .BYTE   "C","X"    ,"G"," "
0000133d PC 53544f4d		  3161          .BYTE   "S","T"    ,"O","M"
00001341 PC 50204320		  3162          .BYTE   "P"," "    ,"C"," "
00001345 PC 42204152		  3163          .BYTE   "B"," "    ,"A","R"     
00001349 PC 4143414d		  3164          .BYTE   "A","C"    ,"A","M"
0000134d PC 4146		  3165          .BYTE   "A","F"
				  3166  CMNTLN: .EQU    ($-CMNDTB) / 2
				  3167  ;                v---------------------------------------------v
				  3168  ;+++++++++++++
				  3170  ;+++++++++++++
0000134f PC 20205444533136202020  3171  RMSG:   .BYTE   "  TDS16    Rev 2.00 24-NOV-83  DB16000A Version",CR
				  3173  ;+++++++++++++
				  3174
				  3181  RMSGE:  ;47 CHARS + CR
0000137f PC 0d202020		  3182  CRL:    .BYTE   CR," ",SPACE," "
				  3183
				  3184  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				  3185  ;  COMMAND LINE INPUT LOOP  ;
				  3186  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00001383 PC			  3187          .ALIGN 2
				  3188  MAINLP:
00001384 PC 5cd005		  3194          MOVQB   FALSE, NOTECHO
00001387 PC e7d18100		  3195          ADDR    TERM1, R7
0000138b PC a77901		  3196          ADDR    OUTB+1(R7),R6           ; DTRM.OUTLM:=3
0000138e PC 97a32020202000	  3200          MOVD    '    ', 0(R6)           ;CLEAR INBUF
00001395 PC 97a32020202004	  3201          MOVD    '    ', 4(R6)
0000139c PC 97a32020202008	  3202          MOVD    '    ', 8(R6)
000013a3 PC 94a30d7f		  3203          MOVB    CR,-1(R6)               ; OUTB(DTRM.OUTLN-3):=CR 
000013a7 PC cedcd080f5		  3204          MOVXBD  ACKFLG,R3
000013ac PC 5cd180f5		  3205          MOVQB   2,ACKFLG
				  3206          ;
000013b0 PC 7ce7db04		  3207  PROCS:  CASEB   PROTB:B[R3:B]           ; CASE OF ACKFLG :
000013b4 PC 07			  3208  PROTB:  .BYTE   PRO0-PROCS
000013b5 PC 2a			  3209          .BYTE   PRO1-PROCS
000013b6 PC 35			  3210          .BYTE   PRO2-PROCS
				  3211
				  3212          ;
				  3213          ; RESET MESSAGE
				  3214          ;
				  3215  PRO0:   
000013b7 PC ce83dbbf98000c	  3219          MOVMD   RMSG,0(R6),4            ;   RESET MESSAGE
000013be PC ce83dbbfa1100c	  3220          MOVMD   RMSG+16,16(R6),4
000013c5 PC ce83dbbfaa200c	  3221          MOVMD   RMSG+32,32(R6),4
000013cc PC 83a100000030	  3222          ADDD    RMSGE-RMSG:d,R6         ; migry add :D ;    OUTBUF:= RESET MESEG
000013d2 PC 02c000289a		  3223  RNMES:  BSR     SPRINTA
000013d7 PC eabfad		  3227          BR      MAINLP:W                ;    INLM[DTRM]:=INLM[DTRM]+RMSGE-RMSG
				  3228          ;
				  3229          ; NMI MESSAGE
				  3230          ;
				  3231  PRO1:   
000013da PC 97a3494d4e5200	  3235          MOVD    H'494D4E52,0(R6)        ;   " RNMI"
000013e1 PC 0f32		  3236          ADDQD   4,R6                    ;    OUTBUF:= "RNMI"
000013e3 PC ea6f		  3240          BR      RNMES
				  3241  ;       BR      PROPT1:B                ;    OUTLM[DTRM]:=OUTLM[DTRM]+2
				  3242          ;
				  3243          ; MAIN  MONITOR
				  3244          ;
				  3245  PRO2:   
000013e5 PC 94a32a00		  3249          MOVB    "*",0(R6)               ;   "*"
000013e9 PC 8f30		  3250          ADDQD   1,R6                    ;    OUTBUF:= "*"
000013eb PC 94a32000		  3251  PROPT1: MOVB    ' ',0(R6)               ; OUTB[DTRM.OUTLM]:=CR****WAS CR NOW SP
000013ef PC 8f30		  3252          ADDQD   1,R6                    ; DTRM.OUTLM:=DTRM.OUTLM+2;
000013f1 PC 1cd081aa		  3253          CMPQB   FALSE,PROCESS           ; IF PROCESS ACTIVE
000013f5 PC 0a23		  3254          BEQ     PROX:B                  ; THEN NO STAR RESP0NSE
000013f7 PC 1cd081ab		  3255          CMPQB   0, ALONFLG              ;IF START OF PROCESS PRINTOUT
000013fb PC 0a17		  3256          BEQ     ACR:B                   ;THEN DO A CR
000013fd PC 1cd281ab		  3257          CMPQB   4, ALONFLG              ;ELSE START DOING 4 TO ALINE
00001401 PC 7a11		  3258          BLE     ACR:B
00001403 PC 8cd081ab		  3259          ADDQB   1, ALONFLG              ;COUNT FOR PRINTOUT
00001407 PC 97a3202020207d	  3260          MOVD    '    ', -3(R6)
0000140e PC 8f30		  3261          ADDQD   1, R6
00001410 PC ea08		  3262          BR      PROX:B
00001412 PC dcd081ab		  3263  ACR:    MOVQB   1, ALONFLG
00001416 PC 0f37		  3264          ADDQD   -2,R6
00001418 PC 02c0002854		  3265  PROX:   BSR     SPRINTA                 ; PRINT (OUTB)
				  3266
				  3267  ;+++++++++++++
0000141d PC 27d08500		  3269          ADDR    STACKL(SB),R0           ; SP:=SB+H'200
				  3271  ;+++++++++++++
				  3272
				  3273  ;@@@@@@@@@@@@@@
				  3277  ;@@@@@@@@@@@@@@
				  3278
00001421 PC ef04		  3279          LPRD    SP,R0
00001423 PC 1cd081aa		  3280          CMPQB   FALSE,PROCESS           ; IF PROCESS IS STILL ALIVE
00001427 PC 0a07		  3281          BEQ     MOVON:B                 ;   THEN UPDATE TERM LINE
00001429 PC 0286f0		  3282          BSR     PROCIT:W                ;        AND SKIP INPUT
0000142c PC ea18		  3283          BR      FSCN4:B                 ;   ELSE GET NEXT LINE
0000142e PC 02c00026e5		  3284  MOVON:  BSR     SRDLIN                  ; CALL STANDARD READ LINE  ROUTINE
00001433 PC c72b8050		  3285  FSCN:   CMPD    R5,INLM(R7)             ; IF SCAN = END OF LINE GO TO MAIN LP
00001437 PC dabf4d		  3286          BGE     MAINLP
0000143a PC 046d0020		  3287  FSCN2:  CMPB    0(R5),SPACE             ;SPACE,0(R5)IF CHAR >=SPACE GO TO FSCN3
0000143e PC 6a06		  3288          BGT     FSCN3:B
00001440 PC 8f28		  3289          ADDQD   1,R5                    ; DTRM.SCN := DTRM.SCN+1
00001442 PC ea71		  3290          BR      FSCN
				  3291  FSCN3:
				  3292  FSCN4:  
00001444 PC a77900		  3293          ADDR    OUTB(R7),R6             ; DTRM.OUTLM:=1
00001447 PC e7ddbee2		  3294          ADDR    CMNDTB,TOS              ; TBSRCH (3,CMNDTB,(CMNDTBE-CMNDTB)/4)
0000144b PC d4a513		  3295          MOVB    CMNTLN,TOS
0000144e PC 02c0002958		  3296          BSR     TBSRCH                  ; (* SEARCH COMMND-TABLE *)
00001453 PC 9cb8		  3297          CMPQB   TRUE,TOS
00001455 PC 1a8031		  3298          BNE     SYNTERR:W               ; IF COMMAND NOT FOUND IN COMMAND TABLE ERROR
00001458 PC 94160d		  3299          MOVB    R2,L                    ; L:=COMMAND-NUMBER
0000145b PC 7defda8005		  3300  MAINCS: CASEW   BRTB:W[R2:W]            ; MAIN CASE OF COMMAND-NUMBER
00001460 PC fe05		  3301  BRTB:   .WORD   MOVELP-MAINCS   ; MOVE             "M"
00001462 PC fe05		  3302          .WORD   FILLP-MAINCS    ; FILL             "F"
00001464 PC fe05		  3303          .WORD   SRCHLP-MAINCS   ; SEARCH           "SR"
00001466 PC 4705		  3304          .WORD   LOADLP-MAINCS   ; LOAD             "L"
00001468 PC 4a05		  3305          .WORD   DUMPLP-MAINCS   ; DUMP             "D"
0000146a PC ed04		  3306          .WORD   STULP-MAINCS    ; STEP UNTIL       "SU"
0000146c PC ed04		  3307          .WORD   STULP-MAINCS    ; STEP WHILE       "SW"
0000146e PC 4304		  3308          .WORD   CXPL-MAINCS     ; JSB              "JS"
00001470 PC 4304		  3309          .WORD   CXPL-MAINCS     ; CXP              "CX"
00001472 PC 8503		  3310          .WORD   GOLP-MAINCS     ; GO               "G"
00001474 PC da03		  3311          .WORD   STEPL-MAINCS    ; STEP N           "ST"
00001476 PC ae06		  3312          .WORD   OPC-MAINCS      ; OPERATION MOD    "OM"
00001478 PC 6502		  3313          .WORD   PRNTC-MAINCS    ; PRINT            "P"
0000147a PC 6502		  3314          .WORD   PRNTC-MAINCS    ; CHANGE           "C"
0000147c PC 0104		  3315          .WORD   BEGINL-MAINCS   ; BEGIN            "B"
0000147e PC 0b01		  3316          .WORD   ALLREG-MAINCS   ; COMPLEX COMND TO PRINTALL G.P REGS  "AR"
00001480 PC 2a01		  3317          .WORD   ALLCPU-MAINCS   ; COMPLEX COMND TO PRINTALL CPU REGS  "AC"
00001482 PC 5d01		  3318          .WORD   ALLMMU-MAINCS   ; COMPLEX COMND TO PRINTALL MMU REGS  "AM"
00001484 PC 7c01		  3319          .WORD   ALLFPU-MAINCS   ; COMPLEX COMND TO PRINTALL FPU REGS  "AF"
				  3320  SYNTERR:
00001486 PC 5cd081aa		  3321          MOVQB   FALSE, PROCESS          ;HOOK INTO AHELP ENVIROMENT     
0000148a PC e76d00		  3322          ADDR    0(R5), TOS              ;PASS LINE START
0000148d PC 02995f		  3323          BSR     COMD_IN                 ; check for commands
00001490 PC 9cb8		  3324          CMPQB   TRUE, TOS               ;IF NO COMM ERROR THEN LOOP OK
00001492 PC 0abef2		  3325          BEQ     MAINLP
00001495 PC 5cd081aa		  3326  ERRORC:  MOVQB   FALSE,PROCESS          ; CANCEL PROCESS IF ERROR
00001499 PC 94a33f00		  3327          MOVB    "?",0(R6)               ; WRITELN (# LF ? #)
0000149d PC 8f30		  3328          ADDQD   1,R6                    ;  OUTB(NDTRM.OUTLM):= ? 
0000149f PC 5dd081a8		  3329          MOVQW   0,DEFSET                ; CANCEL PENDING ALONE MODE FLAGS
000014a3 PC 02c00027c9		  3330  MSGENT: BSR     SPRINTA
000014a8 PC eabedc		  3331          BR      MAINLP                  ; GOTO MAINLP
				  3332  ;
				  3333  ;     ERRORS TABLE
				  3334  ;
000014ab PC 204e4d49204e5649	  3335  ERTAB:  .BYTE   " NMI NVI"
000014b3 PC 204650552044565a	  3336          .BYTE   " FPU DVZ"
000014bb PC 20554e4420464c47	  3337          .BYTE   " UND FLG"
000014c3 PC 2042505420494c4c	  3338          .BYTE   " BPT ILL"
000014cb PC 2054524320455854	  3339          .BYTE   " TRC EXT"
000014d3 PC 20425052204e5354	  3340          .BYTE   " BPR NST"
000014db PC 2041425420555352	  3341          .BYTE   " ABT USR"
000014e3 PC 20504e4420435243	  3342          .BYTE   " PND CRC"
000014eb PC 2053524320535643	  3343          .BYTE   " SRC SVC"
000014f3 PC 20435850204d4f44	  3344          .BYTE   " CXP MOD"
000014fb PC 2056524620525453	  3345          .BYTE   " VRF RTS"
00001503 PC e7d18100		  3346  ERENT:  ADDR    TERM1, R7
00001507 PC a77900		  3347          ADDR    OUTB(R7),R6           ; DTRM.OUTLM:=3
0000150a PC 5dd081a8		  3348          MOVQW   0,DEFSET                        ;CANCEL PENDING ALONE MODE FLGS
0000150e PC 5cd081aa		  3349          MOVQB   FALSE,PROCESS                   ; CANCEL PROCESS IF ERROR
00001512 PC 95a3450d00		  3350          MOVW    CR+H'100*"E",0(R6)              ; INSERT CR LF E 
00001517 PC ce5c08		  3351          MOVXBD  R1,R1
0000151a PC 97f3d9bfb102	  3352          MOVD    ERTAB+32[R1:D],2(R6)            ; INSERT ERROR MESSAGE
00001520 PC 0f33		  3353          ADDQD   6,R6
00001522 PC eabf81		  3354          BR      MSGENT                          ; PRINT MESSAGE
				  3355  ;
				  3356  ;
				  3357  ;        S H X T O B N  ( STANDARD HEX TO BIN  CALL )
				  3358  ;
				  3359  ;
				  3360  SHXTOBN:
00001525 PC d7cd00		  3361          MOVD    0(SP),TOS
00001528 PC 67debf5e04		  3362          ADDR    SYNTERR,4(SP)   ; EXIT ADDRESS SYNTERR
0000152d PC 7fdec00026d0	  3363          JSR     COMPS           ; COMPRESS LEADING SPACE'S
00001533 PC 7ca505		  3364          ADJSPB 5                ; (* PUSH DUMMY WORD EXERR
00001536 PC d72d		  3365          MOVD    R5,TOS          ; VECP:=DTRM.SCN
00001538 PC d77d8050		  3366          MOVD    INLM(R7),TOS    ; ENDP:=DTRM.INLM
0000153c PC 02c000274f		  3367          BSR     HXTOBN          ; HEXTOBN (WORD,EXRR,DTRM,SCN,DTRM.INLM)
00001541 PC 57b9		  3368          MOVD    TOS,R5          ; UPDATE DTRM.SCN
00001543 PC 9cb8		  3369          CMPQB   TRUE,TOS
00001545 PC 57b8		  3370          MOVD    TOS,R1          ; R1:=WORD
00001547 PC 1a06		  3371          BNE     SHXTBEX:B       ; IF EXRR THEN
00001549 PC 57ce0400		  3372          MOVD    4(SP),0(SP)     ;    EXIT TO ERROR ADDRESS
				  3373  SHXTBEX: 
0000154d PC 7fdec00026b0	  3374          JSR     COMPS           ; COMPRESS LEADING SPACE'S
00001553 PC 1204		  3375          RET     4
				  3376  ;
				  3377  ;
				  3378  ;       COMMAND TO PRINT  REGISTER SETS
				  3379  ;
				  3380  ;
				  3381
				  3382  ; GENERAL PURPOSE REGS DEFINED
				  3383  ALLRN:
00001555 PC 52305231523252335234  3384          .BYTE 'R0','R1','R2','R3','R4','R5','R6','R7','@'
				  3385          RNNUM: .EQU ($ -ALLRN +1)
				  3386
00001566 PC 6207		  3387  ALLREG: SAVE [R0,R1,R2] ;USING R0-R2
00001568 PC ce18a012		  3388          MOVZBD RNNUM,R0 ;SET UP VALUES
0000156c PC 67d869		  3389          ADDR ALLRN,R1   ;FOR STRING MOVE
0000156f PC ea8071		  3390          BR ALLEND:W     ;DO STRNG MOVE
				  3391  ;
				  3392  ; CPU REGISTERS DEFINED
				  3393  ALLCP:
00001572 PC 50435342465055534953  3394          .BYTE 'PC','SB','FP','US','IS','SP','IN','PS','MO','@'
				  3395          CPNUM: .EQU ($ -ALLCP +1)
				  3396
00001585 PC 6207		  3397  ALLCPU: SAVE [R0,R1,R2] ;ONCE AGAIN
00001587 PC ce18a014		  3398          MOVZBD CPNUM,R0 ;SET UP VALUES
0000158b PC 67d867		  3399          ADDR ALLCP,R1   ;FOR STRING MOVE
0000158e PC ea8052		  3400          BR ALLEND:W     
				  3401  ;
				  3402  ; MMU REGISTERS DEFINED
				  3403  ALLMM:
00001591 PC 4d5345495343424326	  3404          .BYTE 'MS','EI','SC','BC','&'
0000159a PC 50463020265046312026  3405          .BYTE 'PF0 ','&','PF1 ','&','BP0 '
000015a8 PC 26425031202650543020  3406          .BYTE '&','BP1 ','&','PT0 ','&'
000015b3 PC 5054312040		  3407          .BYTE 'PT1 ','@'
				  3408          MMNUM: .EQU ($ -ALLMM +1)
				  3409
000015b8 PC 6207		  3410  ALLMMU: SAVE [R0,R1,R2] ;AND ITS CHAR
000015ba PC ce18a028		  3411          MOVZBD MMNUM,R0 ;GET READY FOR
000015be PC 67d853		  3412          ADDR ALLMM,R1   ;MOVE TO PROCBUF
000015c1 PC ea801f		  3413          BR ALLEND:W
				  3414  ;
				  3415  ;       FLOATING POINT REGISTER SET DEFINED
				  3416  ALLFP:
000015c4 PC 46304631463246334634  3417          .BYTE 'F0','F1','F2','F3','F4','F5','F6','F7','FS','@'
				  3418          FPNUM: .EQU ($ -ALLFP +1)
				  3419
000015d7 PC 6207		  3420  ALLFPU: SAVE [R0,R1,R2] ;MOVE FPU SET
000015d9 PC ce18a014		  3421          MOVZBD FPNUM,R0 ;TO PROCBUF
000015dd PC 67d867		  3422          ADDR ALLFP,R1
				  3423
				  3424  ;
000015e0 PC dcd081aa		  3425  ALLEND: MOVQB TRUE,PROCESS      ;ACTIVATE PROCESS
000015e4 PC a7d081b6		  3426          ADDR PROCBUF,R2         ;FINAL VALU FOR STRING MOVE
000015e8 PC 0e0000		  3427          MOVSB
000015eb PC 72e0		  3428          RESTORE [R0,R1,R2]
000015ed PC 5cd081ab		  3429          MOVQB   0, ALONFLG
000015f1 PC eabd93		  3430          BR MAINLP               ;RETURN TO MAINLOOP TO DO PROCESS
				  3431
				  3432  SYM_MAT:                        ;SYMBOL MATCHING ROUTINE
000015f4 PC df0f		  3433          MOVQD   -1, R1          ;FLAG NO MATCH
000015f6 PC 9cd08337		  3434          CMPQB   TRUE, ASS_BLED
000015fa PC 1a8054		  3435          BNE     S_OUT:W         ;IF NO ASSEMBLT THEN SKIP
000015fd PC 62c0		  3436          SAVE [R6,R7]            ;SAVE USED REGISTERS
000015ff PC 5f38		  3437          MOVQD 0, R7             ;START AT LINE 0
00001601 PC 97d1881c		  3438          MOVD TXTEND, R6         ;START OF DEBUG DATA
00001605 PC 046d0061		  3439          CMPB 0(R5), 'a' 
00001609 PC ca06		  3440          BLT LS:B
0000160b PC 40a3e000		  3441          ADDB -H'20, 0(R5)
0000160f PC 046d0161		  3442  LS:     CMPB 1(R5), 'a' 
00001613 PC ca06		  3443          BLT NX_CMP:B
00001615 PC 40a3e001		  3444          ADDB -H'20, 1(R5)               
				  3445  NX_CMP:
00001619 PC c56f770004		  3446          CMPW 0(R5), 4(R6)[R7:Q]
0000161e PC 1a8026		  3447          BNE NEXTM:W             ;IF NOT THIS SYMBOL TRY NEXTLINE
00001621 PC 57f87700		  3448          MOVD 0(R6)[R7:Q], R1
00001625 PC 77a00000001f	  3449          TBITD 31, R1            ;IF THIS IS A PC VALU
0000162b PC 9a06		  3450          BFC APCVAL:B            ;THEN DON'T ADD SB START
0000162d PC 43903000		  3451          ADDD 0(SVMOD), R1
00001631 PC 4e4ba00000001f	  3452  APCVAL: CBITD 31, R1            ;FIX SB VALUE
00001638 PC 0f29		  3453          ADDQD 2, R5             ;POINT TO '=' FOR CHANGE COMMAND        
0000163a PC 7203		  3454          RESTORE [R6,R7]
0000163c PC 7fdec00025c1	  3455          JSR COMPS
00001642 PC 1200		  3456          RET     0       
				  3457  NEXTM:  
00001644 PC 8f38		  3458          ADDQD 1, R7             ;NEXT LINE
00001646 PC 873e8818		  3459          CMPD R7, LINES  ;
0000164a PC ca4f		  3460          BLT NX_CMP
0000164c PC 7203		  3461          RESTORE [R6,R7]
0000164e PC 1200		  3462  S_OUT:  RET     0
				  3463  ;
				  3464  ;
				  3465  ;   P R I N T  &  C H A N G E    C O M M A N D S
				  3466  ;
				  3467  ;
				  3468  ;
				  3469  ;
				  3470  ;       REGISTERS PARAMETERS TABLE
				  3471  ;
00001650 PC 60ff000c		  3472  REGTB:  .BYTE   H'60,H'FF,0,SVPC-SEREA          ; PC DESCRIPTION
00001654 PC 60ff0004		  3473  USX:    .BYTE   H'60,H'FF,0,SVUS-SEREA          ; US
00001658 PC 60ff0008		  3474  ISX:    .BYTE   H'60,H'FF,0,SVIS-SEREA          ; IS
0000165c PC 60ff0018		  3475          .BYTE   H'60,H'FF,0,SVINTB-SEREA        ; INTB
00001660 PC 60fffe10		  3476          .BYTE   H'60,H'FF,-2,SVMOD-SEREA        ; SB
00001664 PC 60ff0000		  3477          .BYTE   H'60,H'FF,0,SVFP-SEREA          ; FP
00001668 PC 40ff0010		  3478          .BYTE   H'40,H'FF,0,SVMOD-SEREA         ; MOD
0000166c PC 40ff0014		  3479          .BYTE   H'40,H'FF,0,SVPSR-SEREA         ; PSR
00001670 PC 88ff003c		  3480          .BYTE   H'88,H'FF,0,SVMSR-SEREA         ; MSR
00001674 PC 81ff000f		  3481          .BYTE   H'81,H'FF,0,15                  ; EADD
00001678 PC 8101000c		  3482          .BYTE   H'81,1,0,12                     ; PTB
0000167c PC 61010004		  3483          .BYTE   H'61,1,0,4                      ; PF
00001680 PC 81ff0008		  3484          .BYTE   H'81,H'FF,0,8                   ; SC
00001684 PC 81010000		  3485  BREKX:  .BYTE   H'81,1,0,0                      ; BPR
00001688 PC 61ff000b		  3486          .BYTE   H'61,H'FF,0,11                  ; BCNT
0000168c PC 81ff000a		  3487          .BYTE   H'81,H'FF,0,10                  ; REAL-MSR
00001690 PC 62ff0000		  3488          .BYTE   H'62,H'FF,0,0                   ; SP
00001694 PC 84ff0000		  3489          .BYTE   H'84,H'FF,0,0                   ; FSR
00001698 PC 83070000		  3490          .BYTE   H'83,7,0,0                      ; FL
0000169c PC 80070038		  3491          .BYTE   H'80,7,0,SVR0-SEREA             ; R
000016a0 PC 25ff0000		  3492          .BYTE   H'25,H'FF,0,0                   ; CNFG
000016a4 PC 80f00048		  3493  PA_:    .BYTE   H'80,H'F0,0,DUM1-SEREA          ; DUMMY DATA
000016a8 PC 80f0004c		  3494  MF_:    .BYTE   H'80,H'F0,0,DUM2-SEREA          ;   "    "
000016ac PC 80f0fe50		  3495  ML_:    .BYTE   H'80,H'F0,-2,DUM3-SEREA         ;   "    "
000016b0 PC 26f00000		  3496  MB_:    .BYTE   H'26,H'F0,0,0                   ; MB
000016b4 PC 46f00002		  3497          .BYTE   H'46,H'F0,0,2                   ; MW
000016b8 PC 86f00004		  3498  MD_:    .BYTE   H'86,H'F0,0,4                   ; MD
000016bc PC 870f025e		  3499  SFTX:   .BYTE   H'87,15,2,BRKAR-8-SEREA         ; SOFT-BPT
				  3500  ;
				  3501  BREKT:  .EQU    (BREKX-REGTB) / 4
				  3502  SFTBT:  .EQU    (SFTX-REGTB) / 4
				  3503  PA:     .EQU    (PA_-REGTB) / 4
				  3504  MF:     .EQU    (MF_-REGTB) / 4
				  3505  ML:     .EQU    (ML_-REGTB) / 4
				  3506  MB:     .EQU    (MB_-REGTB) / 4
				  3507  MD:     .EQU    (MD_-REGTB) / 4
				  3508  ;
000016c0 PC a0a00c		  3509  PRNTC:  SUBB    PRC,R2          ; PUSH GET-PUT PARAMETER
000016c3 PC d415		  3510          MOVB    R2,TOS
000016c5 PC e7ddbc2e		  3511          ADDR    REGNTB,TOS      ; TBSRCH (REGNTB,REGTLN)
000016c9 PC d4a51b		  3512          MOVB    REGTLN,TOS
000016cc PC 02c00026da		  3513          BSR     TBSRCH
000016d1 PC 9cb8		  3514          CMPQB   TRUE,TOS        ; IF TBSRCH.EXITF=FALSE GOTO SYNTERR
000016d3 PC 1abdb3		  3515          BNE     SYNTERR
000016d6 PC 5f08		  3516          MOVQD   0,R1
000016d8 PC 84a7daffbf79	  3517          CMPB    H'FF,REGTB+1[R2:D]
000016de PC 0a3e		  3518          BEQ     PCH1:B          ; IF REGTB[N1,I]<>H'FF THEN (* THERE IS N*)
000016e0 PC 041515		  3519          CMPB    R2, PA          ;IF MEMORY CHANGE/PRINT
000016e3 PC ca1b		  3520          BLT     NO_1:B          ;THEN DO SYMSEARCH
000016e5 PC 04151a		  3521          CMPB    R2, MD
000016e8 PC 6a16		  3522          BGT     NO_1:B  
000016ea PC 02bf0a		  3523          BSR     SYM_MAT
000016ed PC 84a015		  3524          CMPB    PA,R2
000016f0 PC 1a0a		  3525          BNE     NOTPAD:B
000016f2 PC 9f0f		  3526          CMPQD   -1,R1
000016f4 PC 0abd92		  3527          BEQ     SYNTERR
000016f7 PC ea80cb		  3528          BR      PCH3X:W
000016fa PC 9f0f		  3529  NOTPAD: CMPQD   -1, R1          ;IF VALUE MATCHED THEN GO TO PCH
000016fc PC 1a05		  3530          BNE     PCH0:B
000016fe PC 02be27		  3531  NO_1:   BSR     SHXTOBN         ;    HXTOBN (N) (* ON ERROR GO TO SYNTERR *)
00001701 PC 84a7daf0bf50	  3532  PCH0:   CMPB    H'F0,REGTB+1[R2:D]
00001707 PC 0a15		  3533          BEQ     PCH1:B          ;    IF REGTB[N1,I]=H'FF THEN
00001709 PC ee40f0dabf48	  3534          CHECKB  R0,REGTB+1[R2:D],R1
0000170f PC 9a0d		  3535          BFC     PCH1:B          ;       IF N>REGTB.UPPER OR N<REGTB.LOWER
00001711 PC 84a00d		  3536          CMPB    BREKT,R2        ;       THEN IF I<>BREKT THEN
00001714 PC 1abd72		  3537          BNE     SYNTERR         ;               GOTO SYNTERR
00001717 PC 94a01b		  3538          MOVB    SFTBT,R2        ;            ELSE I=SOFT-BREAK GO TO PCH0;
0000171a PC ea67		  3539          BR      PCH0
0000171c PC d70d		  3540  PCH1:   MOVD    R1,TOS          ; PUSH N PARAMETER
0000171e PC 1708		  3541          MOVD    R1,R0           ; {SAVE N}
00001720 PC 9cc804		  3542          CMPQB   PUTI,4(SP)      ; IF L=CHCM (*CHANGE COMMAND *) THEN
00001723 PC 1a8061		  3543          BNE     PCH3:W
00001726 PC 44a33d00		  3544          CMPB    "=",0(R5)       ;    IF M(DTRM.SCN)<> "=" GO TO SYNTERR
0000172a PC 1abd5c		  3545          BNE     SYNTERR         ;    ELSE
0000172d PC 8f28		  3546          ADDQD   1,R5            ;       TRM.SCM:=DTRM.SCN+1
0000172f PC 84a01b		  3547          CMPB    SFTBT,R2        ;       THEN IF I<>BREKT THEN
00001732 PC 1a10		  3548          BNE     NO_2:B
00001734 PC 7fdec00024c9	  3549          JSR     COMPS
0000173a PC 02beba		  3550          BSR     SYM_MAT
0000173d PC 9f0f		  3551          CMPQD   -1, R1          ;IF VALUE MATCHED THEN GO GETPUT
0000173f PC 1a803d		  3552          BNE     DOPU:W
00001742 PC 5fd08068		  3553  NO_2:   MOVQD   0,DUM1          ;FLAG AS SHORT REAL CONVERSION
00001746 PC 041516		  3554          CMPB    R2,MF           ;CHECK FOR IT
00001749 PC 0a0b		  3555          BEQ     AFLOAT:B
0000174b PC dfd08068		  3556          MOVQD   1,DUM1          ;FLAG AS LONG CONVERSION
0000174f PC 041517		  3557          CMPB    R2,ML           ;CHECK FOR IT
00001752 PC 1a27		  3558          BNE     AINT:B
00001754 PC d70d		  3559  AFLOAT: MOVD    R1, TOS         ;PASS ADDR OF BINARY VALUE
00001756 PC 7fdec00024a7	  3560          JSR     COMPS           ; COMPRESS LEADING SPACE'S
0000175c PC d72d		  3561          MOVD    R5, TOS         ;START OF STRING
0000175e PC ced8a51e		  3562          MOVZBD  30, TOS         ;LENGTH OF STRING
00001762 PC e7d58068		  3563          ADDR    DUM1, TOS       ;RADIX FLAG
00001766 PC e7d5806c		  3564          ADDR    DUM2, TOS       ;ERROR RETURN
0000176a PC 02c0003161		  3565          BSR     ASC_2_RE
0000176f PC 1fd0806c		  3566          CMPQD   FALSE,DUM2      ;CHECK
00001773 PC 1abd22		  3567          BNE     ERRORC
00001776 PC eabc0e		  3568          BR      MAINLP  
00001779 PC 02bdac		  3569  AINT:   BSR     SHXTOBN         ;       SXTOBN(VALUE) (*ON ERROR GOTO SYNTERR*)
0000177c PC 02c000267d		  3570  DOPU:   BSR     GETPUT          ;       GETPUT (GET-PUT,N,VALUE);
00001781 PC eabc03		  3571          BR      MAINLP
				  3572
00001784 PC 5fd08068		  3573  PCH3:   MOVQD   0,DUM1          ;SET SHORT CONVERT
00001788 PC 84a016		  3574          CMPB    MF,R2
0000178b PC 0a0b		  3575          BEQ     UNFLOAT:B
0000178d PC dfd08068		  3576          MOVQD   1,DUM1          ;SET LONG
00001791 PC 84a017		  3577          CMPB    ML,R2
00001794 PC 1a1c		  3578          BNE     UNINT:B  
00001796 PC d735		  3579  UNFLOAT:MOVD    R6, TOS         ;DESTINATION BUFFER
00001798 PC e7d58068		  3580          ADDR    DUM1, TOS       ;RADIX
0000179c PC d70d		  3581          MOVD    R1, TOS
0000179e PC 02c0003423		  3582          BSR     REAL_2_A
000017a3 PC 94a33d00		  3583          MOVB    "=",0(R6)
000017a7 PC 83a100000023	  3584          ADDD    35, R6
000017ad PC ea802b		  3585          BR      SPIT:W 
000017b0 PC 02c0002649		  3586  UNINT:  BSR     GETPUT          ;    GETPUT (GET_PUT,N,VALUE)
000017b5 PC 1cd081aa		  3587          CMPQB   FALSE,PROCESS   ; IF REAL ALONE AND PROCESS=TRUE
000017b9 PC 0a09		  3588          BEQ     PCH3X:B         ;   THEN OUTPUT REG ID
000017bb PC 97d381b200		  3589          MOVD    REGCHR,0(R6)
000017c0 PC 0f32		  3590          ADDQD   4,R6
000017c2 PC 94a33d00		  3591  PCH3X:  MOVB    "=",0(R6)       ;    OUTB(DTRM.OUTLM):="=";
000017c6 PC 8f30		  3592          ADDQD   1,R6            ;    DTRM.OULM:=DTRM.OUTLM+1;
				  3593
000017c8 PC d70d		  3594          MOVD    R1,TOS
000017ca PC ceccf5dabe8683	  3595          EXTSB   REGTB[R2:D],TOS,4,4     ;  (* GET REBTB.LENGTH *)
000017d1 PC 5cb9		  3596          MOVQB   2,TOS           ;    BNTOHX (R1,REGTB.LENGTH,2)
000017d3 PC 02c00024fe		  3597          BSR     BNTOHX
000017d8 PC 02c0002494		  3598  SPIT:   BSR     SPRINTA         ;    WRITELN (OUTB)
000017dd PC eabba7		  3599          BR      MAINLP
				  3600  ;
				  3601  ;
				  3602  ;       G O    C O M M A N D
				  3603  ;
				  3604  ;
				  3605  ;       LOCAL CONSTANTS
				  3606  ;
				  3607  ;
000017e0 PC 4e88a60134		  3608  GOLP:   CBITB   PSR_T,SVPSR     ; SVPSR_T:=0 (* DISABLE TRACE *)
000017e5 PC 5cd080f4		  3609          MOVQB   NOTRC,STEPFLG   ; STEPFLG:=STBRK;
000017e9 PC ce18a00e		  3610  STDGO:  MOVZBD  NSFBR,R0                ; FOR I:=NBREAK-2 DOWEN TO 1 DO
000017ed PC b4a7d01d8082	  3611  GOL1:   TBITB   BPR_BE,BRKAR-4:w[R0:D]  ; migry add :D ; IF BRKAR.BE[I] THEN DO (* B.P. I ENABLE
000017f3 PC 9a803b		  3612          BFC     GOL5:W          ;       BEGIN
000017f6 PC 57f0d08082		  3613          MOVD    BRKAR-4:w[R0:D],R1      ; migry add :D ;
000017fb PC 6ba000ffffff	  3614          ANDD    H'FFFFFF,R1     ;         R1:=BRKAR[I].ADDR
00001801 PC 144fd00080c5	  3615          MOVB    0(R1),INS-1[R0:B] ;       INS[I]:=M(BRKAR[I].ADDR)
				  3616                  ; *** MOVSU ***  2
00001807 PC 47d02c		  3617          CMPD    SVPC,R1         ;         IF BRKAR[I].ADDR=PC THEN
0000180a PC 1a12		  3618          BNE     GOL4:B
0000180c PC 4e98a60134		  3619          SBITB   PSR_T,SVPSR     ;            PSR_T:=1 (* SET TRACE MODE ONE  *)
00001811 PC 970e80c2		  3620          MOVD    R1,ACTBRK       ;            ACTBRK:=I
00001815 PC 98a60480f4		  3621          ORB     STBRK,STEPFLG   ;            STEPFLG:= STEPBRK (*FLAG GO TRACE
0000181a PC ea14		  3622          BR      GOL5:B          ;       ELSE
0000181c PC 54a2f200		  3623  GOL4:   MOVB    BPTC,0(R1)      ;           M(BRKAR[I].ADDR):=BPT;
				  3624          ;       **** MOVSU ****
00001820 PC 44a2f200		  3625          CMPB    BPTC,0(R1)      ;           IF NOT WRITTEN  THEN
00001824 PC 0a0a		  3626          BEQ     GOL5:B
00001826 PC 1708		  3627          MOVD    R1,R0           ;           ERROR VRF
00001828 PC 54a00c		  3628          MOVB    EVRF,R1
0000182b PC eabcd8		  3629          BR      ERENT
0000182e PC cc07bfbf		  3630  GOL5:   ACBB    -1,R0,GOL1      ; END;
00001832 PC 02a8dd		  3631          BSR     MNEXIT
				  3632  ;
				  3633  ;
				  3634  ;       S T E P   N    C O M M A N D
				  3635  ;
				  3636  ;
00001835 PC dfd080be		  3637  STEPL:  MOVQD   1,STPCNT        ; STEPCOUNT:=1
00001839 PC 44a30d00		  3638          CMPB    CR,0(R5)        ; IF DTRM.SCN= CR GOTO 1 STEP
0000183d PC 0a0c		  3639          BEQ     STP2:B
0000183f PC 02bce6		  3640          BSR     SHXTOBN         ; SHXTOBN (N) (* ON ERROR GO TO STP2 *)
00001842 PC 4e7308		  3641          ABSD    R1, R1
00001845 PC 970e80be		  3642          MOVD    R1,STPCNT       ; STEPCOUNT:= N
				  3643  STP2:   
00001849 PC 44a30d00		  3644          CMPB    CR,0(R5)        ; IF DTRM.SCN<> CR GOTO SYNTERR
0000184d PC 1abc39		  3645          BNE     SYNTERR
00001850 PC dcd080f4		  3646          MOVQB   STPN,STEPFLG    ; STEPFLAG:=STEP N
00001854 PC 4e98a60134		  3647          SBITB   PSR_T,SVPSR     ; SVPSR_T:=1 (* SET TRACE MODE *)
00001859 PC eabf90		  3648          BR      STDGO           ; GOTO STDGO;
				  3649  ;
				  3650  ;
				  3651  ;       B E G I N    J S R     C X P    C O M M A D S
				  3652  ;
				  3653  ;
0000185c PC 5cd081a9		  3654  BEGINL: MOVQB   FALSE, SPACIT   ;FLAG NOT AUTO THEN CHECK
00001860 PC 9cd08337		  3655          CMPQB   TRUE, ASS_BLED
00001864 PC 1a8030		  3656          BNE     NOT_A:W
00001867 PC 9fd78346		  3657          CMPQD   -1, A_MOD       ;CHECK FOR AUTO DONE
0000186b PC 0a8029		  3658          BEQ     NOT_A:W
0000186e PC 44a35a00		  3659          CMPB    'Z', 0(R5)      ;CHECK FOR ZERO INIT OPTION
00001872 PC 1a13		  3660          BNE     JUSTB:B
00001874 PC 57d083d0		  3661          MOVD    A_SB, R1        ;ZERO MEMORY FROM SB TO SP
00001878 PC 5f4800		  3662  ZME:    MOVQD   0, 0(R1)
0000187b PC 0f0a		  3663          ADDQD   4, R1
0000187d PC 870e8342		  3664          CMPD    R1, A_SP
00001881 PC 7a77		  3665          BLE     ZME
00001883 PC ea08		  3666          BR      MOK:B   
00001885 PC 44a30d00		  3667  JUSTB:  CMPB    CR, 0(R5)       ;CHECK FOR NO PARAMETERS
00001889 PC 1a0b		  3668          BNE     NOT_A:B         ;DONT DO AUTO
0000188b PC dcd081a9		  3669  MOK:    MOVQB   TRUE, SPACIT    ;FLAG THAT AUTO BEGIN   
0000188f PC 95a6030034		  3670          MOVW    H'300,SVPSR     ;SET PSR TO USER MODE
00001894 PC dcd080f6		  3671  NOT_A:  MOVQB   1,CXPFLG        ; CXPFLG:=1 {FLAG OF BEGIN}
00001898 PC 5fd080d4		  3672          MOVQD   0,OLDPC         ; OLDPC := 0 ; {RESET PC AFTER END OF PROGRAM}
0000189c PC ea1e		  3673          BR      CXPL2:B
0000189e PC 5cd081a9		  3674  CXPL:   MOVQB   FALSE, SPACIT   ;NOT AUTO
000018a2 PC 1cd180f6		  3675          CMPQB   2,CXPFLG        ; IF CXPFLG=2 {SECOND CXP} 
000018a6 PC 1a09		  3676          BNE     CXPL1:B         ; THEN ERROR CXP
000018a8 PC ce58a00a		  3677          MOVZBD  ECXP,R1
000018ac PC eabc57		  3678          BR      ERENT
000018af PC 5cd180f6		  3679  CXPL1:  MOVQB   2,CXPFLG        ; ELSE CXPFLG:=2;
000018b3 PC ce83d62c80d408	  3680          MOVMD   SVPC,OLDPC,3    ; SAVE PC,US,IS,MOD
				  3681                          ; XXX 12
000018ba PC 1cd081a9		  3682  CXPL2:  CMPQB   FALSE, SPACIT
000018be PC 0ac000000a		  3683          BEQ     NO_A_SP:d       ; migry add :D ;
000018c3 PC 97d6834224		  3684          MOVD    A_SP, SVUS      ;SET US TO A_SP VALUE
000018c8 PC e7d024		  3685  NO_A_SP:ADDR    SVUS,R3         ; R3:=ADDR OF US
000018cb PC b4a60934		  3686          TBITB   PSR_S,SVPSR     ; IF PSR_S=1 THEN
000018cf PC 8a05		  3687          BFS     CXPL3:B         ;   R3:= ADDR OF IS
000018d1 PC e7d028		  3688          ADDR    SVIS,R3
000018d4 PC 175900		  3689  CXPL3:  MOVD    0(R3),R4        ; R4:=SP
000018d7 PC 1cd081a9		  3690          CMPQB   FALSE, SPACIT   ;
000018db PC 0a08		  3691          BEQ     GETMA:B
000018dd PC 57d08346		  3692          MOVD    A_MOD, R1
000018e1 PC ea05		  3693          BR      SETMA:B
000018e3 PC 02bc42		  3694  GETMA:  BSR     SHXTOBN         ; SHXTOBN (ADDR)
000018e6 PC 9708		  3695  SETMA:  MOVD    R1,R2           ; R2:=ADDR  (*MOD *)
000018e8 PC 84a6070d		  3696          CMPB    JSBC,L          ; IF L=CXP THEN
000018ec PC 0a8042		  3697          BEQ     CXPL5:W         ; BEGIN
000018ef PC 1cd081a9		  3698          CMPQB   FALSE, SPACIT   ;IF AUTO THEN SET OFFSET TO 0
000018f3 PC 0a06		  3699          BEQ     GETOF:B
000018f5 PC 5f08		  3700          MOVQD   0, R1           
000018f7 PC ea05		  3701          BR      SETOF:B
000018f9 PC 02bc2c		  3702  GETOF:  BSR     SHXTOBN         ;    SHXTOBN (OFFSET)
000018fc PC 971630		  3703  SETOF:  MOVD    R2,SVMOD        ;    MOD:= READ MOD
000018ff PC 435008		  3704          ADDD    8(R2),R1        ;    R1:=OFFSET+(8+(MOD)) (* NEW PC *)
				  3705                  ; *** MOV US
00001902 PC 84a60081a9		  3706          CMPB    FALSE, SPACIT   ;BUILD A MOD TABLE IF AUTO
00001907 PC 0a22		  3707          BEQ     NOB:B
00001909 PC 97d283d000		  3708          MOVD    A_SB, 0(R2)     ;ENTER SB START
0000190e PC 5f5004		  3709          MOVQD   0, 4(R2)        ;ZERO LINK TABLE
00001911 PC 97d283d808		  3710          MOVD    A_PC, 8(R2)     ;SET PC START
				  3711
				  3712  ;+++++++++++++
00001916 PC 67d08500		  3714          ADDR    STACKL(SB),R1   ; SP:=
0000191a PC a74e810028		  3715          ADDR    256(R1), SVIS   ;SET USER IS AREA
				  3717  ;+++++++++++++
				  3718
				  3719  ;@@@@@@@@@@@@@@
				  3724  ;@@@@@@@@@@@@@@
				  3725
0000191f PC 57d083d8		  3726          MOVD    A_PC, R1        ;SET PC START
00001923 PC 5f500c		  3727          MOVQD   0, 12(R2)       ;ZERO RESERVED AREA     
00001926 PC 5fd020		  3728          MOVQD   0, SVFP         ;SET FP TO 0
00001929 PC 0f26		  3729  NOB:    ADDQD   -4,R4
0000192b PC af6700		  3730          SPRD    MOD,0(R4)       ;    PUSH MONITOR MOD ON USER STACK
				  3731                  ; *** MOV SU
				  3732                                  ; END;
0000192e PC 970e2c		  3733  CXPL5:  MOVD    R1,SVPC         ; GO PC:=R1
00001931 PC 0f26		  3734          ADDQD   -4,R4
00001933 PC 27dbc000001400	  3735          ADDR    CXPRL:d,0(R4)   ; migry add :D ; PUSH CXPRL AS RETURN ADDRES
				  3736                  ; *** MOV SU
0000193a PC d72200		  3737          MOVD    R4,0(R3)        ; UPDATE USER SP
0000193d PC 1cd180f6		  3738          CMPQB   2,CXPFLG        ; IF CXPFLG=2 GOTO GOLP {TO USER PROGRAM}
00001941 PC 0abe9f		  3739          BEQ     GOLP            ; ELSE GOTO MAINLP
00001944 PC eaba40		  3740          BR      MAINLP
				  3741  ;
00001947 PC f2			  3742  CXPRL:  BPT                     ; FOR END OF PROGRAM AND CALL COMMANDS
				  3743  ;
				  3744  ;
				  3745  ;       S T E P   U N T I L  /  W H I L E
				  3746  ;
				  3747  ;
00001948 PC dc19		  3748  STULP:  MOVQB   STW,R3          ; R3:=0
0000194a PC 84a6060d		  3749          CMPB    STWC,L          ; IF L=STW THEN  (* COMMAND IS STW *)
0000194e PC 0a04		  3750          BEQ     STU2:B          ;   R3:=1
00001950 PC 5c19		  3751          MOVQB   STU,R3
00001952 PC e7ddb9a1		  3752  STU2:   ADDR    REGNTB,TOS      ; TBSRCH(2,REGTB,REGNLN)
00001956 PC d4a51b		  3753          MOVB    REGTLN,TOS
00001959 PC 02c000244d		  3754          BSR     TBSRCH
0000195e PC 9cb8		  3755          CMPQB   TRUE,TOS        ; IF  NOT EXITF THEN  GOTO SYNTERR
00001960 PC 1abb26		  3756          BNE     SYNTERR         ; ELSE
00001963 PC 5f08		  3757          MOVQD   0,R1            ;   N PARAMETER :=0
00001965 PC 84a7daffbcec	  3758          CMPB    H'FF,REGTB+1[R2:D]
0000196b PC 0a16		  3759          BEQ     STU3:B          ;   IF REGTB[N1,I]=H'FF THEN
0000196d PC 02bbb8		  3760          BSR     SHXTOBN         ;   HXTOBN (N) (* ON ERROR GOTO SYNTERR *)
00001970 PC 84a7daf0bce1	  3761          CMPB    H'F0,REGTB+1[R2:D]; IF REGTB[N1,I]=H'FF THEN
00001976 PC 0a0b		  3762          BEQ     STU3:B
00001978 PC ee40f0dabcd9	  3763          CHECKB  R0,REGTB+1[R2:D],R1;   IF N>REGTB.UPPER OR N<REGTB.LOWER
0000197e PC 8abb08		  3764          BFS     SYNTERR         ;       THEN GOTO SYNTERR;
00001981 PC 970e80e4		  3765  STU3:   MOVD    R1,STUADD       ;   STUADD:=N
00001985 PC 941680e7		  3766          MOVB    R2,STUADD+3     ;   STUADD.TYPE:=R2
				  3767  STU5:                           ; END ;
00001989 PC df01		  3768          MOVQD   3,R0            ; FOR I:=1 TO 3 DO
0000198b PC 02bb9a		  3769  STU6:   BSR     SHXTOBN         ;     SHXTOBN (VALUE) ;
0000198e PC 970fd080e4		  3770          MOVD    R1,STUADD[R0:D] ;     STUADD[I]:=VALUE
00001993 PC cc0778		  3771          ACBB    -1,R0,STU6      ; END ;
00001996 PC 941e80f4		  3772          MOVB    R3,STEPFLG      ; STEPFLG:=STU OR STW
0000199a PC 4e98a60134		  3773          SBITB   PSR_T,SVPSR     ; PSR_T:=1 (* SET TRACE BIT *)
0000199f PC eabe4a		  3774          BR      STDGO
				  3775  ;
				  3776  ;
				  3777  ;
				  3778  ;
				  3779  ;       L O A D    C O M M A N D
				  3780  ;
				  3781  ;       NOT IMPLEMENTED
				  3782  ;
				  3783  ;
000019a2 PC eabae4		  3784  LOADLP: BR      SYNTERR
				  3785  ;
				  3786  ;
				  3787  ;
				  3788  ;       D U M P    C O M M A N D
				  3789  ;
				  3790  ;
				  3791  ;
				  3792  ;
				  3793  DUMPLP:
000019a5 PC 5fd081b2		  3794          MOVQD   0,CHRNUM        ; SET NUMBER FOR ASC DUMP TO 0
000019a9 PC 5c20		  3795  DUX:    MOVQB   0,R4    ; TERM:=NDTRM
				  3796  MDU5:                           ; END; IF
000019ab PC 02bb7a		  3797          BSR     SHXTOBN         ; HXTOBN(ADDR1);
000019ae PC 9708		  3798          MOVD    R1,R2           ; {R2:=ADDR1}
000019b0 PC 4eb310		  3799          ABSD    R2,R2           ;POSITIVE VALUE ONLY
000019b3 PC 02bb72		  3800          BSR     SHXTOBN         ; SHXTOBN(ADDR2);
000019b6 PC 94d6830a81ac	  3801          MOVB    MON_BASE, NEGIT ;SAVE RADIX
000019bc PC dcd1830a		  3802          MOVQB   3, MON_BASE     ;SET TO HEX
000019c0 PC 9f08		  3803          CMPQD   1, R1           ;POSITIVE VALUE >= 1 ONLY
000019c2 PC 7a04		  3804          BLE     DULIN:B
000019c4 PC df08		  3805          MOVQD   1, R1
				  3806  DULIN:                          ; REPEAT
000019c6 PC 5f18		  3807          MOVQD   0,R3            ;   CRC:=0;
000019c8 PC a7d18100		  3808          ADDR    TERM1,R6        ;   OUTB:=TERM1.OUTB
000019cc PC d735		  3809  DUL3:   MOVD    R6,TOS          ; {PUSH START ADDRESS OF PRINT ARRAY FOR PRINTA
000019ce PC 97dbb9b100		  3810          MOVD    CRL,0(R6)       ;   OUTB(OUTLM):= CR,LF,"L";
000019d3 PC 8f31		  3811  DUL3X:  ADDQD   3,R6            ;   OUTLM:=OUTLM+3;
000019d5 PC d715		  3812          MOVD    R2,TOS          ;   BNTOHX(ADDR1,6,2);
000019d7 PC d5a50602		  3813          MOVW    H'602,TOS
000019db PC 02c00022f6		  3814          BSR     BNTOHX
000019e0 PC 94a32000		  3815          MOVB    SPACE,0(R6)     ;   OUTB(OUTLM):=SPACE;
000019e4 PC 8f30		  3816          ADDQD   1,R6            ;   OUTLM:=OUTLM+1
000019e6 PC ce18a010		  3817          MOVZBD  NLIN,R0         ;   L := NLIN {# OF BYTES IN A LINE}
000019ea PC 0708		  3818          CMPD    R1,R0           ;   IF N<NLIN
000019ec PC da04		  3819          BGE     DULOOP:B        ;   THEN L := N;
000019ee PC 1708		  3820          MOVD    R1,R0
000019f0 PC ced85500		  3821  DULOOP: MOVZBD  0(R2),TOS       ;   FOR I=1 TO L DO
				  3822          ; *** MOVUS ***
000019f4 PC 0281df		  3823          BSR     DUMPASC:W               ; UPDATE ACSII DUMP BUFFER
000019f7 PC 8f10		  3824          ADDQD   1,R2            ;      ADDR1:=ADDR1+1;
000019f9 PC d5a50200		  3825          MOVW    H'200,TOS       ;      BNTOHX(M(ADDR1),2,0);
000019fd PC 02c00022d4		  3826          BSR     BNTOHX
00001a02 PC 94a32000		  3827          MOVB    SPACE,0(R6)
00001a06 PC 8f30		  3828          ADDQD   1,R6
00001a08 PC 8f0f		  3829  NOSPAC: ADDQD   -1,R1           ;      N := N-1;
00001a0a PC cf0766		  3830          ACBD    -1,R0,DULOOP    ;   END;   {FOR}
00001a0d PC 97a32220202000	  3831          MOVD    H'22202020,0(R6); CLEAR FIRST 4 CHARS TO '"   '
00001a14 PC 0f32		  3832          ADDQD   4,R6            ; UPDATE CHAR COUNT FOR PRINTA
00001a16 PC 0281e4		  3833          BSR     MOVASC:W        ; FILL IN ASCII CHARS
00001a19 PC 94a32200		  3834          MOVB    '"',0(R6)       ; END BORDER OF ASCII CHAR
00001a1d PC 8f30		  3835          ADDQD   1,R6            ; FIELD
00001a1f PC d735		  3836  NOASCD: MOVD    R6,TOS          ;   {PARAMETERS FOR PRINTA}
00001a21 PC d425		  3837          MOVB    R4,TOS
00001a23 PC 1f08		  3838          CMPQD   0,R1            ;   IF N=0
00001a25 PC 0a0d		  3839          BEQ     DUEXT:B         ;   THEN GOTO DUEXT;
00001a27 PC d4a592		  3840          MOVB    0x92,TOS                ; for alignment
00001a2a PC 02c00021e8		  3841          BSR     PRINTA          ;   PRINTA (OUTB(1),OUTB(OUTLM),TERM,OPHND)
00001a2f PC eabf97		  3842          BR      DULIN           ; UNTIL ADDR1>ADDR2
00001a32 PC 94a30d00		  3843  DUEXT:  MOVB    CR,0(R6)        ; OUTB(OUTLM):= CR ;
00001a36 PC 8fc801		  3844          ADDQD   1,1(SP)         ; PRINTA (OUTB(1),OUTB(OUTLM+2),TERM);
00001a39 PC d4a593		  3845          MOVB    0x93,TOS                ; for alignment
00001a3c PC 02c00021d6		  3846          BSR     PRINTA
00001a41 PC 94d681ac830a	  3847          MOVB    NEGIT, MON_BASE ;RESTORE RADIX
00001a47 PC eab93d		  3848          BR      MAINLP
				  3849  ;
				  3850  ;
				  3851  ;
				  3852  ;   M O V E    F I L L    S E A R C H   C O M M A N D S
				  3853  ;
				  3854  ;
				  3855  ;
				  3856  ;
00001a4a PC 422057204420	  3857  OPTB:   .BYTE   "B W D "        ; B W D AND V OPTIONS SEARCH TABLE
				  3858  OPTBL:  .EQU    ($-OPTB) / 2    ; OPTION TABLE LENGTH
00001a50 PC 030200		  3859  BCOM:   .BYTE   3,2,0           ; BEGIN WORD FOR EACH COMMAND
00001a53 PC 54a00c		  3860  VRFERR1: MOVB   EVRF, R1
00001a56 PC eabaad		  3861           BR     ERENT   
				  3862  ;
				  3863  ;
				  3864  MOVELP:
				  3865  FILLP:
				  3866  SRCHLP:
00001a59 PC 275100		  3867          ADDR    (-MOVC)(R2),R4  ; L:=COMMAND NUMBER (0 MOVE 1 FILL 2 SRCH
00001a5c PC 02bac9		  3868          BSR     SHXTOBN         ; SHXTOBN (ADDR1);
00001a5f PC 1708		  3869          MOVD    R1,R0           ; R0:=ADDR1
00001a61 PC 02bac4		  3870          BSR     SHXTOBN         ; SHXTOBN(ADDR2);
00001a64 PC d708		  3871          MOVD    R1,R3           ; R3:=ADDR2;
00001a66 PC 02babf		  3872          BSR     SHXTOBN         ; SHXTOBN(ADDR3)
00001a69 PC e7dd61		  3873          ADDR    OPTB,TOS        ; TBSRCH(OPTB,3);
00001a6c PC dcb9		  3874          MOVQB   3,TOS
00001a6e PC 02c0002338		  3875          BSR     TBSRCH
00001a73 PC 046d004e		  3876          CMPB    0(R5),"N"       ; IF INBUF(DTRM.SCN)="N"
00001a77 PC 1a05		  3877          BNE     SPC5:B          ; THEN NO-VERIFY BIT:=TRUE;
00001a79 PC 98a004		  3878          ORB     4,R2
00001a7c PC 4e87a002		  3879  SPC5:   ASHD    2,R2            ; END IF
00001a80 PC 98e0dc50		  3880          ORB     BCOM[R4:B],R2
00001a84 PC 1c20		  3881          CMPQB   MOVC,R4         ; IF MOVE COMMAND 
00001a86 PC 1a0a		  3882          BNE     SPC9:B          ; THEN
00001a88 PC 5701		  3883          MOVD    R0,R5           ;    R5:=ADDR1;
00001a8a PC 1718		  3884          MOVD    R3,R0           ;    ADDR1:=ADDR2;
00001a8c PC c308		  3885          ADDD    R1,R3           ;    ADDR2:=ADDR1+N-1;
00001a8e PC 8f1f		  3886          ADDQD   -1,R3           ; ELSE
00001a90 PC 941610		  3887  SPC9:   MOVB    R2,SCRCH1       ; {SAVE CASE WORD}
00001a93 PC a8a00f		  3888          ANDB    H'0F,R2
				  3889                                  ; FOR I:= 1 TO N DO 
				  3890                                  ; BEGIN
00001a96 PC dfb8		  3891  SPCL:   MOVQD   1,TOS           ;   STEP:=1;
				  3892  ;
				  3893  ;        CASE BRANCH TABLE
				  3894  ;
				  3895  ;
00001a98 PC 7ce7da04		  3896  SPCS:   CASEB   SPCBTB:B[R2:B]  ;    CASE OF (OPTWORD AND V BIT)
00001a9c PC 18			  3897  SPCBTB: .BYTE   SRCHB-SPCS      ; SRCH  B
00001a9d PC 6e			  3898          .BYTE   SERR-SPCS       ; NOT EXISTS
00001a9e PC 15			  3899          .BYTE   FILLB-SPCS      ; FILL  B
00001a9f PC 10			  3900          .BYTE   MOVEB-SPCS      ; MOVE  B
00001aa0 PC 5d			  3901          .BYTE   SRCHW-SPCS      ; SRCH  W
00001aa1 PC 6e			  3902          .BYTE   SERR-SPCS       ; NOT EXISTS
00001aa2 PC 57			  3903          .BYTE   FILLW-SPCS      ; FILL  W
00001aa3 PC 6e			  3904          .BYTE   SERR-SPCS       ; MOVE  W
00001aa4 PC 68			  3905          .BYTE   SRCHD-SPCS      ; SRCH  D
00001aa5 PC 6e			  3906          .BYTE   SERR-SPCS       ; NOT EXISTS
00001aa6 PC 63			  3907          .BYTE   FILLD-SPCS      ; FILL  D
00001aa7 PC 6e			  3908          .BYTE   SERR-SPCS       ; MOVE  D
00001aa8 PC 546800		  3909  MOVEB:  MOVB    0(R5),R1        ;     "B"  X:=M(SOURCE-ADDR)
				  3910          ; *** MOVUS ***
00001aab PC 8f28		  3911          ADDQD   1,R5            ;          SOURCE-ADDR:=SOURCE-ADDR+1;
00001aad PC 140a00		  3912  FILLB:  MOVB    R1,0(R0)        ;          M(DESTINATIN-ADDR):=X;
				  3913          ; *** MOVSU ***
00001ab0 PC 040a00		  3914  SRCHB:  CMPB    R1,0(R0)
				  3915          ; *** MOVUS ***
00001ab3 PC b4a60410		  3916  SPCF:   TBITB   4,SCRCH1
00001ab7 PC 8a23		  3917          BFS     SPCRP:B         ;         IF F THEN
00001ab9 PC 0a09		  3918          BEQ     SPC10:B         ;           IF M(DESTINATION-ADDR)<>X THEN
00001abb PC 1c21		  3919          CMPQB   SRCHC,R4        ;             IF NOT SRCH COMMAND
00001abd PC 1abf96		  3920          BNE     VRFERR1         ;             THEN GOTO VRFERR;
00001ac0 PC ea1a		  3921          BR      SPCRP:B
00001ac2 PC 1c21		  3922  SPC10:  CMPQB   SRCHC,R4        ;           ELSE
00001ac4 PC 1a16		  3923          BNE     SPCRP:B         ;             IF SRCH COMMAND THEN
00001ac6 PC 94a33d00		  3924          MOVB    "=",0(R6)       ;             BEGIN
00001aca PC 8f30		  3925          ADDQD   1,R6            ;               DTRM.OUTB:= "=";
00001acc PC d705		  3926          MOVD    R0,TOS          ;               DTRM.OUTLM:=DTRM:OUTLM+2;
00001ace PC d5a50602		  3927          MOVW    H'602,TOS       ;               BNTOHX (DESTENATIN-ADDR,6,2);
00001ad2 PC 02c00021ff		  3928          BSR     BNTOHX
00001ad7 PC eab9cc		  3929          BR      MSGENT          ;               SPRINTA; RETURN TO MAINLP;
				  3930                                  ;             END;
				  3931                                  ;          END;
00001ada PC 03b8		  3932  SPCRP:  ADDD    TOS,R0          ;          DESTINATION-ADDR:=DESTINATION+STEP
00001adc PC c700		  3933          CMPD    R0,R3           ; END FOR
00001ade PC 7abfb8		  3934          BLE     SPCL
00001ae1 PC 1c21		  3935          CMPQB   SRCHC,R4        ; IF NOT SRCH COMMAND THEN RETURN TO MAINLP
00001ae3 PC 0a05		  3936          BEQ     SPERR:B         ; ELSE 
00001ae5 PC eab89f		  3937          BR      MAINLP
00001ae8 PC ce58a008		  3938  SPERR:  MOVZBD  ESRC,R1         ;  ERROR (SRC);
00001aec PC eaba17		  3939          BR      ERENT
00001aef PC 8fc800		  3940  FILLW:  ADDQD   1,0(SP)         ;           STEP:=STEP+1;
00001af2 PC 150a00		  3941          MOVW    R1,0(R0)        ;    "W"    M(DESTINATION-ADDR):=X
				  3942          ; *** MOVSU ***
00001af5 PC 050a00		  3943  SRCHW:  CMPW    R1,0(R0)
				  3944          ; *** MOVSU ***
00001af8 PC eabfbb		  3945          BR      SPCF
00001afb PC 8fb9		  3946  FILLD:  ADDQD   3,TOS           ;            STEP:=STEP+3;
00001afd PC 170a00		  3947          MOVD    R1,0(R0)        ;     "D"    M(DESTINATION-ADDR):=X;
				  3948          ; *** MOVSU ***
00001b00 PC 070a00		  3949  SRCHD:  CMPD    R1,0(R0)
				  3950          ; *** MOVSU ***
00001b03 PC eabfb0		  3951          BR      SPCF
00001b06 PC eab980		  3952  SERR:   BR      SYNTERR
				  3953  ;
				  3954  ;
				  3955  ; O P E R A T I N G      M O D E   C O M M A N D
				  3956  ;
				  3957  ;
				  3958  OPC:    
00001b09 PC 02ba1c		  3959          BSR     SHXTOBN         ;   R1:= CONFIGURATION NUMBER
00001b0c PC 046d000d		  3960  OP8:    CMPB    0(R5),CR        ; IF INBUF[DTRM.SCN]<>CR SYNTAX ERROR
00001b10 PC 1ab976		  3961          BNE     SYNTERR
00001b13 PC 940e03		  3962  OP10:   MOVB    R1,OPHND        ; UPDATE OPMOD
00001b16 PC eab86e		  3963          BR      MAINLP
00001b19 PC			  3964          .ENDSEG
				  3965
				  3966  ;
				  3967  ;       PROCESS CONTROLLER FOR COMPLEX COMMANDS
				  3968                          ;TO PRINT CPU REGS
				  3969  ;
				  3970
				  3971  PROCIT: .PROC                   ;PROCIT SIMULATES A SEQUENCE OF SIMPLE
				  3972          .VAR [R0,R1,R2]         ;COMMND INPUT TO MAINLP
00001b19 PC 820700		  3973          .BEGIN
00001b1c PC 277800		  3974          ADDR OUTB(R7),R0        ;GET ADDRESS OF TERMINAL INPUT
00001b1f PC 5701		  3975          MOVD R0,R5              ;DTERM.SCN=1
00001b21 PC 84a60581aa		  3976          CMPB PRNTAC,PROCESS     ;IF PRINT debug data else do reglist
00001b26 PC 1a8044		  3977          BNE  ALIST:W            ;THEN SET THAT PROCESS
00001b29 PC 5cd081ab		  3978          MOVQB 0,ALONFLG         ;START NEW LINE FLAG    
00001b2d PC 9cd08337		  3979          CMPQB TRUE, ASS_BLED    ;IF NO ASSEMBLY THEN ERROR
00001b31 PC 1ab955		  3980          BNE SYNTERR             
00001b34 PC 62c8		  3981          SAVE [R3,R6,R7]         ;SAVE USED REGISTERS
00001b36 PC 5fd08804		  3982          MOVQD 0, LINNUM         ;START AT LINE 0
00001b3a PC d7d18818		  3983          MOVD LINES, R7          ;DO FOR ALL LINES
00001b3e PC 97d1881c		  3984          MOVD TXTEND, R6         ;START OF DEBUG DATA
00001b42 PC 5f18		  3985          MOVQD 0, R3             ;INDEX INTO DATA
				  3986
				  3987  NX_COMP:
00001b44 PC c7d7732c00		  3988          CMPD SVPC, 0(R6)[R3:Q]
00001b49 PC 1a0e		  3989          BNE NEXT:B              ;IF NOT THIS PC TRY NEXTLINE
00001b4b PC 17a2200d505400	  3990          MOVD H'200D5054, 0(R0)  ;INLN = TP<CR>" "
00001b52 PC 7213		  3991          RESTORE [R3,R6,R7]
00001b54 PC eab932		  3992          BR SYNTERR      
				  3993  NEXT:   
00001b57 PC 8fd08804		  3994          ADDQD 1,LINNUM          ;NEXT LINE
00001b5b PC 8f18		  3995          ADDQD 1, R3             ;NEXT INDEX
00001b5d PC 87d688048818	  3996          CMPD LINNUM, LINES      ;
00001b63 PC ca61		  3997          BLT NX_COMP
00001b65 PC 7213		  3998          RESTORE [R3,R6,R7]
00001b67 PC eaa7ac		  3999          BR ERROR
				  4000
00001b6a PC 67d081b6		  4001  ALIST:  ADDR PROCBUF,R1         ;GET ADDRESS OF SELECTED PROCESS
00001b6e PC a7d081b2		  4002          ADDR REGCHR,R2          ;AND OF REGISTER ID
00001b72 PC 95a2202002		  4003          MOVW SPACES,2(R2)       ;CLEAR REG ID CHARACTERS
00001b77 PC 15a2202002		  4004          MOVW SPACES,2(R0)       ;CLEAR INLN
				  4005  PROLOOP:
00001b7c PC 44a24000		  4006          CMPB '@',0(R1)          ;IF PROBUF[N]=TERMINATION CHAR
00001b80 PC 0ac0000047		  4007          BEQ PRCDONE:d           ; migry add :D ;             ;       THEN DONE 
00001b85 PC 44a22000		  4008          CMPB SPACE,0(R1)        ;ELSE IF CURRENT PROBUF[N] IS SPACES
00001b89 PC 1ac0000009		  4009          BNE STOIT:d             ; migry add :D ;               ;       THEN GET NEXT
00001b8e PC 8f08		  4010          ADDQD 1,R1              ;ELSE MOV COMMND TO TERM BUFFER
00001b90 PC ea6c		  4011          BR PROLOOP
				  4012  STOIT:
00001b92 PC 14a25000		  4013          MOVB 'P',0(R0)          ;MAKE IT A 'PRINT' COMMAND
00001b96 PC 44a22600		  4014          CMPB '&',0(R1)          ;IF LEAD IN CHAR & THEN 4CHAR COMMND
00001b9a PC 1a1b		  4015          BNE TWOCHR:B            ;ELSE 2CHAR
00001b9c PC 54a22000		  4016          MOVB SPACE,0(R1)        ;CANCEL THE &
00001ba0 PC 8f08		  4017          ADDQD 1,R1              ;PROBUF[N]=PROBUG[N+1]
00001ba2 PC 154a0001		  4018          MOVW 0(R1),1(R0)        ;PROBUF[N,N+1]=OUTB1,2
00001ba6 PC 954a0000		  4019          MOVW 0(R1),0(R2)        ;    "    "   =REGISTER CHAR 1,2
00001baa PC 55a2202000		  4020          MOVW SPACES,0(R1)       ;CANCEL PROBUF[N,N+1]
00001baf PC 0f09		  4021          ADDQD 2,R1              ;UPDATE POINTERS
00001bb1 PC 0f01		  4022          ADDQD 2,R0
00001bb3 PC 0f11		  4023          ADDQD 2,R2
00001bb5 PC 154a0001		  4024  TWOCHR: MOVW 0(R1),1(R0)        ;MOVE ONLY TWO CHAR
00001bb9 PC 954a0000		  4025          MOVW 0(R1),0(R2)
00001bbd PC 55a2202000		  4026          MOVW SPACES,0(R1)       ;TO OUTB
00001bc2 PC eac000000d		  4027          BR PRCEXT:d             ; migry add :D ;               ;FINISH WITH CR
				  4028  PRCDONE:
00001bc7 PC 94a60081aa		  4029          MOVB FALSE,PROCESS      ;CANCEL PROCESS FLAG
00001bcc PC eab7b8		  4030          BR MAINLP               ;RETURN TO MAIN LOOP    
				  4031  PRCEXT:
00001bcf PC 92e01200		  4032          .ENDPROC
				  4033
				  4034
				  4035  ;
				  4036  ;       SUBROUTINE TO FILL ASCII CHAR FIELD
				  4037  ;
				  4038  DUMPASC:        .PROC
				  4039          .VAR [R0]
00001bd3 PC 820100		  4040          .BEGIN
00001bd6 PC 27d081b6		  4041          ADDR     ASCDUMP,R0
00001bda PC 03d081b2		  4042          ADDD     CHRNUM,R0      ;OFFSET TO NEXT CHAR
00001bde PC 14a22000		  4043          MOVB    SPACE,0(R0)     ; INIT CHAR VALUE TO 'SPACE'
00001be2 PC 0455001f		  4044          CMPB    0(R2),H'1F      ; IF BYTE IS LESS THAN/=
00001be6 PC 7a0c		  4045          BLE     NOCHR:B         ;   CHR(US) 
00001be8 PC 0455007f		  4046          CMPB    0(R2),H'7F      ; OR >= CHR(DEL)
00001bec PC da06		  4047          BGE     NOCHR:B         ; THEN NO CONVERSION
00001bee PC 14520000		  4048          MOVB    0(R2),0(R0)     ; ELSE MOVE TO DUMP
00001bf2 PC 8fd081b2		  4049  NOCHR:  ADDQD   1,CHRNUM        ; BUFFER
00001bf6 PC 92801200		  4050          .ENDPROC
				  4051  ;
				  4052  ;
				  4053  ;       SUBOUTINE TO FILL TERM1 BUFFER WITH ASCII DUMP CHARS
				  4054  ;
				  4055  MOVASC: .PROC
				  4056          .VAR[R0]
00001bfa PC 820100		  4057          .BEGIN
				  4058
00001bfd PC 5f00		  4059          MOVQD   0,R0                    ;SET MOVER COUNTER TO 0
00001bff PC 94e3d081b600	  4060  MOVNXT: MOVB    ASCDUMP[R0:B],0(R6)     ;MOVE BYTES TO TERM BUFFER
00001c05 PC 8f30		  4061          ADDQD   1,R6                    ;UPDATE DTERM CHAR COUNT
00001c07 PC 8f00		  4062          ADDQD   1,R0
00001c09 PC 8fd781b2		  4063          ADDQD   -1,CHRNUM
00001c0d PC 1cd081b2		  4064          CMPQB   0,CHRNUM                ;UNTIL CHAR COUNT
00001c11 PC 1a6e		  4065          BNE     MOVNXT                  ;IS EQUAL TO 0
00001c13 PC 92801200		  4066          .ENDPROC
				  4067  ; end of acmd.32k
				  4068  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				  4069  ; start of ahelp.32k
				  4070
				  4071
				  4072  ;          M A I N     P R O C E D U R E
				  4073
				  4074  MONASM:         .PROC   ;ENTRY PROC TO ASSEMBLE A LINE
				  4075
				  4076          ;INPUT PARAMETERS
				  4077
			  4078  CODESTRT:       .BLKD   ;ADDR OF FIRST BYTE TO CODE AT
				  4079
			  4080  LIN_STRT:       .BLKD   ;VEC TO START OF INPUT LINE
				  4081
			  4082  LIN_END:        .BLKD   ;NUMBER OF INPUT CHAR
				  4083
				  4084                  .RETURNS
				  4085
				  4086          ;RETURN PARAMETERS
				  4087
			  4088  CODEEND:        .BLKD   ;NUMBER OF BYTES IN INST
				  4089
			  4090  A_ERROR:        .BLKD   ; ERROR CODE RETURN 0=OK
				  4091
				  4092          .VAR [R0,R1,R2,R3,R4,R5,R6,R7]  ;SAVE ALL REGS
				  4093
				  4094
00001c17 PC 82ff00		  4095          .BEGIN
00001c1a PC ce1da0ff30		  4096  INITAL: MOVXWD  -SBSIZE,R0      ;INITIALIZE SB VARIABLES TO
00001c1f PC 5ce0d082f8		  4097  INVAL:  MOVQB   0,SBEND[R0:B]   ; ZERO
00001c24 PC cf007b		  4098          ACBD    1,R0,INVAL
00001c27 PC 97c6108282		  4099          MOVD    CODESTRT, PC_ADDR       ;SAVE CURRENT ADDRESS
				  4100
00001c2c PC eac0000ef1		  4101          BR      CODIT:d         ; migry add :D ;         ;GO START PARSE
				  4102                  ;ERROR MESSAGES
00001c31 PC 4241445f494e530d	  4103  NO_SUCH_INST:   .BYTE   'BAD_INS',CR
00001c39 PC 4455505f53594d0d	  4104  SYM_ERR1:       .BYTE   'DUP_SYM',CR
00001c41 PC 4241445f5441420d	  4105  SYM_ERR2:       .BYTE   'BAD_TAB',CR
00001c49 PC 554e445f53594d0d	  4106  SYM_ERR3:       .BYTE   'UND_SYM',CR
00001c51 PC 4241445f5053550d	  4107  PSU_ERR:        .BYTE   'BAD_PSU',CR
00001c59 PC 4241445f4e554d0d	  4108  REAL_BAD:       .BYTE   'BAD_NUM',CR
00001c61 PC 4552525f5345470d	  4109  ERR_SEG:        .BYTE   'ERR_SEG',CR    
00001c69 PC 4241445f4c494e0d	  4110  BAD_LIN:        .BYTE   'BAD_LIN',CR
				  4111  ;.NOLIST
				  4112
				  4113  CODTABL:; 1       2       3       4       5       6       7        8   
00001c71 PC b4650000		  4114  .FIELD  [3]4,   [2]2,   [2]1,   [5]11,  [5]6,   [5]0,   [5]0,   [CAT]0
00001c75 PC 4d4f5624		  4115  .BYTE   'MOV$'
00001c79 PC 1400		  4116  .BYTE   H'14,H'00
				  4117
00001c7b PC b4650000		  4118  .FIELD  [3]4,   [2]2,   [2]1,   [5]11,  [5]6,   [5]0,   [5]0,   [CAT]0
00001c7f PC 434d5024		  4119  .BYTE   'CMP$'
00001c83 PC 0400		  4120  .BYTE   H'04,H'00
				  4121
00001c85 PC b4650000		  4122  .FIELD  [3]4,   [2]2,   [2]1,   [5]11,  [5]6,   [5]0,   [5]0,   [CAT]0
00001c89 PC 41444424		  4123  .BYTE   'ADD$'
00001c8d PC 0000		  4124  .BYTE   H'00,H'00
				  4125
00001c8f PC b5650000		  4126  .FIELD  [3]5,   [2]2,   [2]1,   [5]11,  [5]6,   [5]0,   [5]0,   [CAT]0
00001c93 PC 4144444324		  4127  .BYTE   'ADDC$'
00001c98 PC 1000		  4128  .BYTE   H'10,H'00
				  4129
00001c9a PC b4650000		  4130  .FIELD  [3]4,   [2]2,   [2]1,   [5]11,  [5]6,   [5]0,   [5]0,   [CAT]0
00001c9e PC 53554224		  4131  .BYTE   'SUB$'
00001ca2 PC 2000		  4132  .BYTE   H'20,H'00
				  4133
00001ca4 PC b5650000		  4134  .FIELD  [3]5,   [2]2,   [2]1,   [5]11,  [5]6,   [5]0,   [5]0,   [CAT]0
00001ca8 PC 5355424324		  4135  .BYTE   'SUBC$'
00001cad PC 3000		  4136  .BYTE   H'30,H'00
				  4137
00001caf PC dce90000		  4138  .FIELD  [3]4,   [2]3,   [2]2,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
00001cb3 PC 4e454724		  4139  .BYTE   'NEG$'
00001cb7 PC 4e2000		  4140  .BYTE   H'4E,H'20,H'00
				  4141
00001cba PC dce90000		  4142  .FIELD  [3]4,   [2]3,   [2]2,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
00001cbe PC 41425324		  4143  .BYTE   'ABS$'
00001cc2 PC 4e3000		  4144  .BYTE   H'4E,H'30,H'00
				  4145
00001cc5 PC dce90000		  4146  .FIELD  [3]4,   [2]3,   [2]2,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
00001cc9 PC 4d554c24		  4147  .BYTE   'MUL$'
00001ccd PC ce2000		  4148  .BYTE   H'CE,H'20,H'00
				  4149
00001cd0 PC dce90000		  4150  .FIELD  [3]4,   [2]3,   [2]2,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
00001cd4 PC 44495624		  4151  .BYTE   'DIV$'
00001cd8 PC ce3c00		  4152  .BYTE   H'CE,H'3C,H'00
				  4153
00001cdb PC dce90000		  4154  .FIELD  [3]4,   [2]3,   [2]2,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
00001cdf PC 4d4f4424		  4155  .BYTE   'MOD$'
00001ce3 PC ce3800		  4156  .BYTE   H'CE,H'38,H'00
				  4157
00001ce6 PC dce90000		  4158  .FIELD  [3]4,   [2]3,   [2]2,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
00001cea PC 51554f24		  4159  .BYTE   'QUO$'
00001cee PC ce3000		  4160  .BYTE   H'CE,H'30,H'00
				  4161
00001cf1 PC dce90000		  4162  .FIELD  [3]4,   [2]3,   [2]2,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
00001cf5 PC 52454d24		  4163  .BYTE   'REM$'
00001cf9 PC ce3400		  4164  .BYTE   H'CE,H'34,H'00
				  4165
00001cfc PC b4650000		  4166  .FIELD  [3]4,   [2]2,   [2]1,   [5]11,  [5]6,   [5]0,   [5]0,   [CAT]0
00001d00 PC 414e4424		  4167  .BYTE   'AND$'
00001d04 PC 2800		  4168  .BYTE   H'28,H'00
				  4169
00001d06 PC b3650000		  4170  .FIELD  [3]3,   [2]2,   [2]1,   [5]11,  [5]6,   [5]0,   [5]0,   [CAT]0
00001d0a PC 4f5224		  4171  .BYTE   'OR$'
00001d0d PC 1800		  4172  .BYTE   H'18,H'00
				  4173
00001d0f PC b4650000		  4174  .FIELD  [3]4,   [2]2,   [2]1,   [5]11,  [5]6,   [5]0,   [5]0,   [CAT]0
00001d13 PC 42494324		  4175  .BYTE   'BIC$'
00001d17 PC 0800		  4176  .BYTE   H'08,H'00
				  4177
00001d19 PC b4650000		  4178  .FIELD  [3]4,   [2]2,   [2]1,   [5]11,  [5]6,   [5]0,   [5]0,   [CAT]0
00001d1d PC 584f5224		  4179  .BYTE   'XOR$'
00001d21 PC 3800		  4180  .BYTE   H'38,H'00
				  4181
00001d23 PC dce90000		  4182  .FIELD  [3]4,   [2]3,   [2]2,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
00001d27 PC 434f4d24		  4183  .BYTE   'COM$'
00001d2b PC 4e3400		  4184  .BYTE   H'4E,H'34,H'00
				  4185
00001d2e PC dce900e0		  4186  .FIELD  [3]4,   [2]3,   [2]2,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]SWIP
00001d32 PC 41534824		  4187  .BYTE   'ASH$'
00001d36 PC 4e0400		  4188  .BYTE   H'4E,H'04,H'00
				  4189
00001d39 PC dce900e0		  4190  .FIELD  [3]4,   [2]3,   [2]2,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]SWIP
00001d3d PC 4c534824		  4191  .BYTE   'LSH$'
00001d41 PC 4e1400		  4192  .BYTE   H'4E,H'14,H'00
				  4193
00001d44 PC dce900e0		  4194  .FIELD  [3]4,   [2]3,   [2]2,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]SWIP
00001d48 PC 524f5424		  4195  .BYTE   'ROT$'
00001d4c PC 4e0000		  4196  .BYTE   H'4E,H'00,H'00
				  4197
00001d4f PC 9ee90000		  4198  .FIELD  [3]6,   [2]3,   [2]0,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
00001d53 PC 4d4f56584257	  4199  .BYTE   'MOVXBW'
00001d59 PC ce1000		  4200  .BYTE   H'CE,H'10,H'00
				  4201
00001d5c PC dee90000		  4202  .FIELD  [3]6,   [2]3,   [2]2,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
00001d60 PC 4d4f56582444	  4203  .BYTE   'MOVX$D'
00001d66 PC ce1c00		  4204  .BYTE   H'CE,H'1C,H'00
				  4205
00001d69 PC 9ee90000		  4206  .FIELD  [3]6,   [2]3,   [2]0,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
00001d6d PC 4d4f565a4257	  4207  .BYTE   'MOVZBW'
00001d73 PC ce1400		  4208  .BYTE   H'CE,H'14,H'00
				  4209
00001d76 PC dee90000		  4210  .FIELD  [3]6,   [2]3,   [2]2,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
00001d7a PC 4d4f565a2444	  4211  .BYTE   'MOVZ$D'
00001d80 PC ce1800		  4212  .BYTE   H'CE,H'18,H'00
				  4213
00001d83 PC 94650000		  4214  .FIELD  [3]4,   [2]2,   [2]0,   [5]11,  [5]6,   [5]0,   [5]0,   [CAT]0
00001d87 PC 41444452		  4215  .BYTE   'ADDR'
00001d8b PC 2700		  4216  .BYTE   H'27,H'00
				  4217
00001d8d PC b5b30020		  4218  .FIELD  [3]5,   [2]2,   [2]1,   [5]7,   [5]11,  [5]0,   [5]0,   [CAT]QUICK
00001d91 PC 4d4f565124		  4219  .BYTE   'MOVQ$'
00001d96 PC 5c00		  4220  .BYTE   H'5C,H'00
				  4221
00001d98 PC b5b30020		  4222  .FIELD  [3]5,   [2]2,   [2]1,   [5]7,   [5]11,  [5]0,   [5]0,   [CAT]QUICK
00001d9c PC 434d505124		  4223  .BYTE   'CMPQ$'
00001da1 PC 1c00		  4224  .BYTE   H'1C,H'00
				  4225
00001da3 PC b5b30020		  4226  .FIELD  [3]5,   [2]2,   [2]1,   [5]7,   [5]11,  [5]0,   [5]0,   [CAT]QUICK
00001da7 PC 4144445124		  4227  .BYTE   'ADDQ$'
00001dac PC 0c00		  4228  .BYTE   H'0C,H'00
				  4229
00001dae PC dce90000		  4230  .FIELD  [3]4,   [2]3,   [2]2,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
00001db2 PC 4d454924		  4231  .BYTE   'MEI$'
00001db6 PC ce2400		  4232  .BYTE   H'CE,H'24,H'00
				  4233
00001db9 PC dce90000		  4234  .FIELD  [3]4,   [2]3,   [2]2,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
00001dbd PC 44454924		  4235  .BYTE   'DEI$'
00001dc1 PC ce2c00		  4236  .BYTE   H'CE,H'2C,H'00
				  4237
00001dc4 PC dce90000		  4238  .FIELD  [3]4,   [2]3,   [2]2,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
00001dc8 PC 4e4f5424		  4239  .BYTE   'NOT$'
00001dcc PC 4e2400		  4240  .BYTE   H'4E,H'24,H'00
				  4241
00001dcf PC b4050000		  4242  .FIELD  [3]4,   [2]2,   [2]1,   [5]11,  [5]0,   [5]0,   [5]0,   [CAT]0
00001dd3 PC 53455124		  4243  .BYTE   'SEQ$'
00001dd7 PC 3c00		  4244  .BYTE   H'3C,H'00
				  4245
00001dd9 PC b4050000		  4246  .FIELD  [3]4,   [2]2,   [2]1,   [5]11,  [5]0,   [5]0,   [5]0,   [CAT]0
00001ddd PC 534e4524		  4247  .BYTE   'SNE$'
00001de1 PC bc00		  4248  .BYTE   H'BC,H'00
				  4249
00001de3 PC b4050000		  4250  .FIELD  [3]4,   [2]2,   [2]1,   [5]11,  [5]0,   [5]0,   [5]0,   [CAT]0
00001de7 PC 53435324		  4251  .BYTE   'SCS$'
00001deb PC 3c01		  4252  .BYTE   H'3C,H'01
				  4253
00001ded PC b4050000		  4254  .FIELD  [3]4,   [2]2,   [2]1,   [5]11,  [5]0,   [5]0,   [5]0,   [CAT]0
00001df1 PC 53434324		  4255  .BYTE   'SCC$'
00001df5 PC bc01		  4256  .BYTE   H'BC,H'01
				  4257
00001df7 PC b4050000		  4258  .FIELD  [3]4,   [2]2,   [2]1,   [5]11,  [5]0,   [5]0,   [5]0,   [CAT]0
00001dfb PC 53484924		  4259  .BYTE   'SHI$'
00001dff PC 3c02		  4260  .BYTE   H'3C,H'02
				  4261
00001e01 PC b4050000		  4262  .FIELD  [3]4,   [2]2,   [2]1,   [5]11,  [5]0,   [5]0,   [5]0,   [CAT]0
00001e05 PC 534c5324		  4263  .BYTE   'SLS$'
00001e09 PC bc02		  4264  .BYTE   H'BC,H'02
				  4265
00001e0b PC b4050000		  4266  .FIELD  [3]4,   [2]2,   [2]1,   [5]11,  [5]0,   [5]0,   [5]0,   [CAT]0
00001e0f PC 53475424		  4267  .BYTE   'SGT$'
00001e13 PC 3c03		  4268  .BYTE   H'3C,H'03
				  4269
00001e15 PC b4050000		  4270  .FIELD  [3]4,   [2]2,   [2]1,   [5]11,  [5]0,   [5]0,   [5]0,   [CAT]0
00001e19 PC 534c4524		  4271  .BYTE   'SLE$'
00001e1d PC bc03		  4272  .BYTE   H'BC,H'03
				  4273
00001e1f PC b4050000		  4274  .FIELD  [3]4,   [2]2,   [2]1,   [5]11,  [5]0,   [5]0,   [5]0,   [CAT]0
00001e23 PC 53465324		  4275  .BYTE   'SFS$'
00001e27 PC 3c04		  4276  .BYTE   H'3C,H'04
				  4277
00001e29 PC b4050000		  4278  .FIELD  [3]4,   [2]2,   [2]1,   [5]11,  [5]0,   [5]0,   [5]0,   [CAT]0
00001e2d PC 53464324		  4279  .BYTE   'SFC$'
00001e31 PC bc04		  4280  .BYTE   H'BC,H'04
				  4281
00001e33 PC b4050000		  4282  .FIELD  [3]4,   [2]2,   [2]1,   [5]11,  [5]0,   [5]0,   [5]0,   [CAT]0
00001e37 PC 534c4f24		  4283  .BYTE   'SLO$'
00001e3b PC 3c05		  4284  .BYTE   H'3C,H'05
				  4285
00001e3d PC b4050000		  4286  .FIELD  [3]4,   [2]2,   [2]1,   [5]11,  [5]0,   [5]0,   [5]0,   [CAT]0
00001e41 PC 53485324		  4287  .BYTE   'SHS$'
00001e45 PC bc05		  4288  .BYTE   H'BC,H'05
				  4289
00001e47 PC b4050000		  4290  .FIELD  [3]4,   [2]2,   [2]1,   [5]11,  [5]0,   [5]0,   [5]0,   [CAT]0
00001e4b PC 534c5424		  4291  .BYTE   'SLT$'
00001e4f PC 3c06		  4292  .BYTE   H'3C,H'06
				  4293
00001e51 PC b4050000		  4294  .FIELD  [3]4,   [2]2,   [2]1,   [5]11,  [5]0,   [5]0,   [5]0,   [CAT]0
00001e55 PC 53474524		  4295  .BYTE   'SGE$'
00001e59 PC bc06		  4296  .BYTE   H'BC,H'06
				  4297
00001e5b PC b5650000		  4298  .FIELD  [3]5,   [2]2,   [2]1,   [5]11,  [5]6,   [5]0,   [5]0,   [CAT]0
00001e5f PC 5442495424		  4299  .BYTE   'TBIT$'
00001e64 PC 3400		  4300  .BYTE   H'34,H'00
				  4301
00001e66 PC dde90000		  4302  .FIELD  [3]5,   [2]3,   [2]2,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
00001e6a PC 5342495424		  4303  .BYTE   'SBIT$'
00001e6f PC 4e1800		  4304  .BYTE   H'4E,H'18,H'00
				  4305
				  4306  ;.FIELD [3]6,   [2]3,   [2]2,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
				  4307  ;.BYTE  'SBITI$'        NOT A MULTI PROCESSOR DEMO
				  4308  ;.BYTE  H'4E,H'1C,H'00
				  4309
00001e72 PC dde90000		  4310  .FIELD  [3]5,   [2]3,   [2]2,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
00001e76 PC 4342495424		  4311  .BYTE   'CBIT$'
00001e7b PC 4e0800		  4312  .BYTE   H'4E,H'08,H'00
				  4313
				  4314  ;.FIELD [3]6,   [2]3,   [2]2,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
				  4315  ;.BYTE  'CBITI$'        NOT A MULTI PROCESSOR DEMO
				  4316  ;.BYTE  H'4E,H'0C,H'00
				  4317
00001e7e PC dde90000		  4318  .FIELD  [3]5,   [2]3,   [2]2,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
00001e82 PC 4942495424		  4319  .BYTE   'IBIT$'
00001e87 PC 4e3800		  4320  .BYTE   H'4E,H'38,H'00
				  4321
00001e8a PC 9c351dc0		  4322  .FIELD  [3]4,   [2]3,   [2]0,   [5]11,  [5]19,  [5]14,  [5]0,   [CAT]LNG_I
00001e8e PC 43565450		  4323  .BYTE   'CVTP'
00001e92 PC 6e0300		  4324  .BYTE   H'6E,H'03,H'00
				  4325
00001e95 PC dce90000		  4326  .FIELD  [3]4,   [2]3,   [2]2,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
00001e99 PC 46465324		  4327  .BYTE   'FFS$'
00001e9d PC 6e0400		  4328  .BYTE   H'6E,H'04,H'00
				  4329
00001ea0 PC dc351dc6		  4330  .FIELD  [3]4,   [2]3,   [2]2,   [5]11,  [5]19,  [5]14,  [5]24,  [CAT]LNG_I
00001ea4 PC 45585424		  4331  .BYTE   'EXT$'
00001ea8 PC 2e0000		  4332  .BYTE   H'2E,H'00,H'00
				  4333
00001eab PC dde930a0		  4334  .FIELD  [3]5,   [2]3,   [2]2,   [5]19,  [5]14,  [5]24,  [5]0,   [CAT]SHR_I
00001eaf PC 4558545324		  4335  .BYTE   'EXTS$'
00001eb4 PC ce0c00		  4336  .BYTE   H'CE,H'0C,H'00
				  4337
00001eb7 PC dc351dc6		  4338  .FIELD  [3]4,   [2]3,   [2]2,   [5]11,  [5]19,  [5]14,  [5]24,  [CAT]LNG_I
00001ebb PC 494e5324		  4339  .BYTE   'INS$'
00001ebf PC ae0000		  4340  .BYTE   H'AE,H'00,H'00
				  4341
00001ec2 PC dde930a0		  4342  .FIELD  [3]5,   [2]3,   [2]2,   [5]19,  [5]14,  [5]24,  [5]0,   [CAT]SHR_I
00001ec6 PC 494e535324		  4343  .BYTE   'INSS$'
00001ecb PC ce0800		  4344  .BYTE   H'CE,H'08,H'00
				  4345
00001ece PC dd070060		  4346  .FIELD  [3]5,   [2]3,   [2]2,   [5]15,  [5]0,   [5]0,   [5]0,   [CAT]STRNG
00001ed2 PC 434d505324		  4347  .BYTE   'CMPS$'
00001ed7 PC 0e0400		  4348  .BYTE   H'0E,H'04,H'00
				  4349
00001eda PC dd070060		  4350  .FIELD  [3]5,   [2]3,   [2]2,   [5]15,  [5]0,   [5]0,   [5]0,   [CAT]STRNG
00001ede PC 434d505354		  4351  .BYTE   'CMPST'
00001ee3 PC 0e8400		  4352  .BYTE   H'0E,H'84,H'00
				  4353
00001ee6 PC dd070060		  4354  .FIELD  [3]5,   [2]3,   [2]2,   [5]15,  [5]0,   [5]0,   [5]0,   [CAT]STRNG
00001eea PC 4d4f565324		  4355  .BYTE   'MOVS$'
00001eef PC 0e0000		  4356  .BYTE   H'0E,H'00,H'00
				  4357
00001ef2 PC dd070060		  4358  .FIELD  [3]5,   [2]3,   [2]2,   [5]15,  [5]0,   [5]0,   [5]0,   [CAT]STRNG
00001ef6 PC 4d4f565354		  4359  .BYTE   'MOVST'
00001efb PC 0e8000		  4360  .BYTE   H'0E,H'80,H'00
				  4361
00001efe PC dd070060		  4362  .FIELD  [3]5,   [2]3,   [2]2,   [5]15,  [5]0,   [5]0,   [5]0,   [CAT]STRNG
00001f02 PC 534b505324		  4363  .BYTE   'SKPS$'
00001f07 PC 0e0c00		  4364  .BYTE   H'0E,H'0C,H'00
				  4365
00001f0a PC dd070060		  4366  .FIELD  [3]5,   [2]3,   [2]2,   [5]15,  [5]0,   [5]0,   [5]0,   [CAT]STRNG
00001f0e PC 534b505354		  4367  .BYTE   'SKPST'
00001f13 PC 0e8c00		  4368  .BYTE   H'0E,H'8C,H'00
				  4369
00001f16 PC dde90000		  4370  .FIELD  [3]5,   [2]3,   [2]2,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
00001f1a PC 4144445024		  4371  .BYTE   'ADDP$'
00001f1f PC 4e3c00		  4372  .BYTE   H'4E,H'3C,H'00
				  4373
00001f22 PC dde90000		  4374  .FIELD  [3]5,   [2]3,   [2]2,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
00001f26 PC 5355425024		  4375  .BYTE   'SUBP$'
00001f2b PC 4e2c00		  4376  .BYTE   H'4E,H'2C,H'00
				  4377
00001f2e PC de351dc0		  4378  .FIELD  [3]6,   [2]3,   [2]2,   [5]11,  [5]19,  [5]14,  [5]0,   [CAT]ARAY_I
00001f32 PC 434845434b24	  4379  .BYTE   'CHECK$'                                                        
00001f38 PC ee0000		  4380  .BYTE   H'EE,H'00,H'00
				  4381
00001f3b PC de351dc0		  4382  .FIELD  [3]6,   [2]3,   [2]2,   [5]11,  [5]19,  [5]14,  [5]0,   [CAT]ARAY_I
00001f3f PC 494e44455824	  4383  .BYTE   'INDEX$'
00001f45 PC 2e0400		  4384  .BYTE   H'2E,H'04,H'00
				  4385
00001f48 PC dde93018		  4386  .FIELD  [3]5,   [2]3,   [2]2,   [5]19,  [5]14,  [5]24,  [5]0,   [CAT]OP3_DISP
00001f4c PC 434d504d24		  4387  .BYTE   'CMPM$'
00001f51 PC ce0400		  4388  .BYTE   H'CE,H'04,H'00
				  4389
00001f54 PC dde93018		  4390  .FIELD  [3]5,   [2]3,   [2]2,   [5]19,  [5]14,  [5]24,  [5]0,   [CAT]OP3_DISP
00001f58 PC 4d4f564d24		  4391  .BYTE   'MOVM$'
00001f5d PC ce0000		  4392  .BYTE   H'CE,H'00,H'00
				  4393
00001f60 PC 94050000		  4394  .FIELD  [3]4,   [2]2,   [2]0,   [5]11,  [5]0,   [5]0,   [5]0,   [CAT]0
00001f64 PC 4a554d50		  4395  .BYTE   'JUMP'
00001f68 PC 7f02		  4396  .BYTE   H'7F,H'02
				  4397
00001f6a PC 0b040008		  4398  .FIELD  [3]3,   [2]1,   [2]0,   [5]8,   [5]0,   [5]0,   [5]0,   [CAT]OP1_DISP
00001f6e PC 424551		  4399  .BYTE   'BEQ'
00001f71 PC 0a			  4400  .BYTE   H'0A
				  4401
00001f72 PC 0b040008		  4402  .FIELD  [3]3,   [2]1,   [2]0,   [5]8,   [5]0,   [5]0,   [5]0,   [CAT]OP1_DISP
00001f76 PC 424e45		  4403  .BYTE   'BNE'
00001f79 PC 1a			  4404  .BYTE   H'1A
				  4405
00001f7a PC 0b040008		  4406  .FIELD  [3]3,   [2]1,   [2]0,   [5]8,   [5]0,   [5]0,   [5]0,   [CAT]OP1_DISP
00001f7e PC 424353		  4407  .BYTE   'BCS'
00001f81 PC 2a			  4408  .BYTE   H'2A
				  4409
00001f82 PC 0b040008		  4410  .FIELD  [3]3,   [2]1,   [2]0,   [5]8,   [5]0,   [5]0,   [5]0,   [CAT]OP1_DISP
00001f86 PC 424343		  4411  .BYTE   'BCC'
00001f89 PC 3a			  4412  .BYTE   H'3A
				  4413
00001f8a PC 0b040008		  4414  .FIELD  [3]3,   [2]1,   [2]0,   [5]8,   [5]0,   [5]0,   [5]0,   [CAT]OP1_DISP
00001f8e PC 424849		  4415  .BYTE   'BHI'
00001f91 PC 4a			  4416  .BYTE   H'4A
				  4417
00001f92 PC 0b040008		  4418  .FIELD  [3]3,   [2]1,   [2]0,   [5]8,   [5]0,   [5]0,   [5]0,   [CAT]OP1_DISP
00001f96 PC 424c53		  4419  .BYTE   'BLS'
00001f99 PC 5a			  4420  .BYTE   H'5A
				  4421
00001f9a PC 0b040008		  4422  .FIELD  [3]3,   [2]1,   [2]0,   [5]8,   [5]0,   [5]0,   [5]0,   [CAT]OP1_DISP
00001f9e PC 424754		  4423  .BYTE   'BGT'
00001fa1 PC 6a			  4424  .BYTE   H'6A
				  4425
00001fa2 PC 0b040008		  4426  .FIELD  [3]3,   [2]1,   [2]0,   [5]8,   [5]0,   [5]0,   [5]0,   [CAT]OP1_DISP
00001fa6 PC 424c45		  4427  .BYTE   'BLE'
00001fa9 PC 7a			  4428  .BYTE   H'7A
				  4429
00001faa PC 0b040008		  4430  .FIELD  [3]3,   [2]1,   [2]0,   [5]8,   [5]0,   [5]0,   [5]0,   [CAT]OP1_DISP
00001fae PC 424653		  4431  .BYTE   'BFS'
00001fb1 PC 8a			  4432  .BYTE   H'8A
				  4433
00001fb2 PC 0b040008		  4434  .FIELD  [3]3,   [2]1,   [2]0,   [5]8,   [5]0,   [5]0,   [5]0,   [CAT]OP1_DISP
00001fb6 PC 424643		  4435  .BYTE   'BFC'
00001fb9 PC 9a			  4436  .BYTE   H'9A
				  4437
00001fba PC 0b040008		  4438  .FIELD  [3]3,   [2]1,   [2]0,   [5]8,   [5]0,   [5]0,   [5]0,   [CAT]OP1_DISP
00001fbe PC 424c4f		  4439  .BYTE   'BLO'
00001fc1 PC aa			  4440  .BYTE   H'AA
				  4441
00001fc2 PC 0b040008		  4442  .FIELD  [3]3,   [2]1,   [2]0,   [5]8,   [5]0,   [5]0,   [5]0,   [CAT]OP1_DISP
00001fc6 PC 424853		  4443  .BYTE   'BHS'
00001fc9 PC ba			  4444  .BYTE   H'BA
				  4445
00001fca PC 0b040008		  4446  .FIELD  [3]3,   [2]1,   [2]0,   [5]8,   [5]0,   [5]0,   [5]0,   [CAT]OP1_DISP
00001fce PC 424c54		  4447  .BYTE   'BLT'
00001fd1 PC ca			  4448  .BYTE   H'CA
				  4449
00001fd2 PC 0b040008		  4450  .FIELD  [3]3,   [2]1,   [2]0,   [5]8,   [5]0,   [5]0,   [5]0,   [CAT]OP1_DISP
00001fd6 PC 424745		  4451  .BYTE   'BGE'
00001fd9 PC da			  4452  .BYTE   H'DA
				  4453
00001fda PC 0a040008		  4454  .FIELD  [3]2,   [2]1,   [2]0,   [5]8,   [5]0,   [5]0,   [5]0,   [CAT]OP1_DISP
00001fde PC 4252		  4455  .BYTE   'BR'
00001fe0 PC ea			  4456  .BYTE   H'EA
				  4457
00001fe1 PC b5050000		  4458  .FIELD  [3]5,   [2]2,   [2]1,   [5]11,  [5]0,   [5]0,   [5]0,   [CAT]0
00001fe5 PC 4341534524		  4459  .BYTE   'CASE$'
00001fea PC 7c07		  4460  .BYTE   H'7C,H'07
				  4461
00001fec PC b4b32038		  4462  .FIELD  [3]4,   [2]2,   [2]1,   [5]7,   [5]11,  [5]16,  [5]0,   [CAT]ACB_INS
00001ff0 PC 41434224		  4463  .BYTE   'ACB$'
00001ff4 PC 4c00		  4464  .BYTE   H'4C,H'00
				  4465
00001ff6 PC 93050000		  4466  .FIELD  [3]3,   [2]2,   [2]0,   [5]11,  [5]0,   [5]0,   [5]0,   [CAT]0
00001ffa PC 4a5352		  4467  .BYTE   'JSR'
00001ffd PC 7f06		  4468  .BYTE   H'7F,H'06
				  4469
00001fff PC 0b040008		  4470  .FIELD  [3]3,   [2]1,   [2]0,   [5]8,   [5]0,   [5]0,   [5]0,   [CAT]OP1_DISP
00002003 PC 425352		  4471  .BYTE   'BSR'
00002006 PC 02			  4472  .BYTE   H'02
				  4473
00002007 PC 0b040008		  4474  .FIELD  [3]3,   [2]1,   [2]0,   [5]8,   [5]0,   [5]0,   [5]0,   [CAT]OP1_DISP
0000200b PC 524554		  4475  .BYTE   'RET'
0000200e PC 12			  4476  .BYTE   H'12
				  4477
0000200f PC 0b040008		  4478  .FIELD  [3]3,   [2]1,   [2]0,   [5]8,   [5]0,   [5]0,   [5]0,   [CAT]OP1_DISP
00002013 PC 435850		  4479  .BYTE   'CXP'
00002016 PC 22			  4480  .BYTE   H'22
				  4481
00002017 PC 94050000		  4482  .FIELD  [3]4,   [2]2,   [2]0,   [5]11,  [5]0,   [5]0,   [5]0,   [CAT]0
0000201b PC 43585044		  4483  .BYTE   'CXPD'
0000201f PC 7f00		  4484  .BYTE   H'7F,H'00
				  4485
00002021 PC 0b040008		  4486  .FIELD  [3]3,   [2]1,   [2]0,   [5]8,   [5]0,   [5]0,   [5]0,   [CAT]OP1_DISP
00002025 PC 525850		  4487  .BYTE   'RXP'
00002028 PC 32			  4488  .BYTE   H'32
				  4489
00002029 PC 0c040008		  4490  .FIELD  [3]4,   [2]1,   [2]0,   [5]8,   [5]0,   [5]0,   [5]0,   [CAT]OP1_DISP
0000202d PC 52455454		  4491  .BYTE   'RETT'
00002031 PC 42			  4492  .BYTE   H'42
				  4493
00002032 PC 0c000000		  4494  .FIELD  [3]4,   [2]1,   [2]0,   [5]0,   [5]0,   [5]0,   [5]0,   [CAT]0
00002036 PC 52455449		  4495  .BYTE   'RETI'
0000203a PC 52			  4496  .BYTE   H'52
				  4497
0000203b PC b6050000		  4498  .FIELD  [3]6,   [2]2,   [2]1,   [5]11,  [5]0,   [5]0,   [5]0,   [CAT]0
0000203f PC 41444a535024	  4499  .BYTE   'ADJSP$'
00002045 PC 7c05		  4500  .BYTE   H'7C,H'05
				  4501
00002047 PC b7050000		  4502  .FIELD  [3]7,   [2]2,   [2]1,   [5]11,  [5]0,   [5]0,   [5]0,   [CAT]0
0000204b PC 42494350535224	  4503  .BYTE   'BICPSR$'
00002052 PC 7c01		  4504  .BYTE   H'7C,H'01
				  4505
00002054 PC b7050000		  4506  .FIELD  [3]7,   [2]2,   [2]1,   [5]11,  [5]0,   [5]0,   [5]0,   [CAT]0
00002058 PC 42495350535224	  4507  .BYTE   'BISPSR$'
0000205f PC 7c03		  4508  .BYTE   H'7C,H'03
				  4509
00002061 PC 14040040		  4510  .FIELD  [3]4,   [2]2,   [2]0,   [5]8,   [5]0,   [5]0,   [5]0,   [CAT]REGLIST
00002065 PC 53415645		  4511  .BYTE   'SAVE'
00002069 PC 6200		  4512  .BYTE   H'62,H'00
				  4513
0000206b PC 17040040		  4514  .FIELD  [3]7,   [2]2,   [2]0,   [5]8,   [5]0,   [5]0,   [5]0,   [CAT]REGLIST
0000206f PC 524553544f5245	  4515  .BYTE   'RESTORE'
00002076 PC 7200		  4516  .BYTE   H'72,H'00
				  4517
00002078 PC 15040150		  4518  .FIELD  [3]5,   [2]2,   [2]0,   [5]8,   [5]16,  [5]0,   [5]0,   [CAT]ENT_I
0000207c PC 454e544552		  4519  .BYTE   'ENTER'
00002081 PC 8200		  4520  .BYTE   H'82,H'00
				  4521
00002083 PC 14040040		  4522  .FIELD  [3]4,   [2]2,   [2]0,   [5]8,   [5]0,   [5]0,   [5]0,   [CAT]REGLIST
00002087 PC 45584954		  4523  .BYTE   'EXIT'
0000208b PC 9200		  4524  .BYTE   H'92,H'00
				  4525
0000208d PC b4b30080		  4526  .FIELD  [3]4,   [2]2,   [2]1,   [5]7,   [5]11,  [5]0,   [5]0,   [CAT]SPC_REG
00002091 PC 4c505224		  4527  .BYTE   'LPR$'
00002095 PC 6c00		  4528  .BYTE   H'6C,H'00
				  4529
00002097 PC b4b30080		  4530  .FIELD  [3]4,   [2]2,   [2]1,   [5]7,   [5]11,  [5]0,   [5]0,   [CAT]SPC_REG
0000209b PC 53505224		  4531  .BYTE   'SPR$'
0000209f PC 2c00		  4532  .BYTE   H'2C,H'00
				  4533
000020a1 PC 9e070080		  4534  .FIELD  [3]6,   [2]3,   [2]0,   [5]15,  [5]0,   [5]0,   [5]0,   [CAT]SPC_REG
000020a5 PC 534554434647	  4535  .BYTE   'SETCFG'
000020ab PC 0e8800		  4536  .BYTE   H'0E,H'88,H'00
				  4537
000020ae PC 0b000000		  4538  .FIELD  [3]3,   [2]1,   [2]0,   [5]0,   [5]0,   [5]0,   [5]0,   [CAT]0
000020b2 PC 425054		  4539  .BYTE   'BPT'
000020b5 PC f2			  4540  .BYTE   H'F2
				  4541
000020b6 PC 0c000000		  4542  .FIELD  [3]4,   [2]1,   [2]0,   [5]0,   [5]0,   [5]0,   [5]0,   [CAT]0
000020ba PC 464c4147		  4543  .BYTE   'FLAG'
000020be PC d2			  4544  .BYTE   H'D2
				  4545
000020bf PC 0b000000		  4546  .FIELD  [3]3,   [2]1,   [2]0,   [5]0,   [5]0,   [5]0,   [5]0,   [CAT]0
000020c3 PC 535643		  4547  .BYTE   'SVC'
000020c6 PC e2			  4548  .BYTE   H'E2
				  4549
000020c7 PC 0b000000		  4550  .FIELD  [3]3,   [2]1,   [2]0,   [5]0,   [5]0,   [5]0,   [5]0,   [CAT]0
000020cb PC 4e4f50		  4551  .BYTE   'NOP'
000020ce PC a2			  4552  .BYTE   H'A2
				  4553
000020cf PC 0c000000		  4554  .FIELD  [3]4,   [2]1,   [2]0,   [5]0,   [5]0,   [5]0,   [5]0,   [CAT]0
000020d3 PC 57414954		  4555  .BYTE   'WAIT'
000020d7 PC b2			  4556  .BYTE   H'B2
				  4557
000020d8 PC 9b370180		  4558  .FIELD  [3]3,   [2]3,   [2]0,   [5]15,  [5]19,  [5]0,   [5]0,   [CAT]SPC_REG
000020dc PC 4c4d52		  4559  .BYTE   'LMR'
000020df PC 1e0b00		  4560  .BYTE   H'1E,H'0B,H'00
				  4561
000020e2 PC 9b370180		  4562  .FIELD  [3]3,   [2]3,   [2]0,   [5]15,  [5]19,  [5]0,   [5]0,   [CAT]SPC_REG
000020e6 PC 534d52		  4563  .BYTE   'SMR'
000020e9 PC 1e0f00		  4564  .BYTE   H'1E,H'0F,H'00
				  4565
000020ec PC 9d090000		  4566  .FIELD  [3]5,   [2]3,   [2]0,   [5]19,  [5]0,   [5]0,   [5]0,   [CAT]0
000020f0 PC 524456414c		  4567  .BYTE   'RDVAL'
000020f5 PC 1e0300		  4568  .BYTE   H'1E,H'03,H'00
				  4569
000020f8 PC 9d090000		  4570  .FIELD  [3]5,   [2]3,   [2]0,   [5]19,  [5]0,   [5]0,   [5]0,   [CAT]0
000020fc PC 575256414c		  4571  .BYTE   'WRVAL'
00002101 PC 1e0700		  4572  .BYTE   H'1E,H'07,H'00
				  4573
00002104 PC dee90000		  4574  .FIELD  [3]6,   [2]3,   [2]2,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
00002108 PC 4d4f56535524	  4575  .BYTE   'MOVSU$'
0000210e PC ae0c00		  4576  .BYTE   H'AE,H'0C,H'00
				  4577
00002111 PC dee90000		  4578  .FIELD  [3]6,   [2]3,   [2]2,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
00002115 PC 4d4f56555324	  4579  .BYTE   'MOVUS$'
0000211b PC ae1c00		  4580  .BYTE   H'AE,H'1C,H'00
				  4581
0000211e PC 9c090000		  4582  .FIELD  [3]4,   [2]3,   [2]0,   [5]19,  [5]0,   [5]0,   [5]0,   [CAT]0
00002122 PC 4c465352		  4583  .BYTE   'LFSR'
00002126 PC 3e0f00		  4584  .BYTE   H'3E,H'0F,H'00
				  4585
00002129 PC 1c070000		  4586  .FIELD  [3]4,   [2]3,   [2]0,   [5]14,  [5]0,   [5]0,   [5]0,   [CAT]0
0000212d PC 53465352		  4587  .BYTE   'SFSR'
00002131 PC 3e3700		  4588  .BYTE   H'3E,H'37,H'00
				  4589
00002134 PC 9de90000		  4590  .FIELD  [3]5,   [2]3,   [2]0,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
00002138 PC 4d4f564c46		  4591  .BYTE   'MOVLF'
0000213d PC 3e1600		  4592  .BYTE   H'3E,H'16,H'00
				  4593
00002140 PC 9de90000		  4594  .FIELD  [3]5,   [2]3,   [2]0,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
00002144 PC 4d4f56464c		  4595  .BYTE   'MOVFL'
00002149 PC 3e1b00		  4596  .BYTE   H'3E,H'1B,H'00
				  4597
0000214c PC dfe90000		  4598  .FIELD  [3]7,   [2]3,   [2]2,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
00002150 PC 524f554e442324	  4599  .BYTE   'ROUND#$'
00002157 PC 3e2000		  4600  .BYTE   H'3E,H'20,H'00
				  4601
0000215a PC dfe90000		  4602  .FIELD  [3]7,   [2]3,   [2]2,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
0000215e PC 5452554e432324	  4603  .BYTE   'TRUNC#$'
00002165 PC 3e2800		  4604  .BYTE   H'3E,H'28,H'00
				  4605
00002168 PC dfe90000		  4606  .FIELD  [3]7,   [2]3,   [2]2,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
0000216c PC 464c4f4f522324	  4607  .BYTE   'FLOOR#$'
00002173 PC 3e3800		  4608  .BYTE   H'3E,H'38,H'00
				  4609
00002176 PC dde90000		  4610  .FIELD  [3]5,   [2]3,   [2]2,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
0000217a PC 4d4f562423		  4611  .BYTE   'MOV$#'
0000217f PC 3e0000		  4612  .BYTE   H'3E,H'00,H'00
				  4613
00002182 PC 9ce90000		  4614  .FIELD  [3]4,   [2]3,   [2]0,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
00002186 PC 41444421		  4615  .BYTE   'ADD!'
0000218a PC be0000		  4616  .BYTE   H'BE,H'00,H'00
				  4617
0000218d PC 9ce90000		  4618  .FIELD  [3]4,   [2]3,   [2]0,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
00002191 PC 53554221		  4619  .BYTE   'SUB!'
00002195 PC be1000		  4620  .BYTE   H'BE,H'10,H'00
				  4621
00002198 PC 9ce90000		  4622  .FIELD  [3]4,   [2]3,   [2]0,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
0000219c PC 4d554c21		  4623  .BYTE   'MUL!'
000021a0 PC be3000		  4624  .BYTE   H'BE,H'30,H'00
				  4625
000021a3 PC 9ce90000		  4626  .FIELD  [3]4,   [2]3,   [2]0,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
000021a7 PC 44495621		  4627  .BYTE   'DIV!'
000021ab PC be2000		  4628  .BYTE   H'BE,H'20,H'00
				  4629
000021ae PC 9ce90000		  4630  .FIELD  [3]4,   [2]3,   [2]0,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
000021b2 PC 4d4f5621		  4631  .BYTE   'MOV!'
000021b6 PC be0400		  4632  .BYTE   H'BE,H'04,H'00
				  4633
000021b9 PC 9ce90000		  4634  .FIELD  [3]4,   [2]3,   [2]0,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
000021bd PC 4e454721		  4635  .BYTE   'NEG!'
000021c1 PC be1400		  4636  .BYTE   H'BE,H'14,H'00
				  4637
000021c4 PC 9ce90000		  4638  .FIELD  [3]4,   [2]3,   [2]0,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
000021c8 PC 41425321		  4639  .BYTE   'ABS!'
000021cc PC be3400		  4640  .BYTE   H'BE,H'34,H'00
				  4641
000021cf PC 9ce90000		  4642  .FIELD  [3]4,   [2]3,   [2]0,   [5]19,  [5]14,  [5]0,   [5]0,   [CAT]0
000021d3 PC 434d5021		  4643  .BYTE   'CMP!'
000021d7 PC be0800		  4644  .BYTE   H'BE,H'08,H'00    
				  4645
				  4647
				  4648  ;       SUBROUTINE      SYM_SRCH
				  4649  ;R0=START OF SYMBOL
				  4650  ;RESULT IS RETURNED IN SYM_TAB AND BOOLEAN IN S_FOUND
				  4651  SYM_SRCH:
000021da PC 62c0		  4652          SAVE    [R6,R7]                 ;SAVE TWO USED REGS
000021dc PC 5cd08288		  4653          MOVQB   FALSE, S_FOUND          ;ASSUME NOT THERE
000021e0 PC 97d1833a		  4654          MOVD    SYM_TAB, R6             ;START OF SYMBOLS
000021e4 PC d5a103e8		  4655          MOVW    1000, R7                ;LOOP SAFETY VALUE
000021e8 PC 9f777d		  4656  SYM_SR: CMPQD   -1, -3(R6)              ;IF END OF TABLE THEN NOT FOUND
000021eb PC 0a26		  4657          BEQ     NOT_FND:B
000021ed PC 854b0079		  4658          CMPW    0(R1), -7(R6)           ;ELSE CHECK SYMBOL NAME 
000021f1 PC 0a09		  4659          BEQ     FND_SYM:B               ;IF EQUAL THEN FOUND
000021f3 PC 0f34		  4660          ADDQD   -8, R6                  ;ELSE INDEX TO NEXT ENTRY
000021f5 PC cd3f73		  4661          ACBW    -1, R7, SYM_SR          ;IF STILL SANE TRY AGAIN
000021f8 PC ea19		  4662          BR      NOT_FND:B               ;ELSE NOT FOUND
000021fa PC dcd08288		  4663  FND_SYM:MOVQB   TRUE, S_FOUND           ;SET FOUND FLAG AND GET VALUE
000021fe PC 97767d8289		  4664          MOVD    -3(R6), SYM_VAL
00002203 PC 94767c825e		  4665          MOVB    -4(R6), SYM_TYPE        ;IDENTIFY TYPE OF SYMBOL
00002208 PC 4e8ba60000001f8289	  4666          CBITD   31, SYM_VAL             ;CLEAR SB BASE FLAG BIT
00002211 PC 7203		  4667  NOT_FND:RESTORE [R6,R7]
00002213 PC 1200		  4668          RET     0
				  4669
				  4670  ;
				  4671  ;       SUBROUTINE      MOV(E) (TO) (NEX)T
				  4672  ;
				  4673  ; R1=START OF CURRENT OPERAND   INPUT: ADDR
				  4674  ; R3=END OF CURRENT OPERAND     OUTPUT: ADDR
				  4675  ; R4=START OF NEXT OPERAND      OUTPUT: ADDR
				  4676  ;
				  4677  MOVTONXT:
00002215 PC d708		  4678          MOVD    R1,R3           ;INIT START TO END
00002217 PC 1719		  4679          MOVD    R3,R4
				  4680  ONEOVER:
00002219 PC 045d0128		  4681          CMPB    1(R3),"("       ;IF NEXT CHAR = (
				  4682                                  ;THEN DISP2 IS POSSIBLE
0000221d PC 0a2e		  4683          BEQ     DONEF:B         ;SET R4 TO NEXT AND EXIT
0000221f PC 045d012c		  4684          CMPB    1(R3),","       ;ELSE IF NEXT CHAR = ,
00002223 PC 0a28		  4685          BEQ     DONE:B          ;THEN DONE
00002225 PC 045d0120		  4686          CMPB    1(R3)," "       ;SPACES SIGNAL ENDLIN
00002229 PC 0a22		  4687          BEQ     DONE:B          ;FOR PACKED STRUCTURE OF PARSE DATA
0000222b PC 04a50805		  4688          CMPB    REGLIST, CAT    ;SKIP THIS IF OP IS 
0000222f PC 0a08		  4689          BEQ     NO_BRA:B        ;REGLIS
00002231 PC 045d015b		  4690          CMPB    1(R3),"["       ;ELSE IF NEXT CHAR = [
00002235 PC 0a16		  4691          BEQ     DONE:B          ;THEN DONE
00002237 PC 045d0129		  4692  NO_BRA: CMPB    1(R3),")"       ;ELSE IF NEXT CHAR = )
0000223b PC 0a0e		  4693          BEQ     DONEX:B         ;THEN DISP2 FOR EXT ADDR MODE
0000223d PC 871e827e		  4694          CMPD    R3,ENDLIN       ;IF EOL = TRUE THEN DONE
00002241 PC da0a		  4695          BGE     DONE:B          ;ELSE UPDATWE POINTERS AND LOOP 
00002243 PC 8f18		  4696          ADDQD   1,R3
00002245 PC 1719		  4697          MOVD    R3,R4
00002247 PC ea52		  4698          BR ONEOVER
				  4699
00002249 PC 8f20		  4700  DONEX:  ADDQD   1,R4            ;OFFSET FOR EXT ADDR MODE PARSE
				  4701
				  4702  DONEF:
0000224b PC 0f21		  4703  DONE:   ADDQD   2,R4            ;OFFSET TO NORMAL NEXT DISPLACEMENT
0000224d PC 1200		  4704          RET     0
				  4705
				  4706
				  4707  ;       SUBROUTINE VALU  --GET A VALUE
				  4708  ;
				  4709  ; R1=START OF VALU IN INPUYT STRING     INPUT: ADDR
				  4710  ; R3=END OF VALUE INPUT(FROM MOVTONXT)  INPUT: ADDR
				  4711  ; R5=THE VALUE OUTPUT:  DOUBLE INTEGER
				  4712  ;
				  4713  VALU:
0000224f PC 0246		  4714          BSR     MOVTONXT        ;GET END OF DATA STRING
00002251 PC 44a22200		  4715          CMPB    '"', 0(R1)      ;CHECK FOR ASCII STRING
00002255 PC 1a28		  4716          BNE     AN:B
00002257 PC 5f28		  4717          MOVQD   0, R5           ;ASCCII VALUE PADDE WITH 0
00002259 PC d708		  4718          MOVD    R1, R3          ;DO FOR AT MOST 4 CHARS
0000225b PC 0f1b		  4719          ADDQD   6, R3
0000225d PC d44d00		  4720  PUSH_A: MOVB    0(R1), TOS
00002260 PC 8f08		  4721          ADDQD   1, R1           ;PUSH ASCII CHAR ONTO STACK TO
00002262 PC 44a22200		  4722          CMPB    '"', 0(R1)      ;ACCOMPLISH IMAGE
00002266 PC 0a08		  4723          BEQ     ASCIT:B         ;REVERSAL
00002268 PC c708		  4724          CMPD    R1, R3          ;DO A SANITY CHECK
0000226a PC da04		  4725          BGE     ASCIT:B
0000226c PC ea71		  4726          BR      PUSH_A
0000226e PC d4b8		  4727  ASCIT:  MOVB    TOS, R3         ;POP CHARS UNTIL STATING CHAR IS FOUND
00002270 PC c4a022		  4728          CMPB    '"', R3         ;THEN DONE
00002273 PC 0a30		  4729          BEQ     NOT_PB:B        ;ELSE SHIFT AND OR
00002275 PC 4e57a108		  4730          LSHD    8, R5           ;MOST SIG CHAR BECOMES LEAST SIG CHAR FOR
00002279 PC 5819		  4731          ORB     R3, R5          ;CORRECT VALUE INTERPERTATION
0000227b PC ea73		  4732          BR      ASCIT   
0000227d PC d70d		  4733  AN:     MOVD    R1,TOS          ;VECIN
0000227f PC d71d		  4734          MOVD    R3,TOS          ;EOD
				  4735
00002281 PC 029d12		  4736          BSR     A_NUM
00002284 PC 57b9		  4737          MOVD    TOS,R5          ;GET THE VALUE
00002286 PC 1fd08313		  4738          CMPQD   FALSE, ERROR     ; CHECK FOR VALUE ERROR
0000228a PC 0a0b		  4739          BEQ     VAL_OK:B        ;OK FOR NO ERROR
0000228c PC 17d683130c		  4740          MOVD    ERROR,A_ERROR   ;ELSE SET FLAG AND ERROR TYPE
00002291 PC dcd08286		  4741          MOVQB   TRUE, ERR_FLG
00002295 PC 9cd0828d		  4742  VAL_OK: CMPQB   TRUE, PC_REL    ;CHECK FOR PC REL TYPE
00002299 PC 1a0a		  4743          BNE     NOT_PB:B        ;IF NOT PC REL THEN DON'T
0000229b PC 63d18282		  4744          SUBD    PC_ADDR, R5     ;CALCULATE OFFSET DISPLACEMENT
0000229f PC 43d1832f		  4745          ADDD    PROG_BASE, R5   ;DISP=PROG_BASE-PC_ADDR+XX(PC)
000022a3 PC 5cd0828d		  4746  NOT_PB: MOVQB   FALSE, PC_REL
000022a7 PC 1200		  4747          RET     0
				  4748
				  4749
				  4750  ;       SUBROUTINE MOVE A BYTE
				  4751  ;
				  4752  ;THIS ROUTINE MOVES A BYTE OF R5 TO THE APPROPRIATE
				  4753  ;DISPLACEMENT TABLE AREA AS POINTED TO BY R3
				  4754  ;FORMATS DISP AND IMMD VALUES TO CORRECT SEQUENCE
				  4755  ;
				  4756  ; R3=VEC TO DISPLACEMENT TABLE    INPUT: ADDR
				  4757  ; R7=VEC TO LENGTH TABLE   INPUT: ADDR
				  4758
				  4759  MOVABYT:
000022a9 PC 8c7800		  4760          ADDQB   1,0(R7)         ;UPDATE LENGTH
000022ac PC 4ed7a20800		  4761          LSHD    8,0(R3)         ;SHIFT UP ALL DISPLCEMENT BYTES
000022b1 PC d42a00		  4762          MOVB    R5,0(R3)        ;FILL VACANT BYTE WITH R5 BYTE
000022b4 PC 4e57a1f8		  4763          LSHD    -8,R5           ;OUTSHIFT THAT BYTE AND POSITION NEXT
000022b8 PC 1200		  4764          RET     0
				  4765
				  4766
				  4767
				  4768  ;       SUBROUTINE  (DISPN)PLACEMENT
				  4769  ;
				  4770  ;MOVES A DISPLACEMENT TO CORRECT TABLE AREA
				  4771  ; R6=INDEX TO DISPLACEMENT/LENGTH TABLE INPUT: INTEGER 0..3
				  4772  ; R5=THE DISPLACEMENT   INPTU: INTEGER
				  4773  ; R3=VEC TO DISPLACEMENT TABLE OUTPUT: ADDR
				  4774  ; R7=VEC TO LENGTH TAVLE OUTPTU: ADDR
				  4775  ;
				  4776
				  4777
000022ba PC e7f0d68236		  4778  DISP1:      ADDR        DISP1X[R6:D],R3         ;ADDRESS OF CURRENT OPERAND
				  4779                                                  ;DISP1 TABLE ENTRY
000022bf PC e7e1d68256		  4780              ADDR        LEN1[R6:B],R7           ;ADDR OF LENGTH
000022c4 PC ea0c		  4781              BR          DISPIT:B
				  4782
000022c6 PC e7f0d68246		  4783  DISP2:      ADDR        DISP2X[R6:D],R3         ;DISP2 TABLE ENTRY
				  4784
000022cb PC e7e1d6825a		  4785              ADDR        LEN2[R6:B],R7
				  4786
000022d0 PC 84a6018269		  4787  DISPIT:     CMPB        TRUE,DISPLACE           ;IF NOT A DISPLACEMENT
000022d5 PC 0a1a		  4788              BEQ         DISPLCR:B               ;THEN SET TO IMMO VALUE
000022d7 PC 9cd08278		  4789              CMPQB       TRUE,IMM_IS_BYT         ;ACCORDING TO I TYPE
000022db PC 0a8085		  4790              BEQ         MOVBYT:W        
000022de PC 9cd18268		  4791              CMPQB       DOUBLNG,ITYPE           ;IF ITYPE=DOUBLE
000022e2 PC 0a8075		  4792              BEQ         MOVDOUB:W               ;    THEN MOVE DOUBLE
000022e5 PC 9cd08268		  4793              CMPQB       WRDLONG,ITYPE           ;ELSE IF ITYPE=WORD
000022e9 PC 0a8074		  4794              BEQ         MOVWRD:W                ;    THEN MOVE WORD
000022ec PC ea8074		  4795              BR          MOVBYT:W                ;ELSE MOVE BYTE
				  4796
000022ef PC 072d00000000	  4797  DISPLCR:    CMPD        R5,0                    ;IF POSITIVE THEN
000022f5 PC da32		  4798              BGE         POSDISP:B               ;FORMAT POSITIVE DISPLACEMENT
000022f7 PC 9cd0828e		  4799              CMPQB       TRUE, DISP_B            ;CHECK FOR LRNGTH
000022fb PC 0a20		  4800              BEQ         N_BYT:B                 ;DIRECTIVE FROM SYMBOLS 
000022fd PC 9cd0828f		  4801              CMPQB       TRUE, DISP_W            ;OPERATION
00002301 PC 0a20		  4802              BEQ         NEGWRD:B
00002303 PC 9cd08290		  4803              CMPQB       TRUE, DISP_D
00002307 PC 0a8050		  4804              BEQ         MOVDOUB:W
				  4805                                                  ;ELSE DO NEG
0000230a PC 072dffffe000	  4806              CMPD        R5,-8192                ;IF L-8192 THEN
00002310 PC ca8047		  4807              BLT         MOVDOUB:W               ;    MOVE DOUBLE
				  4808
00002313 PC 072dffffffc0	  4809              CMPD        R5,-64                  ;ELSE IF LESS THAN -64
00002319 PC ca08		  4810              BLT         NEGWRD:B                ;MOVE WORD
0000231b PC 68a17f		  4811  N_BYT:      ANDB        H'7F,R5                 ;ELSE MOVE BYTE
0000231e PC ea8042		  4812              BR          MOVBYT:W
				  4813
00002321 PC 69a1bfff		  4814  NEGWRD:     ANDW        H'BFFF,R5
00002325 PC ea38		  4815              BR          MOVWRD:B                
				  4816
00002327 PC 9cd0828e		  4817  POSDISP:    CMPQB       TRUE, DISP_B            ;CHECK FOR LENGTH DIRECTIVE
0000232b PC 0a35		  4818              BEQ         MOVBYT:B
0000232d PC 9cd0828f		  4819              CMPQB       TRUE, DISP_W
00002331 PC 0a20		  4820              BEQ         POSWRD:B
00002333 PC 9cd08290		  4821              CMPQB       TRUE, DISP_D
00002337 PC 0a12		  4822              BEQ         POS_D:B
00002339 PC 072d0000003f	  4823              CMPD        R5,63                   ;CHECK FOR RANGE
0000233f PC 7a21		  4824              BLE         MOVBYT:B                ;AND FORMAT LENGTH
00002341 PC 072d00001fff	  4825              CMPD        R5,8191                 ;TELLING BITS
00002347 PC 7a0a		  4826              BLE         POSWRD:B                ;ACCORDINGLY
00002349 PC 5ba1c0000000	  4827  POS_D:      ORD         H'C0000000,R5           ;DOUBLE FORMAT
0000234f PC ea08		  4828              BR          MOVDOUB:B
				  4829
00002351 PC 59a18000		  4830  POSWRD:     ORW         H'8000,R5               ;WORD FORMAT
00002355 PC ea08		  4831              BR          MOVWRD:B
				  4832
00002357 PC 02bf52		  4833  MOVDOUB:    BSR         MOVABYT                 ;MOVE 4 BYTES
0000235a PC 02bf4f		  4834              BSR         MOVABYT
0000235d PC 02bf4c		  4835  MOVWRD:     BSR         MOVABYT                 ;MOVE 2 BYTES           
00002360 PC 02bf49		  4836  MOVBYT:     BSR         MOVABYT                 ;MOVE 1 BYTE
00002363 PC 5fd0828e		  4837              MOVQD       FALSE, DISP_FLGS        ;CLEAR LENGTH DIRECTIVES
00002367 PC 1200		  4838              RET 0
				  4839
				  4840
				  4841  ;
				  4842  ;               ADDRESSING MODE TABLE
				  4843  ;
				  4844
00002369 PC 5230202052312020	  4845  MODTABX:    .BYTE       'R0  ','R1  '           ;REGISTER
00002371 PC 5232202052332020	  4846              .BYTE       'R2  ','R3  '
00002379 PC 5234202052352020	  4847              .BYTE       'R4  ','R5  '
00002381 PC 5236202052372020	  4848              .BYTE       'R6  ','R7  '
00002389 PC 2852302928523129	  4849              .BYTE       '(R0)','(R1)'           ;REGISTER RELATIVE
00002391 PC 2852322928523329	  4850              .BYTE       '(R2)','(R3)'   
00002399 PC 2852342928523529	  4851              .BYTE       '(R4)','(R5)'
000023a1 PC 2852362928523729	  4852              .BYTE       '(R6)','(R7)'
000023a9 PC 46502929		  4853              .BYTE       'FP))'                  ;MEMORY RELATIVE REGISTER
000023ad PC 53502929		  4854              .BYTE       'SP))'
000023b1 PC 53422929		  4855              .BYTE       'SB))'
000023b5 PC 20202020		  4856  IMMX:       .BYTE       '    '                  ;IMMEDIATE
000023b9 PC 40202020		  4857  ABSX:       .BYTE       '@   '                  ;ABSOLUTE
000023bd PC 45585428		  4858  EXTX:       .BYTE       'EXT('                  ;EXTERNAL
000023c1 PC 544f5320		  4859  TOSX:       .BYTE       'TOS '                  ;TOP OF STACK
000023c5 PC 28465029		  4860              .BYTE       '(FP)'                  ;MEMORY REGISTER
000023c9 PC 28535029		  4861              .BYTE       '(SP)'
000023cd PC 28534229		  4862  SBX:        .BYTE       '(SB)'
000023d1 PC 28504329		  4863  PCX:        .BYTE       '(PC)'
				  4864
				  4865  NUMADM:     .EQU        ($ - MODTABX) /4
				  4866  IMMINX:     .EQU        (IMMX - MODTABX) /4
				  4867  ABSINX:     .EQU        (ABSX - MODTABX) /4
				  4868  EXTINX:         .equ    (EXTX - MODTABX) /4
				  4869  TOSINX:         .equ    (TOSX - MODTABX) /4
				  4870  SBINX:          .EQU    (SBX - MODTABX) /4
				  4871  PCINX:          .EQU    (PCX - MODTABX) /4
				  4872  ;ADDRESSING MODE CODING TABLE
				  4873
000023d5 PC 00			  4874  MODCODE:    .BYTE       H'0     ;R0
000023d6 PC 01			  4875              .BYTE       H'1     ;R1
000023d7 PC 02			  4876              .BYTE       H'2     ;R2
000023d8 PC 03			  4877              .BYTE       H'3     ;R3
000023d9 PC 04			  4878              .BYTE       H'4     ;R4
000023da PC 05			  4879              .BYTE       H'5     ;R5
000023db PC 06			  4880              .BYTE       H'6     ;R6
000023dc PC 07			  4881              .BYTE       H'7     ;R7
000023dd PC 08			  4882              .BYTE       H'8     ;(R0)
000023de PC 09			  4883              .BYTE       H'9     ;(R1)
000023df PC 0a			  4884              .BYTE       H'A     ;(R2)
000023e0 PC 0b			  4885              .BYTE       H'B     ;(R3)
000023e1 PC 0c			  4886              .BYTE       H'C     ;(R4)
000023e2 PC 0d			  4887              .BYTE       H'D     ;(R5)
000023e3 PC 0e			  4888              .BYTE       H'E     ;(R6)
000023e4 PC 0f			  4889              .BYTE       H'F     ;(R7)
000023e5 PC 10			  4890              .BYTE       H'10    ;(FP))
000023e6 PC 11			  4891              .BYTE       H'11    ;(SP))
000023e7 PC 12			  4892              .BYTE       H'12    ;(SB))
000023e8 PC 14			  4893              .BYTE       H'14    ;IMMED
000023e9 PC 15			  4894              .BYTE       H'15    ;@
000023ea PC 16			  4895              .BYTE       H'16    ;EXT
000023eb PC 17			  4896              .BYTE       H'17    ;TOS
000023ec PC 18			  4897              .BYTE       H'18    ;(FP)
000023ed PC 19			  4898              .BYTE       H'19    ;(SP)
000023ee PC 1a			  4899              .BYTE       H'1A    ;(SB)
000023ef PC 1b			  4900              .BYTE       H'1B    ;(PC)
000023f0 PC 1c			  4901  INX:        .BYTE       H'1C    ;INXB
000023f1 PC 1d			  4902              .BYTE       H'1D    ;INXW
000023f2 PC 1e			  4903              .BYTE       H'1E    ;INXD
000023f3 PC 1f			  4904              .BYTE       H'1F    ;INXQ
				  4905
				  4906  INXB:       .EQU    (INX-MODCODE)
				  4907
				  4908  ;       SUBTOUTINE SYMBOL
				  4909  ;THIS ROUTINE SERCHES THE SYBOL TABLE IN AN APPROPRIATE MANNER
				  4910  ;DEPENDING ON THE PASS. IT FIRST DETERMINS IF THE OPERAND IS A SYMBOL
				  4911  ;AND SETS A FLAG IF THAT TRUES, ELSE IT SIMPLY IS IGNORED
				  4912  ;INPUT IS R1 VECTOR TO OPERAND OUTPUT IS YES_SYM, SYM_VAL AND OR ERROR
000023f4 PC 5cd08287		  4913  SYMBOL:     MOVQB       FALSE, YES_SYM          ;ASSUME NOT A SYMBOL       
000023f8 PC 44a22b00		  4914              CMPB        '+', 0(R1)              ;IF SIGNED NUMBER THEN
000023fc PC 0a80d9		  4915              BEQ         NOSYM:W                 ;THEN NOT A SYMBOL
000023ff PC 44a22d00		  4916              CMPB        '-', 0(R1)              ;CHECK FOR BOTH
00002403 PC 0a80d2		  4917              BEQ         NOSYM:W                 ;+ AND - SIGN
00002406 PC 45a2274800		  4918              CMPW        H'2748, 0(R1)           ;SYMBOLS FALL THRU PARSE
0000240b PC 0a80ca		  4919              BEQ         NOSYM:W                 ;AS AN IMMED OR DISP. HERE
0000240e PC 45a2274400		  4920              CMPW        H'2744, 0(R1)           ;IS CHECK FOR H' OR D' NUMBER
00002413 PC 0a80c2		  4921              BEQ         NOSYM:W                 ;PREFFIX. THEN CHECK IF VALUE
				  4922                                                  ;STARTS WITH 0-9 IF TRUE THEN
				  4923                                                  ;ITSA NUMBER ELSE ITS IS
00002416 PC 44a23900		  4924              CMPB        '9', 0(R1)              ;TREATED AS A SYMBOL
0000241a PC da80bb		  4925              BGE         NOSYM:W
0000241d PC dcd08287		  4926  ASYM:       MOVQB       TRUE, YES_SYM           ;YES A SYMBOL
00002421 PC 94a01a		  4927              MOVB        PCINX, R2               ;SET ADDR MODE TO PC
00002424 PC 02bdb6		  4928              BSR         SYM_SRCH                ;SEE IF SYMBOL IS IN TABLE
00002427 PC 1cd08288		  4929              CMPQB       FALSE, S_FOUND          ;IF NOT FOUND TRY PC ROUTINE
0000242b PC 0a802e		  4930              BEQ         TRY_PCRT:W      
0000242e PC 9cd0825e		  4931              CMPQB       PC_SYM, SYM_TYPE        ;IF PC SYMBOL THEN DO 
00002432 PC 0a8027		  4932              BEQ         TRY_PCRT:W              ;PC ROUTINE
00002435 PC 94a019		  4933              MOVB        SBINX, R2               ;SET SB ADDR MODE
00002438 PC 5fd0828e		  4934              MOVQD       FALSE, DISP_FLGS        ;SEE IF SB VAL HAS LENGTH
0000243c PC 45a2423a02		  4935              CMPW        H'423A, 2(R1)           ;LENGTH DIRECTIVE
00002441 PC 1a06		  4936              BNE         OPT_W3:B    
00002443 PC dcd0828e		  4937              MOVQB       TRUE, DISP_B            ;CHECK FOR WRDLONG 
00002447 PC 45a2573a02		  4938  OPT_W3:     CMPW        H'573A, 2(R1)           ;(USED HEX FOR ASCII ASS PROB)
0000244c PC 1a06		  4939              BNE         N_OPT:B                 ;DEFAULT IS DOUBLE
0000244e PC dcd0828f		  4940              MOVQB       TRUE, DISP_W
00002452 PC 57d18289		  4941  N_OPT:      MOVD        SYM_VAL, R5             ;PASS VALUE
00002456 PC ea807f		  4942              BR          DISP__IT:W              ;DONE SB        
00002459 PC 9cd08338		  4943  TRY_PCRT:   CMPQB       PASS1, PASS_NUM         ;DETERMINE WHICH PASS
0000245d PC 0a804c		  4944              BEQ         DISP_ADD:W              ;PASS1 ROUTINE         
00002460 PC 9cd08288		  4945              CMPQB       TRUE, S_FOUND           ;PASS2 ACTION IF SYMBOL NOT 
00002464 PC 0a800f		  4946              BEQ         GET_LT:W                ;THEN SET ERR_FLG FOR UND
00002467 PC dcd08286		  4947              MOVQB       TRUE, ERR_FLG           ;SYMBOL AND ABORT THIS LINE
0000246b PC 27deb7de0c		  4948              ADDR        SYM_ERR3, A_ERROR       ;UND_SYM ERROR
00002470 PC ea8065		  4949              BR          NOSYM:W 
00002473 PC 87d682898282	  4950  GET_LT:     CMPD        SYM_VAL, PC_ADDR        ;IF SYM_VAL > PC_ADDR THEN
00002479 PC 7a26		  4951              BLE         PUT_IT:B                 ;THEN BACKWARD REF SYM
0000247b PC 5fd0828e		  4952              MOVQD       FALSE, DISP_FLGS        ;DISPLACEMNTS FLAGS FALSE
0000247f PC 45a2423a02		  4953              CMPW        H'423A, 2(R1)           ;BYTE LONG OPTIMAZATION OPTION
00002484 PC 1a06		  4954              BNE         OPT_W2:B    
00002486 PC dcd0828e		  4955              MOVQB       TRUE, DISP_B            ;CHECK FOR WRDLONG 
0000248a PC 45a2573a02		  4956  OPT_W2:     CMPW        H'573A, 2(R1)           ;(USED HEX FOR ASCII ASS PROB)
0000248f PC 1a06		  4957              BNE         OPT_D2:B                ;DEFAULT IS DOUBLE
00002491 PC dcd0828f		  4958              MOVQB       TRUE, DISP_W
				  4959  OPT_D2:                                         ;IF VALUE IS PRESENT THEN PUTIT
00002495 PC 1fd0828e		  4960              CMPQD       FALSE, DISP_FLGS
00002499 PC 1a06		  4961              BNE         PUT_IT:B    
0000249b PC dcd08290		  4962              MOVQB       TRUE, DISP_D
0000249f PC 57d18289		  4963  PUT_IT:     MOVD        SYM_VAL, R5             ;CALCULATE DISPLACMENT
000024a3 PC 63d18282		  4964              SUBD        PC_ADDR, R5
000024a7 PC ea2e		  4965              BR          DISP__IT:B
000024a9 PC 5fd0828e		  4966  DISP_ADD:   MOVQD       FALSE, DISP_FLGS        ;PASS1 ACTION
000024ad PC 9cd08288		  4967              CMPQB       TRUE, S_FOUND           ;IF SYMBOL IS BACKWARD REF THEN
000024b1 PC 0a6e		  4968              BEQ         PUT_IT                  ;YOU HAVE VALU ELSE CHECK FOR
000024b3 PC 45a2423a02		  4969              CMPW        H'423A, 2(R1)           ;BYTE LONG OPTIMAZATION OPTION
000024b8 PC 1a06		  4970              BNE         OPT_W:B    
000024ba PC dcd0828e		  4971              MOVQB       TRUE, DISP_B            ;CHECK FOR WRDLONG 
000024be PC 45a2573a02		  4972  OPT_W:      CMPW        H'573A, 2(R1)           ;(USED HEX FOR ASCII ASS PROB)
000024c3 PC 1a06		  4973              BNE         OPT_D:B                 ;DEFAULT IS DOUBLE
000024c5 PC dcd0828f		  4974              MOVQB       TRUE, DISP_W
				  4975  OPT_D:                                          ;IF VALUE IS PRESENT THEN PUTIT
000024c9 PC 5f28		  4976              MOVQD       0, R5
000024cb PC 1fd0828e		  4977              CMPQD       FALSE, DISP_FLGS
000024cf PC 1a06		  4978              BNE         DISP__IT:B
000024d1 PC dcd08290		  4979              MOVQB       TRUE, DISP_D
				  4980
				  4981
				  4982  NOSYM:
000024d5 PC 1200		  4983  DISP__IT:   RET         0                       
				  4984
				  4985
				  4986  ;SUBROUTINE OPERATE     
				  4987  ;PARCES AND ENCODES WITHIN BASIC CODE THE ADDRESSINENCE TO CODE TABLE
				  4988  ;R1=VEC TO START OF CURRENT OPERAND    INPUT:ADDR
				  4989  ;R6=TABLE INDEX     INPUT INT: 0..3
				  4990  ;R4=OFFSET TO CURRENT OPERAND FIELD    INPUT INT: 0..32
				  4991  ;R2 USED AS INDEX INTO MODE TABLES
				  4992
000024d7 PC 2ea04600826c05	  4993  OPERATE:    EXTB        R4,0(R0),OPFIELD,FLGTHO ;GET OPERAND START OFFSET
000024de PC 1cd0826c		  4994              CMPQB       FALSE,OPFIELD           ;IF ZERO YOU ARE DONE
000024e2 PC 0a8341		  4995              BEQ         FINISH:W
000024e5 PC 970e826f		  4996              MOVD        R1,OPSTRT               ;SAVE VEC IN TO OPERAND
000024e9 PC dcd08269		  4997              MOVQB       TRUE,DISPLACE           ;YES DO EXPECT A DISPLACEMENT 
000024ed PC 5cd08278		  4998              MOVQB       FALSE,IMM_IS_BYT        ;    (DEFAULT)
				  4999
000024f1 PC 1c30		  5000          CMPQB   0, R6           ;SEE IF THIS IS THE FIRST OPERAND
000024f3 PC 1a2d		  5001          BNE     OP2_CHK:B
000024f5 PC 84a6048275		  5002          CMPB    QUICK, CATGORY  ;SEE IF OPERAND IS QUICK TYP
000024fa PC 0a817d		  5003          BEQ     AQUICK:W
000024fd PC 84a6088275		  5004          CMPB    REGLIST, CATGORY        ; THIS SEQUENCE OF CODE CHECKS
00002502 PC 0a813a		  5005          BEQ     ALIST1:W         ;TO SEE IS A CERTAIN CATEGORY OF OPERAND
00002505 PC 84a60c8275		  5006          CMPB    STRNG, CATGORY  ;IS PRESENT INTHE PARSE LINE.
0000250a PC 0a817d		  5007          BEQ     ASTRNG:W        ; IF IT IS THE PROGRAM FLOW
0000250d PC 84a6108275		  5008          CMPB    SPC_REG, CATGORY        ;IS ALTERED TO DO THAT SPECIAL
00002512 PC 0a8165		  5009          BEQ     ASPC_REG:W      ;OPERATION.
00002515 PC 84a61c8275		  5010          CMPB    SWIP, CATGORY   ;IF NONE OF THE CONDITIONS ARE TRUE A NORMAL
0000251a PC 1a06		  5011          BNE     OP2_CHK:B       ;ADDR MODE CHECK IS DONE
0000251c PC dcd08278		  5012          MOVQB   TRUE, IMM_IS_BYT
				  5013  OP2_CHK:
				  5014  OP3_CHK:
00002520 PC 1c31		  5015          CMPQB   2, R6
00002522 PC 1a1b		  5016          BNE     OP4_CHK:B
00002524 PC 84a6188275		  5017          CMPB    LNG_I, CATGORY
00002529 PC 0a28		  5018          BEQ     A_ADDR_MODE:B
0000252b PC 84a6148275		  5019          CMPB    SHR_I, CATGORY
00002530 PC 0a81a6		  5020          BEQ     SHR_FLD:W
00002533 PC 84a6048275		  5021          CMPB    ACB_I, CATGORY  ;IF QUICK AND OP3_DISP THEN DISP
00002538 PC 0a19		  5022          BEQ     A_ADDR_MODE:B   ;   ELSE A BLOCK INST
0000253a PC ea80d9		  5023          BR      ABLOCK:W
				  5024  OP4_CHK:
0000253d PC 9c31		  5025          CMPQB   3, R6
0000253f PC 1a12		  5026          BNE     A_ADDR_MODE:B
00002541 PC 84a6188275		  5027          CMPB    LNG_I, CATGORY
00002546 PC 1a800b		  5028          BNE     A_ADDR_MODE:W
00002549 PC dcd08276		  5029          MOVQB   TRUE, OP_IS_DISP
0000254d PC dcd08279		  5030          MOVQB   TRUE, A_LONG_F
				  5031  A_ADDR_MODE:
00002551 PC 9cd08276		  5032                  CMPQB   TRUE, OP_IS_DISP
00002555 PC 0a81ea		  5033                  BEQ     OPISDISP:W              ;SEQUENCE OF UNARY ID TYPES
00002558 PC ce98a01b		  5034                  MOVZBD  PCINX+1, R2             ;CHECK FOR PROGRAM BASE
0000255c PC 44a22a00		  5035                  CMPB    '*', 0(R1)              ;DISPLACEMENT
00002560 PC 1a07		  5036                  BNE     ABS_CAS:B
00002562 PC 8f08		  5037                  ADDQD   1, R1                   ;OFFSET TO THE VALUE
00002564 PC ea8073		  5038                  BR      STAR_T:W                ;SKIP OPSTRT RESET
00002567 PC ce98a015		  5039  ABS_CAS:        movzbd  ABSINX+1,r2             ;CHECK FOR ABSOLUTE MODE
0000256b PC 44a24000		  5040                  cmpb    '@',0(r1)
0000256f PC 0a8064		  5041                  beq     CASMOD:w                ;CHECK FOR EXT( MODE
00002572 PC ce98a016		  5042                  movzbd  EXTINX+1,r2
00002576 PC cec44e00be4702	  5043                  cmpmb   0(r1),EXTX,3
0000257d PC 0a8056		  5044                  beq     CASMOD:w                ;CHECK FOR TOS
00002580 PC ce98a017		  5045                  movzbd  TOSINX+1,r2
00002584 PC cec44e00be3d02	  5046                  cmpmb   0(r1),TOSX,3
0000258b PC 0a8048		  5047                  beq     CASMOD:w
				  5048
0000258e PC ce98a008		  5049                  movzbd  8,r2                    ;CHECK FOR THE EIGHT REGS
00002592 PC ce844fda00bdd301	  5050  NX_R:           cmpmb   0(r1),MODTABX -4[r2:d],2
0000259a PC 0a39		  5051                  beq     CASMOD:b
0000259c PC cc1776		  5052                  acbb    -1,r2,NX_R
				  5053
				  5054
				  5055  nx_chr:                                         ;ELSE INIT MODE COUNTER
0000259f PC ce98a01b		  5056              MOVZBD      NUMADM ,R2              ;    TO MAX
				  5057
000025a3 PC ce844fda00bdc203	  5058  modwalk:        cmpmb   0(r1),MODTABX -4[r2:d],4
000025ab PC 1a13		  5059                  bne     NX_MOD:b                ;CHECK FOR FINAL PARSE OF
000025ad PC 044d0429		  5060                  cmpb    4(r1),')'               ;FRAME MEM RELATIVE
000025b1 PC 0a0d		  5061                  beq     NX_MOD:b                ;TYPE
000025b3 PC 84a01b		  5062                  CMPB    PCINX+1, R2             ;CHECK FOR PCREL TYPE
000025b6 PC 1a1d		  5063                  BNE     CASMOD:B                ;IF TRUE THEN SET PCREL FLAG
000025b8 PC dcd0828d		  5064                  MOVQB   TRUE, PC_REL
000025bc PC ea17		  5065                  br      CASMOD:b
000025be PC cc1765		  5066  NX_MOD:         acbb    -1,r2,modwalk
				  5067
000025c1 PC 8f08		  5068              ADDQD       1,R1                    ;MOVE SEARCH FIELD OVER 1 CHAR
000025c3 PC 044d002c		  5069              CMPB        0(R1),','               ;CHECK IF END OF OPERAND FIELD
000025c7 PC 0a08		  5070              BEQ         IMMSET:B                ;IF TRUE THEN IMMD MODE
000025c9 PC 870e827e		  5071              CMPD        R1,ENDLIN               ;IF EOL
000025cd PC 7a52		  5072              ble         nx_chr                  ;THEN IMMD MODE
				  5073
000025cf PC ce98a014		  5074  IMMSET:     MOVZBD      IMMINX+1,R2
				  5075
000025d3 PC 57d0826f		  5076  CASMOD:     MOVD        OPSTRT,R1                
				  5077
000025d7 PC 8f17		  5078  STAR_T:     ADDQD       -1,R2                   
				  5079
000025d9 PC 7defda04		  5080  CASEM:           CASEW  BRTAB:B[R2:W]
				  5081
000025dd PC 1a01		  5082  BRTAB:      .WORD       REG0-CASEM
000025df PC 1a01		  5083              .WORD       REG1-CASEM
000025e1 PC 1a01		  5084              .WORD       REG2-CASEM
000025e3 PC 1a01		  5085              .WORD       REG3-CASEM
000025e5 PC 1a01		  5086              .WORD       REG4-CASEM
000025e7 PC 1a01		  5087              .WORD       REG5-CASEM
000025e9 PC 1a01		  5088              .WORD       REG6-CASEM
000025eb PC 1a01		  5089              .WORD       REG7-CASEM
000025ed PC 1d01		  5090              .WORD       REGREL0-CASEM
000025ef PC 1d01		  5091              .WORD       REGREL1-CASEM
000025f1 PC 1d01		  5092              .WORD       REGREL2-CASEM
000025f3 PC 1d01		  5093              .WORD       REGREL3-CASEM
000025f5 PC 1d01		  5094              .WORD       REGREL4-CASEM
000025f7 PC 1d01		  5095              .WORD       REGREL5-CASEM
000025f9 PC 1d01		  5096              .WORD       REGREL6-CASEM
000025fb PC 1d01		  5097              .WORD       REGREL7-CASEM
000025fd PC 2601		  5098              .WORD       FPMEM-CASEM
000025ff PC 2601		  5099              .WORD       SPMEM-CASEM
00002601 PC 2601		  5100              .WORD       SBMEM-CASEM
00002603 PC 4a01		  5101              .WORD       IMMED-CASEM
00002605 PC 8201		  5102              .WORD       ABS-CASEM       
00002607 PC 3701		  5103              .WORD       EXTMOD-CASEM
00002609 PC 1a01		  5104              .WORD       TOSMOD-CASEM
0000260b PC 1d01		  5105              .WORD       FPREL-CASEM
0000260d PC 1d01		  5106              .WORD       SPREL-CASEM
0000260f PC 1d01		  5107              .WORD       SBREL-CASEM
00002611 PC 1d01		  5108              .WORD       PCREL-CASEM
				  5109  ABLOCK:
00002613 PC 02bc3c		  5110          BSR     VALU
00002616 PC dc08		  5111          MOVQB   1, R1                   ;CHECK FOR BYT LONG
00002618 PC 1cd08268		  5112          CMPQB   BYTLONG, ITYPE
0000261c PC 0a0c		  5113          BEQ     FIXIT:B
0000261e PC 5c09		  5114          MOVQB   2, R1                   ;ENCODE THIS VALUE
00002620 PC 9cd08268		  5115          CMPQB   WRDLONG, ITYPE          ; ENCODED VALUE :=
00002624 PC 0a04		  5116          BEQ     FIXIT:B                 ;    DISP*i -i
00002626 PC 5c0a		  5117          MOVQB   4, R1
00002628 PC ce6009		  5118  FIXIT:  MULB    R1, R5
0000262b PC 4e6008		  5119          NEGB    R1, R1
0000262e PC 4009		  5120          ADDB    R1, R5
00002630 PC 68a10f		  5121          ANDB    H'F,R5
00002633 PC 94a01b		  5122          MOVB    PCINX+1, R2
00002636 PC 02bc84		  5123          BSR     DISP1
00002639 PC ea8137		  5124          BR      PARSEND:W
				  5125
				  5126  ALIST1:
0000263c PC 5cd0826b		  5127          MOVQB   0, ADDRMODE     ;SET REG FIELD TO 0
00002640 PC 44a25200		  5128  LOOK:   CMPB    'R',0(R1)       ;DO SIMPLE CHECKS FOR
00002644 PC 1a1c		  5129          BNE     NEXT_:B         ;REGISTERS
00002646 PC 944801		  5130          MOVB    1(R1), R2
00002649 PC a0a030		  5131          SUBB    H'30, R2        ;SET THAT BIT NUM IN ADDRMODE
0000264c PC 84a6628228		  5132          CMPB    H'62, BASECODE  ;CHECK FOR SAVE INST
00002651 PC 0a0a		  5133          BEQ     NOFLOP:B
00002653 PC 1cd18277		  5134          CMPQB   OP2_DISP, ADISP
00002657 PC 0a04		  5135          BEQ     NOFLOP:B        ;CHECK FOR ENTER INST
00002659 PC 8c14		  5136          ADDQB   -7, R2          ;ELSE FLOP REG ORDER AROUND
				  5137          ;ABSB   R2,R2           ; DSI-32 assembler won't allow this !!!
0000265b PC 4e9816826b		  5138  NOFLOP: SBITB   R2, ADDRMODE
00002660 PC 44a25d00		  5139  NEXT_:  CMPB    ']', 0(R1)      ;STOP AT END OF LIST
00002664 PC 0a0a		  5140          BEQ     DONREG:B
00002666 PC 8f08		  5141          ADDQD   1, R1
00002668 PC 870e827e		  5142          CMPD    R1, ENDLIN      ;UNTIL ENDLIN
0000266c PC ca54		  5143          BLT     LOOK
0000266e PC df17		  5144  DONREG: MOVQD   -1, R2          ;NOT NORMAL ADDR MODE FLAG
00002670 PC dcd08274		  5145          MOVQB   TRUE, INS_8BIT  ;
00002674 PC ea80fc		  5146          BR PARSEND:W
				  5147
				  5148  ASPC_REG:
				  5149  AQUICK:
00002677 PC 02bbd8		  5150          BSR     VALU
0000267a PC df17		  5151          MOVQD   -1, R2          ;NOT A NORMAL ADDR MODE
0000267c PC dcd08273		  5152          MOVQB   TRUE, INS_4BIT
00002680 PC 942e826b		  5153          MOVB    R5, ADDRMODE
00002684 PC ea80ec		  5154          BR      PARSEND:W
				  5155
				  5156  ASTRNG:
00002687 PC 57d0826f		  5157          MOVD    OPSTRT, R1      ;START OF STRING INST
0000268b PC 5cd0826b		  5158          MOVQB   0, ADDRMODE     ;START WITH ADDR MODE 0
0000268f PC 44a2547e		  5159          CMPB    'T', -2(R1)
00002693 PC 1a08		  5160          BNE     OTHER_OP:B
00002695 PC 4e98a600826b	  5161          SBITB   0, ADDRMODE
				  5162  OTHER_OP:
0000269b PC 44a24200		  5163          CMPB    'B', 0(R1)
0000269f PC 1a08		  5164          BNE     W_:B
000026a1 PC 4e98a601826b	  5165          SBITB   1, ADDRMODE     ;SET THE B BIT OPTIN
000026a7 PC 44a25700		  5166  W_:     CMPB    'W', 0(R1)
000026ab PC 1a08		  5167          BNE     U_:B            
000026ad PC 4e98a602826b	  5168          SBITB   2, ADDRMODE     ;SET THE W OPTION
000026b3 PC 44a25500		  5169  U_:     CMPB    'U', 0(R1)      ;SET THE U OPTION
000026b7 PC 1a0e		  5170          BNE     NEX_O:B
000026b9 PC 4e98a602826b	  5171          SBITB   2, ADDRMODE     ;U OPTION FIELD = 3
000026bf PC 4e98a603826b	  5172          SBITB   3, ADDRMODE                             
000026c5 PC 8f08		  5173  NEX_O:  ADDQD   1, R1
000026c7 PC 870e827e		  5174          CMPD    R1, ENDLIN
000026cb PC 7a50		  5175          BLE     OTHER_OP        
000026cd PC df17		  5176          MOVQD   -1, R2
000026cf PC dcd08273		  5177          MOVQB   TRUE, INS_4BIT
000026d3 PC ea809d		  5178          BR      PARSEND:W
				  5179
				  5180  SHR_FLD:
000026d6 PC 02bb79		  5181          BSR     VALU
000026d9 PC 4e54a105		  5182          LSHB    5, R5           ;ADJUST THE OFFSET
000026dd PC 942e8242		  5183          MOVB    R5, DISP1D      ;STORE IT AS FINAL DISP
000026e1 PC 5720		  5184          MOVD    R4, R1          ;POINTER TO OFFSET
000026e3 PC 02bb6c		  5185          BSR     VALU            ;GET VALU
000026e6 PC 8f2f		  5186          ADDQD   -1, R5          ;DECREMENT LENGTH
000026e8 PC 982e8242		  5187          ORB     R5, DISP1D      ;MAKE ONE BYT
000026ec PC dcd08259		  5188          MOVQB   1, LEN1D        ;FLAG THAT THERE IS A DISP
000026f0 PC ea8080		  5189          BR      PARSEND:W
				  5190
				  5191  REG0:
				  5192  REG1:
				  5193  REG2:
				  5194  REG3:
				  5195  REG4:
				  5196  REG5:
				  5197  REG6:
				  5198  REG7:
				  5199  TOSMOD:
000026f3 PC ea807d		  5200              BR          PARSEND:W               ;CODING
				  5201                                          ;GO FINISH PARSE
				  5202
				  5203
				  5204
				  5205  REGREL0:
				  5206  REGREL1:
				  5207  REGREL2:
				  5208  REGREL3:
				  5209  REGREL4:
				  5210  REGREL5:
				  5211  REGREL6:
				  5212  REGREL7:
				  5213  FPREL:
				  5214  SPREL:
				  5215  SBREL:
				  5216  PCREL:
000026f6 PC 02bb59		  5217              BSR         VALU                    ;R1=OPSTRT
000026f9 PC 02bbc1		  5218              BSR         DISP1                   ;GET VALU
				  5219                                                  ;SHOVE TO DISP1
000026fc PC ea8074		  5220              BR          PARSEND:W               ;FINISH PARSE
				  5221
				  5222  FPMEM:
				  5223  SPMEM:
				  5224  SBMEM:
000026ff PC 02bb50		  5225              BSR         VALU                    ;GET FIRST VALUE
00002702 PC 02bbc4		  5226              BSR         DISP2                   ;ITS DISP2
00002705 PC 5720		  5227              MOVD        R4,R1                   ;POINT TO NEXT VALU
00002707 PC 02bb48		  5228              BSR         VALU                    ;ITS DISP1
0000270a PC 02bbb0		  5229              BSR         DISP1                   
0000270d PC ea8063		  5230              BR          PARSEND:W               ;FINISH PARSE
				  5231
00002710 PC 0f0a		  5232  EXTMOD:     ADDQD       4,R1                    ;MOVE VECIN TO START OF VALU
00002712 PC 02bb3d		  5233              BSR         VALU                    ;GET FIRST DISP
00002715 PC 02bba5		  5234              BSR         DISP1                   ;STORE IT
00002718 PC 5720		  5235              MOVD        R4,R1                   ;SET VEC TO NEXT DISPL
0000271a PC 02bb35		  5236              BSR         VALU                    
0000271d PC 02bba9		  5237              BSR         DISP2                   ;STORE IT
00002720 PC ea8050		  5238              BR          PARSEND:W               ;FINISH PARSE
				  5239
00002723 PC 02bcd1		  5240  IMMED:      BSR         SYMBOL
00002726 PC 1cd08286		  5241              CMPQB       FALSE, ERR_FLG          ;CHECK FOR SYMBOL ERROR
0000272a PC 1a80f9		  5242              BNE         FINISH:W                ;ALLDONE IF ERROR
0000272d PC 9cd08287		  5243              CMPQB       TRUE, YES_SYM           ;IF SYMBOL WAS FOUND
00002731 PC 0a09		  5244              BEQ         DISP___IT:B             ;THEN SET DISPLACEMENT
00002733 PC 02bb1c		  5245              BSR         VALU                    
00002736 PC 5cd08269		  5246              MOVQB       FALSE,DISPLACE          ;SET TO IMMEDVALUE
0000273a PC 02bb80		  5247  DISP___IT:  BSR         DISP1                   ;FORMAT
0000273d PC ea33		  5248              BR          PARSEND:B
				  5249
0000273f PC 94a01a		  5250  OPISDISP:   MOVB        PCINX, R2               ;SET TO PC ADDR MODE
00002742 PC 44a22a00		  5251              CMPB        '*', 0(R1)              ;CHECK FOR DISP TYPE
00002746 PC 0a15		  5252              BEQ         ABS:B
00002748 PC 02bcac		  5253              BSR         SYMBOL
0000274b PC 1cd08286		  5254              CMPQB       FALSE, ERR_FLG          ;CHECK FOR SYMBOL ERROR
0000274f PC 1a80d4		  5255              BNE         FINISH:W                ;ALLDONE IF ERROR
00002752 PC 9cd08287		  5256              CMPQB       TRUE, YES_SYM           ;IF SYMBOL WAS FOUND
00002756 PC 0a13		  5257              BEQ         L_DISP:B                ;THEN SET DISPLACEMENT
00002758 PC ea8005		  5258              BR          OP_IS_D:W
0000275b PC 8f08		  5259  ABS:        ADDQD       1,R1                    ;VECIN TO DISP START
0000275d PC 02baf2		  5260  OP_IS_D:    BSR         VALU
00002760 PC 9cd08279		  5261              CMPQB       TRUE, A_LONG_F
00002764 PC 1a05		  5262              BNE         L_DISP:B
00002766 PC 68a11f		  5263              ANDB        H'1F, R5        
00002769 PC 5cd08279		  5264  L_DISP:     MOVQB       FALSE, A_LONG_F
0000276d PC 02bb4d		  5265              BSR         DISP1
				  5266
00002770 PC 9c17		  5267  PARSEND:   CMPQB        -1, R2
00002772 PC 0a09		  5268             BEQ          MODE_SET:B       
00002774 PC 94e6dabc61826b	  5269             MOVB         MODCODE[R2:B],ADDRMODE  ;SET ADDR MODE CODING
				  5270  MODE_SET:
0000277b PC 57d0826f		  5271              MOVD        OPSTRT,R1               ;VEC TO START OF 
				  5272                                                  ;    CURRENT OPERAND    
0000277f PC 84a6088275		  5273  NEXON:      CMPB        REGLIST,CATGORY         ;IGNOE COMMAS IF REGLIS
00002784 PC 0a11		  5274              BEQ         NOCOM:B         
00002786 PC 044d002c		  5275              CMPB        0(R1),','               ;IF COMMA YOU ARE DONE
0000278a PC 0a8066		  5276              BEQ         DONEPARS:W
0000278d PC 044d005b		  5277              CMPB        0(R1),'['               ;IF [ THEN ADDR MODE INDEX
00002791 PC 0a1a		  5278              BEQ         INDEXMOD:B              ;I
00002793 PC ea0d		  5279              BR          E_L:B                   ;PARSEND FOR REGLIST
00002795 PC 044d005d		  5280  NOCOM:      CMPB        0(R1),']'               ;CHECK FOR END OF
00002799 PC 1a07		  5281              BNE         E_L:B
0000279b PC 8f08		  5282              ADDQD       1, R1
0000279d PC ea8053		  5283              BR          DONEPARS:W      
000027a0 PC 870e827e		  5284  E_L:        CMPD        R1,ENDLIN               ;IF EOL
000027a4 PC da804c		  5285              BGE         DONEPARS:W              ;    THEN DONE
000027a7 PC 8f08		  5286              ADDQD       1,R1                    ;LOOP TIL END IS FOUND
000027a9 PC ea56		  5287              BR          NEXON           
				  5288
000027ab PC 14d7d6826b822e	  5289  INDEXMOD:   MOVB        ADDRMODE,SUFFIX[R6:B]   ;SUFFIX=ADDRMODE
000027b2 PC dce0d68232		  5290              MOVQB       TRUE, SUFF_FLGS[R6:B]   ;FLAG SUFFIX AS PRESENT
000027b7 PC ce98a01b		  5291              MOVZBD      INXB,R2                 ;INDEX TABLE TO INX:B
000027bb PC 044d0451		  5292              CMPB        4(R1),'Q'               ;FIND I TYPE
000027bf PC 0a10		  5293              BEQ         QUADINX:B               ;FROM '0' VAD
000027c1 PC 044d0444		  5294              CMPB        4(R1),'D'               ;TO 'B' BYTE
000027c5 PC 0a0c		  5295              BEQ         DOUBINX:B
000027c7 PC 044d0457		  5296              CMPB        4(R1),'W'
000027cb PC 0a08		  5297              BEQ         WORDINX:B
000027cd PC ea08		  5298              BR          BYTEINX:B
				  5299
000027cf PC 8f10		  5300              QUADINX:    ADDQD 1,R2
000027d1 PC 8f10		  5301              DOUBINX:    ADDQD 1,R2              
000027d3 PC 8f10		  5302              WORDINX:    ADDQD 1,R2                      ;MAKE ADDR MODE INDX
000027d5 PC 94e6dabc00826b	  5303              BYTEINX:    MOVB    MODCODE[R2:B],ADDRMODE  ;SHIFLT INDEX OFF OF
000027dc PC 4e14a7d603822e	  5304              LSHB        3, SUFFIX[R6:B]                 ;TO ITS FIELS
000027e3 PC 144902		  5305              MOVB        2(R1), R4               ;SET INDEX REG INTO THAT FIELD
000027e6 PC 20a130		  5306              SUBB        H'30, R4                ;MUST EXPECT REG
000027e9 PC 1827d6822e		  5307              ORB         R4, SUFFIX[R6:B]
000027ee PC 0f0b		  5308              ADDQD       6,R1                    ;VECT TO START OF
000027f0 PC 8f08		  5309  DONEPARS:   ADDQD       1,R1                    ;NEXT OPERAND
				  5310                                                  ;INSERT MODE CODE INTO 
000027f2 PC ce18d1826c		  5311              MOVZBD      OPFIELD,R4              ;    BASIC INST         
000027f7 PC 9cd08273		  5312              CMPQB       TRUE, INS_4BIT          ;CHECK FOR SPECIAL CASE
000027fb PC 1a0c		  5313              BNE         TRY_8:B                 ;OF ADDRMODE
000027fd PC aea0d6826b822804	  5314              INSB        R4,ADDRMODE,BASECODE,4
00002805 PC ea1a		  5315              BR          INSED:B
00002807 PC 9cd08274		  5316  TRY_8:      CMPQB       TRUE, INS_8BIT
0000280b PC 1a0c		  5317              BNE         NORM_ADDR:B             
0000280d PC aea0d6826b822808	  5318              INSB        R4,ADDRMODE,BASECODE,8
00002815 PC ea0a		  5319              BR          INSED:B 
00002817 PC aea0d6826b822805	  5320  NORM_ADDR:  INSB        R4,ADDRMODE,BASECODE,5
0000281f PC 5dd08273		  5321  INSED:      MOVQW       FALSE, INS_4BIT         ;CANCEL BOT SPECIAL FLAGS
00002823 PC 1200		  5322  FINISH:     RET         0
				  5323
				  5324
				  5325  ;SUBROUTINE MOVDISPLACEMENT
				  5326  ;MEM:=DISPLACEN
				  5327  ;CODESTRT:=CODESTRT+LEN
				  5328  ;R4=VEC TO LENGTH
				  5329  ;R5=VEC TO DISP
				  5330
00002825 PC 8c6000		  5331  MOVDISP:    ADDQB       1,0(R4)
00002828 PC cc670006		  5332  MOVLOOP:    ACBB        -1,0(R4),MOVADIP:B
0000282c PC ea0e		  5333              BR          MOVOVER:B
0000282e PC 146c001000		  5334  MOVADIP:    MOVB        0(R5),0(CODESTRT)
00002833 PC 8f28		  5335              ADDQD       1,R5
00002835 PC 8fc010		  5336              ADDQD       1,CODESTRT
00002838 PC ea70		  5337              BR          MOVLOOP
0000283a PC 1200		  5338  MOVOVER:    RET         0               
				  5339
				  5340  ;       R O U T I N E      M O V __ A S C
				  5341  ;THIS ROUTINE IS PART OF PSUEDO OP OPERATION. IT TAKES CARE OF THE ASCII 
				  5342  ;STRING OPTION FOR THE .BYTE DIRECTIVE
				  5343  MOV_ASC:
0000283c PC 8f08		  5344                  ADDQD   1, R1           ;START OF ASCII LINE
0000283e PC 44a22200		  5345  ASC_LP:         CMPB    '"', 0(R1)      ;CHECK FOR ENDLIN
00002842 PC 0a81ce		  5346                  BEQ     SET_NX:W   
00002845 PC 870e827e		  5347                  CMPD    R1, ENDLIN
00002849 PC da81c7		  5348                  BGE     SET_NX:W    
0000284c PC 144c001000		  5349                  MOVB    0(R1), 0(CODESTRT)
00002851 PC 8f08		  5350                  ADDQD   1, R1
00002853 PC 8fc010		  5351                  ADDQD   1, CODESTRT
00002856 PC ea68		  5352                  BR      ASC_LP
				  5353
				  5354  ;       R O U T I N E      P S U E D O P
				  5355  ;KEY WORDS FOR PSUEDO OPS
00002858 PC 53544154		  5356  STAT_:  .BYTE   'STAT'
0000285c PC 454e4453		  5357  ENDS_:  .BYTE   'ENDS'
00002860 PC 424c4b42		  5358  BLKB_:  .BYTE   'BLKB'
00002864 PC 424c4b57		  5359  BLKW_:  .BYTE   'BLKW'
00002868 PC 424c4b44		  5360  BLKD_:  .BYTE   'BLKD'
				  5361  ;BYT_:  .BYTE   'BYTE'  
				  5362  ;WRD_:  .BYTE   'WORD'
				  5363  ;DOU_:  .BYTE   'DOUB'  
				  5364  ;FLT_:  .BYTE   'FLOA'
				  5365  ;LNG_:  .BYTE   'LONG'
				  5366
				  5367  PSUEDOP:
0000286c PC 5fc00c		  5368                  MOVQD   FALSE, A_ERROR
0000286f PC 8fd0827a		  5369                  ADDQD   1, VECIN        ;REMEMBER TO SET R1 TO VALUE START
00002873 PC 57d0827a		  5370                  MOVD    VECIN, R1        
00002877 PC 47da6100		  5371                  CMPD    STAT_, 0(R1)    ;IF STATIC SEG THEN SET SEGMENT ,
0000287b PC 1a0f		  5372                  BNE     TRYEND:B        ;SAVE LAST AND EXIT
0000287d PC 94d6821f821e	  5373                  MOVB    SEGMENT, LASTSEG
00002883 PC 5cd1821f		  5374                  MOVQB   SB_SEG, SEGMENT ;SET SB
00002887 PC ea8561		  5375                  BR      ALLDONE:W               
0000288a PC 47da5200		  5376  TRYEND:         CMPD    ENDS_, 0(R1)    ;IF END THEN REST LAST MODE
0000288e PC 1a0b		  5377                  BNE     SBSEG:B
00002890 PC 94d6821e821f	  5378                  MOVB    LASTSEG, SEGMENT
00002896 PC ea8552		  5379                  BR      ALLDONE:W
00002899 PC dfd08292		  5380  SBSEG:          MOVQD   1, FORM         ;TRY BLKB
0000289d PC 47da4300		  5381                  CMPD    BLKB_, 0(R1)
000028a1 PC 0a801b		  5382                  BEQ     FINBLK:W
000028a4 PC 5fd18292		  5383                  MOVQD   2, FORM         ;TRY BLKW
000028a8 PC 47dabfbc00		  5384                  CMPD    BLKW_, 0(R1)
000028ad PC 0a800f		  5385                  BEQ     FINBLK:W
000028b0 PC 5fd28292		  5386                  MOVQD   4, FORM
000028b4 PC 47dabfb400		  5387                  CMPD    BLKD_, 0(R1)
000028b9 PC 1a803e		  5388                  BNE     PCSEG:W
000028bc PC 1cd1821f		  5389  FINBLK:         CMPQB   SB_SEG, SEGMENT ;CHECK FOR CORRECT SEGMENT
000028c0 PC 0a0a		  5390                  BEQ     A_SB_SEG:B
000028c2 PC 27deb39f0c		  5391  SEGERR:         ADDR    ERR_SEG, A_ERROR
000028c7 PC ea8521		  5392                  BR      ALLDONE:W       ;ELSE ERR SEG
000028ca PC 9cd08338		  5393  A_SB_SEG:       CMPQB   PASS1, PASS_NUM ;NO SB COUNT IN PASS 2
000028ce PC 1a851a		  5394                  BNE     ALLDONE:W
000028d1 PC df28		  5395                  MOVQD   1, R5           ;SET REPEAT TO 1
000028d3 PC 8f0a		  5396                  ADDQD   5, R1
000028d5 PC 44a22000		  5397                  CMPB    ' ', 0(R1)      ;IF END OF LINE THEN SKIP REPEAT
000028d9 PC 0a12		  5398                  BEQ     NOREAP:B        ;FACTOR
000028db PC 870e827e		  5399                  CMPD    R1, ENDLIN
000028df PC 6a0c		  5400                  BGT     NOREAP:B        
000028e1 PC 02b96e		  5401                  BSR     VALU
000028e4 PC 1cd08286		  5402                  CMPQB   FALSE, ERR_FLG  ;IF GOOD VALUE THEN MOVIT
000028e8 PC 1a8500		  5403                  BNE     ALLDONE:W       ;EXIT IF ERROR IN REPEAT VALUE  
000028eb PC ce63d18292		  5404  NOREAP:         MULD    FORM, R5
000028f0 PC 832e8220		  5405                  ADDD    R5, SBCOUNT
000028f4 PC ea84f4		  5406                  BR      ALLDONE:W       
000028f7 PC 47a24554594200	  5407  PCSEG:          CMPD    H'45545942, 0(R1)       ;H'"BYTE"
000028fe PC 1a12		  5408                  BNE     A_WRD_:B
00002900 PC 8f0a		  5409                  ADDQD   5, R1
00002902 PC 44a22200		  5410                  CMPB    '"', 0(R1)
00002906 PC 0abf36		  5411                  BEQ     MOV_ASC
00002909 PC dcd0828e		  5412                  MOVQB   TRUE, DISP_B
0000290d PC ea809f		  5413                  BR      GET_VAL:W
00002910 PC 47a244524f5700	  5414  A_WRD_:         CMPD    H'44524F57, 0(R1)       ;H'"WORD"
00002917 PC 1a0b		  5415                  BNE     A_DOU_:B
00002919 PC dcd0828f		  5416                  MOVQB   TRUE, DISP_W
0000291d PC 8f0a		  5417                  ADDQD   5, R1
0000291f PC ea808d		  5418                  BR      GET_VAL:W
00002922 PC 47a242554f4400	  5419  A_DOU_:         CMPD    H'42554F44, 0(R1)       ;H'"DOUB"
00002929 PC 0a807d		  5420                  BEQ     A_DOUB:W
0000292c PC 47a2414f4c4600	  5421                  CMPD    H'414F4C46, 0(R1)       ;H'"FLOA"
00002933 PC 0a14		  5422                  BEQ     A_FLT:B
00002935 PC 47a2474e4f4c00	  5423                  CMPD    H'474E4F4C, 0(R1)       ;H'"LONG"
0000293c PC 0a8015		  5424                  BEQ     A_LNG:W
0000293f PC 27deb3120c		  5425                  ADDR    PSU_ERR, A_ERROR
00002944 PC ea84a4		  5426                  BR      ALLDONE:W
00002947 PC 0fd3827a		  5427  A_FLT:          ADDQD   6, VECIN
0000294b PC 5fd08292		  5428                  MOVQD   SHRT_REAL, FORM
0000294f PC ea0a		  5429                  BR      HFLOATIT:B
00002951 PC 8fd2827a		  5430  A_LNG:          ADDQD   5, VECIN
00002955 PC dfd08292		  5431                  MOVQD   LONG_REAL, FORM
00002959 PC 94a40d827e01	  5432  HFLOATIT:       MOVB    CR, 1(ENDLIN)
0000295f PC 9cd08338		  5433                  CMPQB   PASS1, PASS_NUM
00002963 PC 0a27		  5434                  BEQ     REAL_G:B
00002965 PC e7d5829c		  5435                  ADDR    A_REAL_NUM, TOS
00002969 PC d7d5827a		  5436                  MOVD    VECIN, TOS
0000296d PC ced8a532		  5437                  MOVZBD  50, TOS
00002971 PC e7d58292		  5438                  ADDR    FORM, TOS
00002975 PC e7d58296		  5439                  ADDR    F_ERROR, TOS
00002979 PC 029f52		  5440                  BSR     ASC_2_RE
0000297c PC 1fd08296		  5441                  CMPQD   FALSE, F_ERROR
00002980 PC 0a0a		  5442                  BEQ     REAL_G:B
00002982 PC 27deb2d70c		  5443                  ADDR    REAL_BAD, A_ERROR
00002987 PC ea8461		  5444                  BR      ALLDONE:W
0000298a PC 17d4829c1000	  5445  REAL_G:         MOVD    A_REAL_NUM, 0(CODESTRT)
00002990 PC 0fc210		  5446                  ADDQD   4, CODESTRT
00002993 PC 1fd08292		  5447                  CMPQD   SHRT_REAL, FORM
00002997 PC 0a8079		  5448                  BEQ     SET_NX:W
0000299a PC 17d482a01000	  5449                  MOVD    A_REAL_NUM+4, 0(CODESTRT)
000029a0 PC 0fc210		  5450                  ADDQD   4, CODESTRT
000029a3 PC ea806d		  5451                  BR      SET_NX:W
000029a6 PC dcd08290		  5452  A_DOUB:         MOVQB   TRUE, DISP_D
000029aa PC 8f0b		  5453                  ADDQD   7, R1
000029ac PC 5f28		  5454  GET_VAL:        MOVQD   0, R5
000029ae PC 9cd08338		  5455                  CMPQB   PASS1, PASS_NUM
000029b2 PC 0a8039		  5456                  BEQ     MOV_COUNT:W
000029b5 PC 02b825		  5457                  BSR     SYM_SRCH
000029b8 PC 9cd08288		  5458                  CMPQB   TRUE, S_FOUND
000029bc PC 0a0e		  5459                  BEQ     OK_OP:B
000029be PC 02b891		  5460                  BSR     VALU
000029c1 PC 1cd08286		  5461                  CMPQB   FALSE, ERR_FLG          ;IF GOOD VALUE THEN MOVIT
000029c5 PC 0a26		  5462                  BEQ     MOV_COUNT:B             ;ELSE TRY A SYMBOL
000029c7 PC ea8421		  5463                  BR      ALLDONE:W
000029ca PC 57d18289		  5464  OK_OP:          MOVD    SYM_VAL, R5
000029ce PC 44a22d02		  5465                  CMPB    '-', 2(R1)              ;CHECK FOR CASE WORK
000029d2 PC 1a19		  5466                  BNE     MOV_COUNT:B
000029d4 PC 8f09		  5467                  ADDQD   3, R1
000029d6 PC 02b804		  5468                  BSR     SYM_SRCH                ;LOOK FOR SECOND SYMBOL
000029d9 PC 9cd08288		  5469                  CMPQB   TRUE, S_FOUND
000029dd PC 0a0a		  5470                  BEQ     CALC_V:B
000029df PC 27deb26a0c		  5471                  ADDR    SYM_ERR3, A_ERROR
000029e4 PC ea8404		  5472                  BR      ALLDONE:W
000029e7 PC 63d18289		  5473  CALC_V:         SUBD    SYM_VAL, R5             ;DO SUBTRACTION ANDDONE
				  5474
				  5475  MOV_COUNT:                             
000029eb PC 9cd0828e		  5476                  CMPQB   TRUE, DISP_B
000029ef PC 1a0b		  5477                  BNE     MOV_2:B
000029f1 PC 142c1000		  5478                  MOVB    R5 ,0(CODESTRT)
000029f5 PC 8fc010		  5479                  ADDQD   1, CODESTRT
000029f8 PC ea18		  5480                  BR      SET_NX:B
000029fa PC 9cd0828f		  5481  MOV_2:          CMPQB   TRUE, DISP_W
000029fe PC 1a0b		  5482                  BNE     MOV_4:B
00002a00 PC 152c1000		  5483                  MOVW    R5, 0(CODESTRT)
00002a04 PC 0fc110		  5484                  ADDQD   2, CODESTRT
00002a07 PC ea09		  5485                  BR      SET_NX:B
00002a09 PC 172c1000		  5486  MOV_4:          MOVD    R5, 0(CODESTRT)
00002a0d PC 0fc210		  5487                  ADDQD   4, CODESTRT
00002a10 PC 17c61010		  5488  SET_NX:         MOVD    CODESTRT, CODEEND
00002a14 PC 5fc00c		  5489                  MOVQD   FALSE, A_ERROR
00002a17 PC 9cd0821f		  5490                  CMPQB   PC_SEG, SEGMENT
00002a1b PC 1abea7		  5491                  BNE     SEGERR
00002a1e PC ea83ca		  5492                  BR      ALLDONE:W
				  5493
				  5494  ;       R O U T I N E      A D D S Y M
00002a21 PC 27deb2200c		  5495  BAD_SYM:        ADDR    SYM_ERR2, A_ERROR       ;BAD SYMBOL TABLE
00002a26 PC ea83c2		  5496                  BR      ALLDONE:W   
00002a29 PC 27deb2100c		  5497  DUP_SYM:        ADDR    SYM_ERR1, A_ERROR       ;SET ERROR FLAG
00002a2e PC ea83ba		  5498                  BR ALLDONE:W                    ;EXIT
				  5499
00002a31 PC 1cd18338		  5500  ADDSYM:         CMPQB   PASS2, PASS_NUM         ;IF PASS 2 THEN DONT
00002a35 PC 0a8057		  5501                  BEQ     DONT:W                  ;ADD TO TABLE
00002a38 PC 17d0833a		  5502                  MOVD    SYM_TAB, R0             ;START OF SYM AREA
00002a3c PC 55a003e8		  5503                  MOVW    1000, R1                ;SET SANITY COUNT
00002a40 PC 9f477d		  5504          SYM_S:  CMPQD   -1, -3(R0)              ;LOOK FOR END OF TABLE
00002a43 PC 0a11		  5505                  BEQ     EMPTY:B                 ;ADD SYM WHEN FOUND
00002a45 PC 0592827a0079	  5506                  CMPW    0(VECIN), -7(R0)        ;ELSE CHECK FOR DUPLICATE
00002a4b PC 0a5e		  5507                  BEQ     DUP_SYM                 ;IF FOUND SET ERROR AND ABORT
00002a4d PC 0f04		  5508                  ADDQD   -8, R0                  ;ELSE POINT TO NEXT ENTRY
00002a4f PC cd0f71		  5509                  ACBW    -1, R1, SYM_S           ;AND LOOK AGAIN
00002a52 PC ea4f		  5510                  BR      BAD_SYM                 ;IF 1000 ENTRIES WITH NO RESULT
				  5511                                                  ;THEN ABORT WITH ERROR MESSAGE
00002a54 PC 9cd0821f		  5512          EMPTY:  CMPQB   PC_SEG, SEGMENT         ;ENTER VALUE ACCORDING TO
00002a58 PC 0a18		  5513                  BEQ     ENTERPC:B               ;CURRENT SEGMENT
00002a5a PC 97d68220825f	  5514                  MOVD    SBCOUNT, SBC            ;PASS SB LABEL VALU
00002a60 PC 4e9ba60000001f825f	  5515                  SBITD   31, SBC                 ;SB SYM FLAG
00002a69 PC 17d2825f7d		  5516                  MOVD    SBC, -3(R0)
00002a6e PC ea07		  5517                  BR      DONAME:B
00002a70 PC 17d282827d		  5518          ENTERPC:MOVD    PC_ADDR, -3(R0)         ;ENTER INTO TABLE
00002a75 PC 1592827a0079	  5519          DONAME: MOVW    0(VECIN), -7(R0)        ;THE VALUE AND SYMBOL
00002a7b PC 9596827a008263	  5520                  MOVW    0(VECIN), LABEL         ;EXPORT FOR DEBUG TABLE
00002a82 PC 14d2821f7c		  5521                  MOVB    SEGMENT, -4(R0)         ;SET SYMBOL TYPE
00002a87 PC 0f04		  5522                  ADDQD   -8, R0                  ;SET NEW END FLAG
00002a89 PC df477d		  5523                  MOVQD   -1, -3(R0)              ;DONE
00002a8c PC 8fd1827a		  5524          DONT:   ADDQD   3,VECIN
00002a90 PC ea80ea		  5525                  BR      ADDRET:W
				  5526
				  5527  ;       R O U T I N E      L E A D __ S P A C
				  5528  LEAD_SPAC:
00002a93 PC 84a420827a00	  5529  NX_SPC: CMPB    ' ', 0(VECIN)           ;SQUASH LEADING SPACES
00002a99 PC 1a10		  5530          BNE     NOT_SPC:B
00002a9b PC 8fd0827a		  5531          ADDQD   1, VECIN                ;CHECK FOR EMPTY
00002a9f PC 87d6827a827e	  5532          CMPD    VECIN, ENDLIN           ;LINE
00002aa5 PC 6a04		  5533          BGT     NOT_SPC:B               ;QUICK IF EMPTY
00002aa7 PC ea6c		  5534          BR      NX_SPC
				  5535  NOT_SPC:
00002aa9 PC 1200		  5536          RET     0
				  5537
				  5538  ;       R O U T I N E      S P A C E   P A C K
				  5539  SPAC_PAK:
00002aab PC 8706827e		  5540          PACK:   CMPD    R0, ENDLIN
00002aaf PC da36		  5541                  BGE     EOL:B
00002ab1 PC 04a22200		  5542                  CMPB    '"', 0(R0)
00002ab5 PC 1a12		  5543                  BNE     NO_STR:B
00002ab7 PC 8f00		  5544  SKIP_STR:       ADDQD   1, R0
00002ab9 PC 04a22200		  5545                  CMPB    '"', 0(R0)
00002abd PC 0a0a		  5546                  BEQ     NO_STR:B
00002abf PC 8706827e		  5547                  CMPD    R0, ENDLIN
00002ac3 PC 6a22		  5548                  BGT     EOL:B
00002ac5 PC ea72		  5549                  BR      SKIP_STR
00002ac7 PC 04a22000		  5550  NO_STR:         CMPB    ' ', 0(R0)              ;CHECK FOR ASCII STRING
00002acb PC 1a16		  5551                  BNE     INC:B
00002acd PC 5700		  5552                  MOVD    R0, R1
00002acf PC 544a0100		  5553         SQ:      MOVB    1(R1), 0(R1)
00002ad3 PC 8f08		  5554                  ADDQD   1, R1
00002ad5 PC 870e827e		  5555                  CMPD    R1, ENDLIN
00002ad9 PC 7a76		  5556                  BLE     SQ
00002adb PC 8fd7827e		  5557                  ADDQD   -1, ENDLIN
00002adf PC ea4c		  5558                  BR      PACK
00002ae1 PC 8f00		  5559          INC:    ADDQD   1, R0
00002ae3 PC ea48		  5560                  BR      PACK
00002ae5 PC 1200		  5561          EOL:    RET     0                       ;ALL SPACES SQUASHED    
				  5562
				  5563  ;       R O U T I N E   U P P E R C A S E
				  5564  UPCASE:
00002ae7 PC 17d0827a		  5565                  MOVD    VECIN, R0
00002aeb PC 04a26100		  5566          DELO:   CMPB    'a', 0(R0)              ;CONVERT TO UPPER CASE
00002aef PC 6a06		  5567                  BGT     ACAP1:B                 ;IF VECIN < 'a' THEN ACAP
00002af1 PC 00a2e000		  5568                  ADDB    -H'20, 0(R0)            ;ELSE SET TO CAP
00002af5 PC 8f00		  5569          ACAP1:  ADDQD   1, R0                   ;DO UNTIL ENDLIN
00002af7 PC 8706827e		  5570                  CMPD    R0, ENDLIN
00002afb PC 7a70		  5571                  BLE     DELO
00002afd PC 1200		  5572                  RET     0
				  5573
				  5574  ;       R O U T I N E   R E A L E N D 
				  5575  REALEND:
00002aff PC 17d1827a		  5576                  MOVD    VECIN, R4               ;CHECK FOR COMMENT ON INST
00002b03 PC 04a33b00		  5577          ACOM:   CMPB    ';', 0(R4)              ;IF COMMENT THEN CHANGE ENDLIN
00002b07 PC 1a0c		  5578                  BNE     TILFIN:B
00002b09 PC 9726827e		  5579                  MOVD    R4, ENDLIN              ;SET NEW ENDLIN
00002b0d PC 14a32000		  5580                  MOVB    ' ', 0(R4)              ;CLEAR IT TO A SPACE
00002b11 PC 1200		  5581                  RET     0                       ;RETURN
00002b13 PC 8f20		  5582          TILFIN: ADDQD   1, R4
00002b15 PC 8726827e		  5583                  CMPD    R4, ENDLIN              ;DO FOR WHOLE LINE
00002b19 PC 7a6a		  5584                  BLE     ACOM
00002b1b PC 1200		  5585                  RET     0
				  5586
				  5587  ;       M A I N    R O U T I N E   C O D I T
				  5588  ;
				  5589  ; REGISTER DUTY LIST
				  5590  ; R0= VEC TO CODE TABLE
				  5591  ; R1= VEC TO INPUT STRING
				  5592  ; R3= COUNTER FOR SEARCH COUNTROL
				  5593  ; R4= GENERAL DUTY
				  5594  ; R6= COMMON INDEXER TO INPUT/NEUMONIC MATCHING
				  5595
				  5596  CODIT:  
00002b1d PC 57c00c		  5597          MOVD    LIN_STRT, R1            ;MOVE SOURCE TO PARSE BUFFER
00002b20 PC 17c008		  5598          MOVD    LIN_END, R0     
00002b23 PC 27deb1460c		  5599          ADDR    BAD_LIN, A_ERROR        ;ASSUME A BAD LIN FOR START
00002b28 PC 2308		  5600          SUBD    R1, R0                  ;CHR_CNT
00002b2a PC a7d682a4827e	  5601          ADDR    TXT_BUF, ENDLIN         ;SET END OF INPUT LINE
00002b30 PC 8306827e		  5602          ADDD    R0, ENDLIN              ;SET LINE END
00002b34 PC 8fd7827e		  5603          ADDQD   -1, ENDLIN
00002b38 PC 8f00		  5604          ADDQD   1, R0
00002b3a PC a7d082a4		  5605          ADDR    TXT_BUF, R2             ;DESTINATION
00002b3e PC d710		  5606          MOVD    R2, R3
00002b40 PC 0e0000		  5607          MOVSB
00002b43 PC a7d682a4827a	  5608          ADDR    TXT_BUF, VECIN          ;SET LINE START
00002b49 PC 94a420827e01	  5609          MOVB    ' ', 1(ENDLIN)          ;CANCEL THE LAST CHAR (CR)
00002b4f PC 02bf44		  5610          BSR     LEAD_SPAC               ;SQUASH LEADING SPACES
00002b52 PC 87d6827a827e	  5611          CMPD    VECIN, ENDLIN           ;CHECK FOR EMPTY LINE
00002b58 PC 7a08		  5612          BLE     A_COM:B                 ;IGNORE IT      
00002b5a PC 5fc00c		  5613          MOVQD   FALSE, A_ERROR          ;NO ERROR
00002b5d PC ea828b		  5614          BR      ALLDONE:W
00002b60 PC 02bf87		  5615  A_COM:  BSR     UPCASE                  ;CONVERT LINE TO UPPER CASE ENTRY
00002b63 PC 84a43b827a00	  5616          CMPB    ';', 0(VECIN)
00002b69 PC 1a08		  5617          BNE     A_SYM:B                 ;SKIP COMMENT LINE
00002b6b PC 5fc00c		  5618          MOVQD   FALSE, A_ERROR
00002b6e PC ea827a		  5619          BR      ALLDONE:W
00002b71 PC 84a43a827a02	  5620  A_SYM:  CMPB    ':', 2(VECIN)           ;CHECK FOR LINE SYMBOL
00002b77 PC 0abeba		  5621          BEQ     ADDSYM
00002b7a PC 84a420827a00	  5622  ADDRET: CMPB    ' ', 0(VECIN)           ;SQUASH LEADING SPACES TILL
00002b80 PC 1a11		  5623          BNE     THE_INS:B               ;UNTILL THE INSTRUCTION IS FOUND
00002b82 PC 8fd0827a		  5624          ADDQD   1, VECIN                        ;CHECK FOR END OF LINE
00002b86 PC 87d6827a827e	  5625          CMPD    VECIN, ENDLIN           ;IF END THEN QUIT
00002b8c PC ca6e		  5626          BLT     ADDRET
00002b8e PC ea825a		  5627          BR      ALLDONE:W
00002b91 PC 17d0827a		  5628  THE_INS:MOVD    VECIN, R0               ;GET POINTER STARTED FOR OPERAND FIELD
00002b95 PC 04a22000		  5629  INSX:   CMPB    ' ', 0(R0)              ;GO TO START OF OPERAND FIELD
00002b99 PC 0a0c		  5630          BEQ     O_FLD:B                 ;IF SPACE THEN START OF OPERANDS
00002b9b PC 8f00		  5631          ADDQD   1, R0                   ;GO PAST THE INS
00002b9d PC 8706827e		  5632          CMPD    R0, ENDLIN              ;SEE IF END OF LINE
00002ba1 PC da09		  5633          BGE     SRET:B                  ;IF EOL THEN SKIP SPACPAK
00002ba3 PC ea72		  5634          BR      INSX                    ;OF OPERANDS AND GO FOR NO OP INS
00002ba5 PC 8f00		  5635  O_FLD:  ADDQD   1, R0                   ;INC TO START OF OP FIELD
00002ba7 PC 02bf04		  5636          BSR     SPAC_PAK
00002baa PC 02bf55		  5637  SRET:   BSR     REALEND                 ;GET NEW ENDLIN IN CASE OF COMMENT
00002bad PC 84a42e827a00	  5638          CMPB    '.', 0(VECIN)           ;CHECK FOR PSUEDO OP
00002bb3 PC 0abcb9		  5639          BEQ     PSUEDOP
00002bb6 PC 9cd0821f		  5640          CMPQB   PC_SEG, SEGMENT         ;IF NOT PC SEGMENT THEN
00002bba PC 1abd08		  5641          BNE     SEGERR                  ;THEN ERROR
00002bbd PC 27d8b0b4		  5642          ADDR    CODTABL,R0              ;POINTER TO START OF CODE TABLE
00002bc1 PC d5a00083		  5643          MOVW    NUMOFINST,R3            ;R3=COUNTER FOR SEARCH CONTROL
				  5644
				  5645  INSTLOOP:
00002bc5 PC ce8c4600826a02	  5646          EXTSB   0(R0),NUMLETS,F1OFF,F1LGTH      ;GET LENGTH OF ASCII NEUMONIC
00002bcc PC ce8c4600826d61	  5647          EXTSB   0(R0),OPCLGTH,F2OFF,F2LGTH      ;GET LENGTH OF BACIS CODE
00002bd3 PC 5f30		  5648          MOVQD   0,R6                    ;COMMON INDEX TO INPUT/TABLE
00002bd5 PC 57d0827a		  5649          MOVD    VECIN,R1                ; START OF INPUT STRING
00002bd9 PC 5dd0829a		  5650          MOVQW   FALSE, CONREAL          ;DELETE ANY PREVIOUS REAL NUM FLGS
				  5651
				  5652  NEXCHAR:
00002bdd PC 04e5460424		  5653          CMPB    4(R0)[R6:B],'$'         ;CHECK FOR BWD CODING
00002be2 PC 1a29		  5654          BNE     A_REAL:B                ;IF TRUE THEN SET ITYPE
00002be4 PC dcd18268		  5655          MOVQB   DOUBLNG,ITYPE
00002be8 PC 04e54e0044		  5656          CMPB    0(R1)[R6:B],'D'         ;DOUBLE IS DEFAULT
00002bed PC 0a805c		  5657          BEQ     NEXONE:W                ;IF EQUAL LOOK AT NEXT CHAR
00002bf0 PC dcd08268		  5658          MOVQB   WRDLONG,ITYPE           ;CHECK FOR WORD LONG
00002bf4 PC 04e54e0057		  5659          CMPB    0(R1)[R6:B],'W'         ;IF NOT WORD
00002bf9 PC 0a8050		  5660          BEQ     NEXONE:W                ; THEN MUST BE BYTE
00002bfc PC 5cd08268		  5661          MOVQB   BYTLONG,ITYPE
00002c00 PC 04e54e0042		  5662          CMPB    0(R1)[R6:B],'B'         ;IF NOT WORD
00002c05 PC 0a8044		  5663          BEQ     NEXONE:W                ; THEN MUST BE BYTE
00002c08 PC ea804c		  5664          BR      NEXTINST:W
				  5665  A_REAL:
00002c0b PC 04e5460423		  5666          CMPB    4(R0)[R6:B],'#'         ;CHECK FOR CONVERSION TYPE REAL INST
00002c10 PC 1a16		  5667          BNE     REAL_REAL:B             ;IF FALSE THEN CHECK FOR REAL TO REAL
00002c12 PC 04e54e004c		  5668          CMPB    0(R1)[R6:B],'L'         ;IF LONG THEN SET NOT FLAG
00002c17 PC 0a32		  5669          BEQ     NEXONE:B                ;ELSE IF SHORT TYPE
00002c19 PC 04e54e0046		  5670          CMPB    0(R1)[R6:B],'F'         ;SET FLAG TO SET F BIT
00002c1e PC 1a36		  5671          BNE     NEXTINST:B
00002c20 PC dcd0829a		  5672          MOVQB   TRUE,CONREAL
00002c24 PC ea25		  5673          BR      NEXONE:B
				  5674  REAL_REAL:
00002c26 PC 04e5460421		  5675          CMPB    4(R0)[R6:B],'!'         ;IF NOT REAL TO REAL SHORT THEN
00002c2b PC 1a16		  5676          BNE     OTHER:B
00002c2d PC 04e54e004c		  5677          CMPB    0(R1)[R6:B],'L'         ;IF LONG THEN SET NOT FLAG
00002c32 PC 0a17		  5678          BEQ     NEXONE:B                ;ELSE IF SHORT TYPE
00002c34 PC 04e54e0046		  5679          CMPB    0(R1)[R6:B],'F'         ;SET FLAG TO SET F BIT
00002c39 PC 1a1b		  5680          BNE     NEXTINST:B
00002c3b PC dcd0829b		  5681          MOVQB   TRUE,SHRTREAL
00002c3f PC ea0a		  5682          BR      NEXONE:B
				  5683
00002c41 PC 04e7464e0400	  5684  OTHER:  CMPB    4(R0)[R6:B],0(R1)[R6:B] ;IF INPUT <> NEUMONIC CHAR
00002c47 PC 1a0d		  5685          BNE     NEXTINST:B              ; MOVE ON TO NEXT INST
				  5686
00002c49 PC 8f30		  5687  NEXONE: ADDQD   1,R6                    ;ELSE IF ALL CHAR MATCHED THEN
00002c4b PC 84d1826a		  5688          CMPB    NUMLETS,R6              ;IT IS FOUND
00002c4f PC 0a20		  5689          BEQ     FOUNDIT:B               ;ELSE LOK AT NEXT CHAR
00002c51 PC eabf8c		  5690          BR      NEXCHAR 
				  5691
				  5692  NEXTINST:
00002c54 PC 80d6826a826d	  5693          ADDB    NUMLETS,OPCLGTH         ;PREPARE OFFSET TO
00002c5a PC ce18d1826d		  5694          MOVZBD  OPCLGTH,R4              ;TO NEXT INST IN
00002c5f PC 0f22		  5695          ADDQD   4,R4                    ;TABLE
00002c61 PC 0320		  5696          ADDD    R4,R0                   ;UPDATE TABLE POINTER
00002c63 PC cd1fbf62		  5697          ACBW    -1,R3,INSTLOOP          ;IF COUNT=0 THEN
00002c67 PC 27deafca0c		  5698          ADDR    NO_SUCH_INST, A_ERROR           ;INST NOT FOUND
00002c6c PC ea817c		  5699          BR      ALLDONE:W               ; SET ERROR AND QUIT
				  5700
				  5701  FOUNDIT:
00002c6f PC 04a74e2000		  5702          CMPB    ' ',0(R1)[R6:B]         ;IF NOT END OF INPUT STR
00002c74 PC 1a60		  5703          BNE     NEXTINST                ;THEN GET NEXT INST
00002c76 PC 94d6826d8267	  5704  AFIND:  MOVB    OPCLGTH,CODELGTH        ; SAVE CODE LENGTH
00002c7c PC 5f30		  5705          MOVQD   0,R6                    ;SET COMMON INDEX TRANSFER
00002c7e PC 274104		  5706          ADDR    4(R0),R4                ;CALC ADDR OF INST CODE
00002c81 PC ce58d1826a		  5707          MOVZBD  NUMLETS,R5              ;OFFSET N# OS ASCII CHAR
00002c86 PC 0329		  5708          ADDD    R5,R4
00002c88 PC 4328		  5709          addd    r5,r1
				  5710
				  5711  MOVECODE:
00002c8a PC 14e766d6008228	  5712          MOVB    0(R4)[R6:B],BASECODE[R6:B]
00002c91 PC 8f30		  5713          ADDQD   1,R6                    ;MOVE BYTE SEQUENCIAL FOR
00002c93 PC ccd7826d77		  5714          ACBB    -1,OPCLGTH,MOVECODE     ;OPCLGHT # OF BYTES
				  5715
00002c98 PC ce8c4600826ea1	  5716          EXTSB   0(R0),ICODE,F3OFF,F3LGTH        ;GET BWD CATEGORY
00002c9f PC 1cd0826e		  5717          CMPQB   FALSE,ICODE             ;IF FALSE GO ON TO
00002ca3 PC 0a1a		  5718          BEQ     OPERANS:B               ;OPERANDS PARSE
				  5719
00002ca5 PC 9cd0826e		  5720          CMPQB   BIT0,ICODE              ;IF BWD IS NOT CODED @ BIT 0
00002ca9 PC 1a0c		  5721          BNE     BIT8C:B                 ;THEN MUST BE AT BIT 8
00002cab PC ce88d68268822801	  5722          INSSB   ITYPE,BASECODE,0,2      ;INSET BWD @ BIT 0
00002cb3 PC ea0a		  5723          BR      OPERANS:B
00002cb5 PC ce88d68268822901	  5724  BIT8C:  INSSB   ITYPE,BASECODE+1,0,2    ;INSET BWD @ BIT 8
				  5725
				  5726
00002cbd PC 9cd0829a		  5727  OPERANS:    CMPQB       TRUE,CONREAL    ;SET CONVERSION TYP REAL INST
00002cc1 PC 1a0b		  5728              BNE         S_R:B           ;TO SHORT
00002cc3 PC 4e9ba60000000a8228	  5729              SBITD       10, BASECODE    ;ELSE CHECK FOR REAL TO REAL SHORT
00002ccc PC 9cd0829b		  5730         S_R: CMPQB       TRUE, SHRTREAL
00002cd0 PC 1a0b		  5731              BNE         ALLSET:B
00002cd2 PC 4e9ba6000000088228	  5732              SBITD       8, BASECODE
00002cdb PC 8f08		  5733  ALLSET:     addqd       1,r1            
00002cdd PC 5f30		  5734              MOVQD       0,R6                    ;TABLE INDEX OPERAND 1
00002cdf PC ce18a11b		  5735              MOVZBD      CATOFF, R4
00002ce3 PC 2ea04600827505	  5736              EXTB        R4,0(R0),CATGORY,CAT    ;GET SPECIAL CATEGORY
00002cea PC 94d682758277	  5737              MOVB        CATGORY, ADISP          ;SRIP DOWN TO 2 BIT VAL
00002cf0 PC a8a6038277		  5738              ANDB        3, ADISP
00002cf5 PC a8a61c8275		  5739              ANDB        28, CATGORY                     ;STRIP OF DISPDATA
00002cfa PC 5cd08276		  5740              MOVQB       FALSE, OP_IS_DISP       ;CHECK IF THIS
00002cfe PC 9cd08277		  5741              CMPQB       OP1_DISP, ADISP         ;OPERAND IS OF DISP
00002d02 PC 1a06		  5742              BNE         DO1:B                   ;TYPE
00002d04 PC dcd08276		  5743              MOVQB       TRUE, OP_IS_DISP          
				  5744
00002d08 PC ce98a100		  5745  DO1:        MOVZBD      0, R6                   ;SET TABLE INDEX TO FIRST OP
00002d0c PC ce18a107		  5746              MOVZBD      F4OFF,R4                ;DATA FIELD OF FIRST OPERAND
00002d10 PC 02b7c7		  5747              BSR         OPERATE                 ;PARSE OPERAND 1
				  5748
00002d13 PC 9cd08286		  5749              CMPQB       TRUE, ERR_FLG           ;IF ERROR IN OP THEN ABORT
00002d17 PC 0a80d1		  5750              BEQ         ALLDONE:W
00002d1a PC 5cd08276		  5751              MOVQB       FALSE, OP_IS_DISP       ;CHECK IF THIS
00002d1e PC 1cd18277		  5752              CMPQB       OP2_DISP, ADISP         ;OPERAND IS OF DISP
00002d22 PC 1a06		  5753              BNE         DO2:B                   ;TYPE
00002d24 PC dcd08276		  5754              MOVQB       TRUE, OP_IS_DISP          
				  5755
00002d28 PC df30		  5756  DO2:        MOVQD       1,R6                    ;PARSE OPERAND 2
00002d2a PC ce18a10c		  5757              MOVZBD      F5OFF,R4
00002d2e PC 02b7a9		  5758              BSR         OPERATE
				  5759
00002d31 PC 9cd08286		  5760              CMPQB       TRUE, ERR_FLG           ;IF ERROR IN OP THEN ABORT
00002d35 PC 0a80b3		  5761              BEQ         ALLDONE:W
00002d38 PC 5cd08276		  5762              MOVQB       FALSE, OP_IS_DISP       ;CHECK IF THIS
00002d3c PC 9cd18277		  5763              CMPQB       OP3_DISP, ADISP         ;OPERAND IS OF DISP
00002d40 PC 1a06		  5764              BNE         DO3:B                   ;TYPE
00002d42 PC dcd08276		  5765              MOVQB       TRUE, OP_IS_DISP          
				  5766
00002d46 PC 5f31		  5767  DO3:        MOVQD       2,R6                    ;3
00002d48 PC ce18a111		  5768              MOVZBD      F6OFF,R4
00002d4c PC 02b78b		  5769              BSR         OPERATE
				  5770
00002d4f PC 9cd08286		  5771              CMPQB       TRUE, ERR_FLG           ;IF ERROR IN OP THEN ABORT
00002d53 PC 0a8095		  5772              BEQ         ALLDONE:W
00002d56 PC 5cd08276		  5773              MOVQB       FALSE, OP_IS_DISP       ;CANCEL DISP FLAG
00002d5a PC df31		  5774              MOVQD       3,R6                    ;4
00002d5c PC ce18a116		  5775              MOVZBD      F7OFF,R4
00002d60 PC 02b777		  5776              BSR         OPERATE
00002d63 PC 9cd08286		  5777              CMPQB       TRUE, ERR_FLG
00002d67 PC 0a8081		  5778              BEQ         ALLDONE:W
				  5779
				  5780  ;THE FINISHING TOUCH     
00002d6a PC 5f30		  5781              MOVQD       0,R6
00002d6c PC 5f00		  5782              MOVQD       0,R0
				  5783
00002d6e PC 14e4d082281000	  5784  CODEBUILD:  MOVB        BASECODE[R0:B],0(CODESTRT)   ;MOV BYT WISE BASIC CODE
00002d75 PC 8f00		  5785              ADDQD       1,R0                         ;TO DESTINATION MEM
00002d77 PC 8fc010		  5786              ADDQD       1,CODESTRT
00002d7a PC ccd7826774		  5787              ACBB        -1,CODELGTH,CODEBUILD
				  5788
				  5789                                                       ;MOV SUFFIXES IF PRESENT
00002d7f PC 1cd08232		  5790              CMPQB       FALSE,S_FLG1
00002d83 PC 0a0b		  5791              BEQ         SUFF2:B
00002d85 PC 14d4822e1000	  5792              MOVB        SUFFIX1,0(CODESTRT)
00002d8b PC 8fc010		  5793              ADDQD       1,CODESTRT
00002d8e PC 1cd08233		  5794  SUFF2:      CMPQB       FALSE,S_FLG2
00002d92 PC 0a0b		  5795              BEQ         SUFF3:B
00002d94 PC 14d4822f1000	  5796              MOVB        SUFFIX2,0(CODESTRT)
00002d9a PC 8fc010		  5797              ADDQD       1,CODESTRT
00002d9d PC 1cd08234		  5798  SUFF3:      CMPQB       FALSE,S_FLG3
00002da1 PC 0a0b		  5799              BEQ         NOSUF:B
00002da3 PC 14d482301000	  5800              MOVB        SUFFIX3,0(CODESTRT)
00002da9 PC 8fc010		  5801              ADDQD       1,CODESTRT
				  5802
				  5803  NOSUF:
00002dac PC 5f3a		  5804              MOVQD       4,R7
00002dae PC 5f30		  5805              MOVQD       0,R6
				  5806
00002db0 PC 04a7d6008256	  5807  NEXTDISP:   CMPB        FALSE,LEN1[R6:B]
00002db6 PC 0a26		  5808              BEQ         NEXTD:B
00002db8 PC 27e1d68256		  5809              ADDR        LEN1[R6:B],R4
00002dbd PC 67f1d68236		  5810              ADDR        DISP1X[R6:D],R5
00002dc2 PC 7fdeba63		  5811              JSR         MOVDISP
00002dc6 PC 04a7d600825a	  5812              CMPB        FALSE,LEN2[R6:B]
00002dcc PC 0a10		  5813              BEQ         NEXTD:B
00002dce PC 27e1d6825a		  5814              ADDR        LEN2[R6:B],R4
00002dd3 PC 67f1d68246		  5815              ADDR        DISP2X[R6:D],R5
00002dd8 PC 7fdeba4d		  5816              JSR         MOVDISP
00002ddc PC 8f30		  5817  NEXTD:      ADDQD       1,R6
00002dde PC cc3f52		  5818              ACBB        -1,R7,NEXTDISP
00002de1 PC 17c61010		  5819              MOVD        CODESTRT, CODEEND       
00002de5 PC 5fc00c		  5820              MOVQD       FALSE,A_ERROR
				  5821
				  5822  ALLDONE:
00002de8 PC 92ff1204		  5823              .ENDPROC
				  5824
				  5825  ; end of ahelp.32k
				  5826  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				  5827  ; start of ahelpio.32k
				  5828
				  5829  ;-----------------------------------------------------------------------
				  5830  ;       S U P E R V I S O R       F U N C T I O N S
				  5831  ;
				  5832  COMD_IN:                .PROC
			  5833          LIN_STRT:       .BLKD           ;START OF MONITOR LINE
				  5834                          .RETURNS
			  5835          COMD_OK:        .BLKB           ;SYNTAX FLAG
				  5836                          .VAR [R1,R2,R3,R4,R5,R6,R7]
00002dec PC 82fe00		  5837                          .BEGIN
00002def PC 94a6208311		  5838                          MOVB    ' ', DELIMIT
00002df4 PC 94a050		  5839                          MOVB    80, R2
00002df7 PC 97c60882fa		  5840                          MOVD    LIN_STRT, VECIN3
00002dfc PC 57d082fa		  5841                          MOVD    VECIN3, R1               ;CHECK FOR LINE
00002e00 PC 44a20d00		  5842          CR_SRCH:        CMPB    CR, 0(R1)               ;TERMINATED WITH CR
00002e04 PC 0a8015		  5843                          BEQ     END__L:W
00002e07 PC 44a22000		  5844                          CMPB    ' ', 0(R1)              ;REPLACE TABS AND
00002e0b PC 7a06		  5845                          BLE     NOTTAB:B                ;FILTER OUT SPECIAL
00002e0d PC 54a22000		  5846                          MOVB    ' ', 0(R1)              ;CHARACTERS WITH
00002e11 PC 8f08		  5847                  NOTTAB: ADDQD   1, R1                   ;A SPACE
00002e13 PC cc176d		  5848                          ACBB    -1, R2, CR_SRCH
00002e16 PC ea802a		  5849                          BR      NOT_CMD:W
00002e19 PC 970e82fe		  5850          END__L:         MOVD    R1, VECEN
00002e1d PC dcc00b		  5851                          MOVQB   TRUE, COMD_OK
00002e20 PC 84a46182fa00	  5852                          CMPB    'a', 0(VECIN3)           ;CONVERT COMMAND TO
00002e26 PC 6a08		  5853                          BGT     ACAP3:B                 ;TO UPPER CASE
00002e28 PC 80a4e082fa00	  5854                          ADDB    -H'20, 0(VECIN3)
00002e2e PC 84a46182fa01	  5855                  ACAP3:  CMPB    'a', 1(VECIN3)           ;CONVERT SECOND CHAR
00002e34 PC 6a81df		  5856                          BGT     START:W                 ;TO UPPER CASE
00002e37 PC 80a4e082fa01	  5857                          ADDB    -H'20, 1(VECIN3) 
00002e3d PC ea81d6		  5858                          BR      START:W
00002e40 PC 5cc00b		  5859          NOT_CMD:        MOVQB   FALSE, COMD_OK
				  5860          COMD_LOOP:
00002e43 PC 5cd005		  5861                          MOVQB   FALSE,NOTECHO
00002e46 PC 927f1203		  5862                          .ENDPROC        
				  5863  ;-----------------------------------------------------------------------
				  5864
				  5865  ;------------------ E R R O R  M E S S A G E S ------------------------
00002e4a PC 4241445f5345510d	  5866          BAD_LOOP:       .BYTE 'BAD_SEQ',CR      ;ERROR MESSAGE FOR BAD LOOP 
00002e52 PC 4241445f4d454d0d	  5867          BADMEM:         .BYTE 'BAD_MEM',CR      ;MEMORY CONFLICT AT ASM TIME
				  5868
				  5869  ;------------------- C O M M A N D  T A B L E ----------------------------
00002e5a PC 5253		  5870          COMTAB: .BYTE   'RS'    ;**********************************
00002e5c PC 494e		  5871                  .BYTE   'IN'    ;******* W A R N I N G ************
00002e5e PC 5450		  5872                  .BYTE   'TP'    ;**********************************
00002e60 PC 4b49		  5873                  .BYTE   'KI'    ;DO NOT MOVE THESE FIRST 5 COMMANDS
00002e62 PC 5250		  5874                  .BYTE   'RP'
00002e64 PC 4153		  5875                  .BYTE   'AS'
00002e66 PC 524c		  5876                  .BYTE   'RL'
00002e68 PC 5452		  5877                  .BYTE   'TR'
00002e6a PC 5457		  5878                  .BYTE   'TW'
00002e6c PC 5258		  5879                  .BYTE   'RX'
00002e6e PC 4954		  5880                  .BYTE   'IT'
00002e70 PC 5a4f		  5881                  .BYTE   'ZO'
00002e72 PC 5a49		  5882                  .BYTE   'ZI'
00002e74 PC 4052		  5883                  .BYTE   '@R'
00002e76 PC 404d		  5884                  .BYTE   '@M' 
				  5889          CMD_N:  .EQU    ($ - COMTAB)/2
				  5890
				  5891  ;-------------START OF AHELP ROUTINES----------------------------------
				  5892
				  5893  ;+++++++++++++
				  5895  ;+++++++++++++
				  5896  ;MEMSIZE NEEDED FOR ASMBLER FOR START OF SYMBOL LIST
				  5897
				  5898  MEM_SIZ:        
00002e78 PC 9fd78302		  5899          CMPQD   -1,MEMSIZ
00002e7c PC 0a08		  5900          BEQ     DOFIND:B
00002e7e PC 17d08302		  5901          MOVD    MEMSIZ,R0
00002e82 PC 1200		  5902          RET     0               ;DB32 VERSION MEMSIZ = 512K
00002e84 PC 17a000027fff	  5903  DOFIND: MOVD    ram_top, R0     ;ROUTINE TO GET HIGH MEM ADDRESS (migry)
00002e8a PC 14a24e00		  5904  HALF:   MOVB    78, 0(R0)       ;WRITE A UNIQUE TEST VALUE TO ADDR
00002e8e PC 544000		  5905          MOVB    0(R0), R1
00002e91 PC 44a04e		  5906          CMPB    78, R1          ;IF VERIFIED THEN FOUND
00002e94 PC 0a08		  5907          BEQ     GOT_CRU:B
00002e96 PC 4e17a0ff		  5908          LSHD    -1, R0          ;HALF MEMSIZE LOWER
00002e9a PC ea70		  5909          BR      HALF
				  5910  GOT_CRU:
00002e9c PC 14a24e00		  5911          MOVB    78, 0(R0)       ;NOW GET DOWN TO EXACT SIZE 
00002ea0 PC 544000		  5912          MOVB    0(R0), R1
00002ea3 PC 44a04e		  5913          CMPB    78, R1          ;IF VERIFIED THEN FOUND
00002ea6 PC 1a09		  5914          BNE     GOT_SIZ:B
00002ea8 PC 5c4000		  5915          MOVQB   0, 0(R0)                ;LEAVE NO TRAIL
00002eab PC 8f00		  5916          ADDQD   1, R0                   ;BYTE MEMSIZE LOWER
00002ead PC ea6f		  5917          BR      GOT_CRU
				  5918  GOT_SIZ:
00002eaf PC 8f07		  5919          ADDQD   -1, R0                  ;LAST BYTE
00002eb1 PC 1200		  5920          RET     0       
				  5922  ;+++++++++++++
				  5923
				  5924  ;-----------------------E R R O R  R O U T I N E S--------------------
				  5925
				  5926  ERR_MES:
00002eb3 PC 1fd08313		  5927          CMPQD   FALSE, ERROR    ;GENERAL PURPORE ERROR MESSAGE OUTPUT
00002eb7 PC 0a1a		  5928          BEQ     NO_ERR:B        ;AND FLAG SETTER
00002eb9 PC 5cd0830c		  5929          MOVQB   FALSE, A_PARAM  ;IF THERE IS A ERROR MESSAGE THEN
00002ebd PC 8fd0831b		  5930          ADDQD   1, ERR_CNT      ;OUTPUT IT
00002ec1 PC 02808b		  5931          BSR     BUF_CLR:W       ;CLEAR LINE
00002ec4 PC 17d08313		  5932          MOVD    ERROR, R0
00002ec8 PC ce804600834a06	  5933          MOVMB   0(R0), IOBUF, 7
00002ecf PC 021a		  5934          BSR     WRIT_LN:B
00002ed1 PC 1200		  5935  NO_ERR: RET     0
				  5936
00002ed3 PC a7debf778313	  5937  INSANE: ADDR    BAD_LOOP, ERROR         ;DUE TO IMPROPER SEQUENCE
00002ed9 PC 025a		  5938          BSR     ERR_MES                 ;OF COMMANDS
00002edb PC eabf68		  5939          BR      COMD_LOOP
				  5940
				  5941  BAD_MEM: 
00002ede PC a7debf748313	  5942          ADDR    BADMEM, ERROR
00002ee4 PC 024f		  5943          BSR     ERR_MES
00002ee6 PC eabf5d		  5944          BR      COMD_LOOP
				  5945
				  5946  ;--------------- W R I T E   L I N E   R O U T I N E ------------
				  5947  WRIT_LN:                        ;ROUTINE TO WRITE CONTENTS OF IOBUF
00002ee9 PC 5f02		  5948          MOVQD   WRITE, R0       ;THRU SVC FUNCTION
00002eeb PC 67d0834a		  5949          ADDR    IOBUF, R1       ;LINE LENGTH IS 80
00002eef PC ce98a050		  5950          MOVZBD  80, R2          ;USED WITH BUF CLR ROUTINE
00002ef3 PC 5f18		  5951          MOVQD   MAIN, R3
00002ef5 PC e2			  5952          SVC
00002ef6 PC 1200		  5953          RET     0
				  5954  ;---------------L I S T I N G   R O U T I N R -------------------
				  5955  ALISTING:
00002ef8 PC 17d0830d		  5956          MOVD    HISTF, R0       ;CLEAR NO LF BIT IN NAME
00002efc PC 4e0ba00000001f	  5957          CBITD 31, R0
00002f03 PC 07d8815f		  5958          CMPD    AUX_PORT:W, R0  ;IF HISTORY ENABLED
00002f07 PC 1a1e		  5959          BNE     PRI_C:B         ;CHECK FOR PRINTER FLAG
00002f09 PC 5f02		  5960          MOVQD   WRITE, R0
00002f0b PC 67d0834a		  5961          ADDR    IOBUF, R1
00002f0f PC ce98a050		  5962          MOVZBD  80, R2
00002f13 PC df18		  5963          MOVQD   AUX, R3         ;WRITE TO BLX351
00002f15 PC b7a60000001f830d	  5964          TBITD   31, HISTF       ;CHECK FOR NO LF BIT
00002f1d PC 8a07		  5965          BFS     NOLF0:B
00002f1f PC 94a60a8398		  5966          MOVB    LF, IOBUF+78
00002f24 PC e2			  5967  NOLF0:  SVC                     ;CALL SUPER FOR WRITE
00002f25 PC 07d88141		  5968  PRI_C:  CMPD    PRINTER:W, R0
00002f29 PC 1a21		  5969          BNE     WRT_EN:B        ;IF NOT SET THEN END WRITE
00002f2b PC e7d5834a		  5970          ADDR    IOBUF, TOS      ;PASS BUFFER VEC
00002f2f PC ced8a550		  5971          MOVZBD  80, TOS         ;AND CHR CNT TO PRINTER ROUTINE
00002f33 PC b7a60000001f830d	  5972          TBITD   31, HISTF       ;CHECK FOR NO LF BIT
00002f3b PC 9a0a		  5973          BFC     A_LF:B
00002f3d PC 4e5ba60000001f00	  5974          SBITD   31, 0(SP)       ;SET FLAG FOR LF WITH CR
00002f45 PC 02c000232f		  5975  A_LF:   BSR     PRINTC
				  5976  WRT_EN: 
00002f4a PC 1200		  5977          RET     0
				  5978
				  5979  ;-------------------- C L E A R   B U F F E R   R O U T I N E -----------------
				  5980
				  5981  BUF_CLR:                        ;THIS ROUTINE CLEARS (SETS THE 
00002f4c PC 27d0834a		  5982          ADDR    IOBUF, R0       ;IOBUF LINE TO ALL SPACES
00002f50 PC 54a050		  5983          MOVB    80, R1
00002f53 PC 14a22000		  5984  SPACITH: MOVB    ' ', 0(R0)      ;AND TERMINATES IT WITH A CARRIAGE RETURN
00002f57 PC 8f00		  5985          ADDQD   1, R0
00002f59 PC cc0f7a		  5986          ACBB    -1, R1, SPACITH
00002f5c PC 94a60d8399		  5987          MOVB    CR, IOBUF+79    ;LEAVE ROOM FOR LF
00002f61 PC 1200		  5988          RET     0
				  5989
				  5990
				  5991  ;------ R O U T I N E        L I N E __ P A R S -------------------------------
				  5992  LINE_PARS:                              ;PARSE FOR LINE PARAMETRS
00002f63 PC 5fd08313		  5993          MOVQD   FALSE, ERROR
00002f67 PC 5cd0830c		  5994          MOVQB   FALSE, A_PARAM          ;ASSUME NO PARAMETER PRESENT
00002f6b PC 87d682fa82fe	  5995          CMPD    VECIN3, VECEN            ;IF CHR POINTER > EOL THEN
00002f71 PC da804c		  5996          BGE     DEF_L:W                 ;  ALLDONE
00002f74 PC 84d4831182fa00	  5997          CMPB    DELIMIT, 0(VECIN3)       ; IF FIRST CHAR IS DELIMITER THEN
00002f7b PC 1a09		  5998          BNE     DO_F:B   
00002f7d PC 8fd082fa		  5999          ADDQD   1, VECIN3                ; SET TO NEXT PARM AND EXIT
00002f81 PC ea803c		  6000          BR      DEF_L:W
00002f84 PC d7d582fa		  6001  DO_F:   MOVD    VECIN3, TOS              ; ELSE TRY TO GET PARAM VALUE
				  6002  LOOKMO:
00002f88 PC 849682fa018311	  6003          CMPB    1(VECIN3), DELIMIT       ;IF CHR+1 = DELIMITER THEN
00002f8f PC 0a18		  6004          BEQ     GET_LN:B                ;  GET THE NUMBER
00002f91 PC 049582fa010d	  6005          CMPB    1(VECIN3), CR            ;ELSE CHECK FOR EOL
00002f97 PC 0a10		  6006          BEQ     GET_LN:B                ; GET NUMBER IF TRUE
00002f99 PC 8fd082fa		  6007          ADDQD   1, VECIN3                ;ELSE BUMP CHR POINTER LOOK MORE
00002f9d PC 87d682fa82fe	  6008          CMPD    VECIN3, VECEN            ;AVOID ENDLESS LOOP DISASTER
00002fa3 PC da04		  6009          BGE     GET_LN:B                ;LEAVE VECIN3 AT NEXT PARAMETER
00002fa5 PC ea63		  6010          BR      LOOKMO
				  6011  GET_LN:                      
00002fa7 PC d7d582fa		  6012          MOVD    VECIN3, TOS              ;SET EOL
00002fab PC 028fe8		  6013          BSR     A_NUM                   ;CALL CONVERSION ROUTINE
00002fae PC 97be8306		  6014          MOVD    TOS, PAR_VAL  
00002fb2 PC 0fd182fa		  6015          ADDQD   2,VECIN3                 ;START OF NEXT PARAM IF ANY
00002fb6 PC dcd0830c		  6016          MOVQB   TRUE, A_PARAM           ;YES DID FIND A PARAMETER
00002fba PC 02bef9		  6017          BSR     ERR_MES
00002fbd PC 1200		  6018  DEF_L:  RET     0
				  6019
				  6020  ;-------------------------------------------------------------------------
				  6021  ;       R O U T I N E     B E G I N
				  6022
00002fbf PC 95a6303900		  6023  BEGIN:  MOVW    12345,FIRST
00002fc4 PC dfd78302		  6024          MOVQD   -1,MEMSIZ
00002fc8 PC 5fd0830d		  6025          MOVQD   0, HISTF                ;NO HISTORY SELECTED
00002fcc PC 5cd08312		  6026          MOVQB   FALSE, LEADZERO         ;DECODE COMMAND LINE
00002fd0 PC 5cd08337		  6027          MOVQB   FALSE, ASS_BLED         ;INITIALIZE STAND ALONE 
00002fd4 PC 94a6208311		  6028          MOVB    ' ', DELIMIT            ;INITIAL DELIMTER FOR PARSING
00002fd9 PC dfd78346		  6029          MOVQD   -1, A_MOD               ;SET TO NOT AUTO MOD CONSTRUCT
00002fdd PC 7ca508		  6030          ADJSPB  8                       ;PUSH DUMMY FOR EDIT CALL TO RESET
00002fe0 PC 5db8		  6031          MOVQW   0 ,TOS                  ;0 = RESET COMAND
00002fe2 PC 0291a0		  6032          BSR     EDIT   
00002fe5 PC 7ca5f8		  6033          ADJSPB  -8                      ;POP RETURN VARIBLES
00002fe8 PC 02bf64		  6034          BSR     BUF_CLR                 ;OUTPUT ID
00002feb PC dcd1830a		  6035          MOVQB   HEX, MON_BASE           ;MONITOR COMMANDS IN HEX
00002fef PC 1200		  6036          RET     0
				  6037  ;-----------------------------------------------------------------------------
				  6038  ;       R O U T I N E     I N __ L I N  
00002ff1 PC 02bf5b		  6039  IN_LIN:         BSR     BUF_CLR
00002ff4 PC df01		  6040                  movqd   READ, r0                ;SVC INPUT
00002ff6 PC 67d0834a		  6041                  addr    IOBUF, r1               
00002ffa PC 97a0ffffffb0	  6042                  movd    READ_NUM, r2
00003000 PC 5f18		  6043                  movqd   MAIN, r3
00003002 PC e2			  6044                  svc
00003003 PC 970e82fa		  6045                  MOVD    R1, VECIN3               ;SET UP ATART OF INPUT LINE
00003007 PC 970e82fe		  6046                  MOVD    R1, VECEN               ;SET UP END OF LINE
0000300b PC 8f17		  6047                  ADDQD   -1, R2                  ;ADD CHAR COUNT TO START
0000300d PC 831682fe		  6048                  ADDD    R2, VECEN
00003011 PC 1200		  6049                  RET     0
				  6050  ;---------------------------------------------------------------------------
				  6051
				  6052  START:          
00003013 PC 5f38		  6053          MOVQD   0, R7
00003015 PC 94a10f		  6054  FIND:   MOVB    CMD_N, R6
00003018 PC 17d082fa		  6055          MOVD    VECIN3, R0
0000301c PC 4547df00be3e	  6056          CMPW    0(R0), COMTAB[R7:W]
00003022 PC 0a0b		  6057          BEQ     FOUND:B
00003024 PC 8c38		  6058          ADDQB   1, R7
00003026 PC 8439		  6059          CMPB    R7, R6
00003028 PC 6abe18		  6060          BGT     NOT_CMD
0000302b PC ea6a		  6061          BR      FIND:B
0000302d PC c4a10a		  6062  FOUND:  CMPB    10, R7  ;CHECK FOR INIT COMMAND
00003030 PC 0a0a		  6063          BEQ     CMD_V:B
00003032 PC 85a6303900		  6064          CMPW    12345, FIRST
00003037 PC 1abe09		  6065          BNE     NOT_CMD
0000303a PC 7defdf04		  6066  CMD_V:  CASEW   CMD_VEC:B[R7:W]
0000303e PC 6600		  6067  CMD_VEC:        .WORD   EDINI  - CMD_V   ; "RS" R7 IS RESERVED FOR COM#
00003040 PC 7500		  6068                  .WORD   EDINS  - CMD_V   ; "IN" DO NOT CHANGE THE ORDER OF THESE
00003042 PC 1501		  6069                  .WORD   EDDIS  - CMD_V   ; "TP" FIRST 5 ENTRIES
00003044 PC d900		  6070                  .WORD   EDDEL  - CMD_V   ; "KI"
00003046 PC 7500		  6071                  .WORD   EDREP  - CMD_V   ; "RP"
00003048 PC 4802		  6072                  .WORD   ASMIT  - CMD_V   ; "AS"
0000304a PC 3000		  6073                  .WORD   SLHST  - CMD_V   ; "RL"
0000304c PC 3f05		  6074                  .WORD   TAPER  - CMD_V   ; "TR"
0000304e PC 0106		  6075                  .WORD   TAPEW  - CMD_V   ; "TW"
00003050 PC 8706		  6076                  .WORD   RADIX  - CMD_V   ; "RX"
00003052 PC 2200		  6077                  .WORD   INIT   - CMD_V   ; "IT"
00003054 PC bb07		  6078                  .WORD   ZOUT   - CMD_V   ; "ZO"
00003056 PC 0509		  6079                  .WORD   ZIN    - CMD_V   ; "ZI"
00003058 PC 710a		  6080                  .WORD   ATR    - CMD_V   ; "@R"
0000305a PC a50a		  6081                  .WORD   ATM    - CMD_V   ; "@M"
				  6086  ;--------------------------------------------------------------------------
				  6087  ;       I N I T    C O M M A N D
				  6088
0000305c PC 02bf63		  6089  INIT:   BSR     BEGIN
0000305f PC eabde4		  6090          BR      COMD_LOOP
				  6091  ;--------------------------------------------------------------------------
				  6092  ;       S E L E C T    L I S T I N G
00003062 PC 41534e3a		  6093  AUX_PORT:       .BYTE   'ASN:'
00003066 PC 4c50543a		  6094  PRINTER:        .BYTE   'LPT:'
				  6095  SLHST:
0000306a PC 97de78830d		  6096          MOVD    AUX_PORT, HISTF
0000306f PC 87dc7382fa03	  6097          CMPD    AUX_PORT, 3(VECIN3)
00003075 PC 0a16		  6098          BEQ     CR_CHK:B
00003077 PC 97de6f830d		  6099          MOVD    PRINTER, HISTF
0000307c PC 87dc6a82fa03	  6100          CMPD    PRINTER, 3(VECIN3)
00003082 PC 0a09		  6101          BEQ     CR_CHK:B
00003084 PC 5fd0830d		  6102          MOVQD   0, HISTF
00003088 PC eabdbb		  6103          BR      COMD_LOOP
0000308b PC 84a44382fa08	  6104  CR_CHK: CMPB    'C', 8(VECIN3)
00003091 PC 1abdb2		  6105          BNE     COMD_LOOP
00003094 PC 4e9ba60000001f830d	  6106          SBITD   31, HISTF
0000309d PC eabda6		  6107          BR      COMD_LOOP
				  6108
				  6109  ;---------------------------------------------------------------------------
				  6110  ;       E D I T O R    C O N T R O L    P R O C E S S
				  6111  ;
				  6112  EDINI:  ;EDIT INITIALIZE COMMAND
000030a0 PC 7ca508		  6113          ADJSPB  8
000030a3 PC 5db8		  6114          MOVQW   0, TOS
000030a5 PC 0290dd		  6115          BSR     EDIT
000030a8 PC 5cd08337		  6116          MOVQB   FALSE, ASS_BLED
000030ac PC eabd97		  6117          BR      COMD_LOOP   
				  6118
				  6119  EDINS:  ;EDITOR INSERT COMAND
				  6120  EDREP:  ;EDITOR REPLACE COMAND
000030af PC 94a602830b		  6121          MOVB    DEC, BASE
000030b4 PC 5fd08313		  6122          MOVQD   FALSE, ERROR
000030b8 PC 8fd182fa		  6123          ADDQD   3, VECIN3                ;START OF INPUT OR PARAMETERS
000030bc PC 049582fa0030	  6124          CMPB    0(VECIN3), '0'           ;CHECK FOR A NUMBER
000030c2 PC ca1e		  6125          BLT     USE_DEF:B               ;IF INPUT < '0' THEN NOPARAM
000030c4 PC 049582fa0039	  6126          CMPB    0(VECIN3), '9'           ;IF INPUT > '9' THEN NOPARAM
000030ca PC 6a16		  6127          BGT     USE_DEF:B
000030cc PC 94a6208311		  6128          MOVB    ' ', DELIMIT
000030d1 PC 02be92		  6129          BSR     LINE_PARS               ;GET THE PARAMETER
000030d4 PC 9cd0830c		  6130          CMPQB   TRUE, A_PARAM           ;CHECK IF PARAMTER WAS FOUND
000030d8 PC 1a08		  6131          BNE     USE_DEF:B               ; NO THEN USE DEFAULT
000030da PC 97d683068808	  6132          MOVD    PAR_VAL, NEXT_LN
				  6133  USE_DEF: 
000030e0 PC 1fd08313		  6134          CMPQD   FALSE, ERROR
000030e4 PC 1abd5f		  6135          BNE     COMD_LOOP
000030e7 PC 97d688088804	  6136          MOVD    NEXT_LN, LINNUM         ;SET NEXT LINE AS DEF FOR OPERATION
000030ed PC d7d582fa		  6137          MOVD    VECIN3, TOS              ;PASS LINE PARAMETERS TO EDITOR
000030f1 PC d7d582fe		  6138          MOVD    VECEN, TOS
000030f5 PC d53d		  6139          MOVW    R7, TOS                 ;PASS COMMAND
000030f7 PC 02908b		  6140          BSR     EDIT
000030fa PC 9fd08313		  6141          CMPQD   TRUE, ERROR             ;IF EDIT ERROR THEN
000030fe PC 0a10		  6142          BEQ     NO_SEQ:B                ;NO AUTO SEQUENCE
00003100 PC 5cd08337		  6143          MOVQB   FALSE, ASS_BLED         ;ASSEMBLY NOT VALID
00003104 PC 97d688048808	  6144          MOVD    LINNUM, NEXT_LN         ;AUTO SEQUENCE UP
0000310a PC 8fd08808		  6145          ADDQD   1, NEXT_LN               
0000310e PC dc30		  6146  NO_SEQ: MOVQB   1, R6                   ;SET LOOP CONTROL TO 1
00003110 PC ea8127		  6147          BR      ED_END:W   
				  6148
				  6149  EDDEL:  ;EDITOR DELETE LINE COMMAND
00003113 PC 94a602830b		  6150          MOVB    DEC, BASE
00003118 PC 8fd182fa		  6151          ADDQD   3, VECIN3                ;START OF OPTIONAL PARAMETER
0000311c PC 94a6208311		  6152          MOVB    ' ', DELIMIT
00003121 PC 02be42		  6153          BSR     LINE_PARS               ;GET THE PARAMETER
00003124 PC 9cd0830c		  6154          CMPQB   TRUE, A_PARAM
00003128 PC 1a08		  6155          BNE     DEL_DEF:B
0000312a PC 97d683068804	  6156          MOVD    PAR_VAL, LINNUM
				  6157  DEL_DEF: 
00003130 PC 1fd08313		  6158          CMPQD   FALSE, ERROR
00003134 PC 1abd0f		  6159          BNE     COMD_LOOP
00003137 PC dc30		  6160          MOVQB   1, R6                   ;SET LOOP CONTROL
00003139 PC 7ca508		  6161          ADJSPB  8
0000313c PC ddb9		  6162          MOVQW   3, TOS
0000313e PC 029044		  6163          BSR     EDIT
00003141 PC 1fd08313		  6164          CMPQD   FALSE, ERROR
00003145 PC 1a80f2		  6165          BNE     ED_END:W
00003148 PC 5cd08337		  6166          MOVQB   FALSE, ASS_BLED         ;ASSEMBLY NOT VALID
0000314c PC ea80eb		  6167          BR      ED_END:W
				  6168
				  6169  EDDIS:  ;EDITOR DISPLAY LINE COMMAND
0000314f PC 94a602830b		  6170          MOVB    DEC, BASE
00003154 PC dc30		  6171          MOVQB   1, R6                   ;LOOP CONTROL SET TO 1
00003156 PC 8fd182fa		  6172          ADDQD   3, VECIN3
0000315a PC 94a62f8311		  6173          MOVB    '/', DELIMIT            ;PARAMETER 2 DELMTER
0000315f PC 02be04		  6174          BSR     LINE_PARS               ;GET FIRST PARAMETER
00003162 PC 9cd0830c		  6175          CMPQB   TRUE,   A_PARAM         ;CHECK IF FOUND
00003166 PC 1a08		  6176          BNE     DIDEF:B
00003168 PC 97d683068804	  6177          MOVD    PAR_VAL, LINNUM         ;SET TO FOUND VALUE
0000316e PC 1fd08313		  6178  DIDEF:  CMPQD   FALSE, ERROR
00003172 PC 1abcd1		  6179          BNE     COMD_LOOP
00003175 PC 94a6208311		  6180          MOVB    ' ', DELIMIT            ;CHECK FOR PARAMETER 2
0000317a PC 02bde9		  6181          BSR     LINE_PARS
0000317d PC 9cd0830c		  6182          CMPQB   TRUE, A_PARAM
00003181 PC 1a06		  6183          BNE     DI_ERR:B
00003183 PC 97d18306		  6184          MOVD    PAR_VAL, R6
				  6185  ;       ABSB    R6, R6                  ;NO NO NEGATIVE NUMBER
				  6186  ; DSI-32 assembler won't allow ABSB !!!!
				  6187  DI_ERR:
00003187 PC 1fd08313		  6188          CMPQD   FALSE, ERROR
0000318b PC 1abcb8		  6189          BNE     COMD_LOOP
				  6190  DI_LOOP:                                ;SET THE LINE NUMBER
				  6191                                          ;SET UP FOR NEXT LINE
0000318e PC 7ca508		  6192          ADJSPB  8                       ;PUSH DUMMY
00003191 PC 5db9		  6193          MOVQW   2, TOS                  ;DISPLAY COMMAND NUMBER
00003193 PC 028fef		  6194          BSR     EDIT
00003196 PC 02bdb6		  6195          BSR     BUF_CLR                 ;CLEAN LINE
00003199 PC 97d68804831f	  6196          MOVD    LINNUM, TEMP4           ;SAVE LINNUM FOR DEBUG INFO
0000319f PC d7d58804		  6197          MOVD    LINNUM, TOS             ;PASS LINE NUMBER
000031a3 PC 5cd1830b		  6198          MOVQB   DEC, BASE               ;LINE NUMBER IN DECIMAL
000031a7 PC 028ed8		  6199          BSR     N_TO_ASC                ;FOR CONV TO ASCII
000031aa PC 17b9		  6200          MOVD    TOS, R4                 ;GET CHR_CNT
000031ac PC 97d688188333	  6201          MOVD    LINES, ASM_LIN
000031b2 PC 8fd78333		  6202          ADDQD   -1, ASM_LIN
000031b6 PC 87d688048333	  6203          CMPD    LINNUM, ASM_LIN  
000031bc PC ca06		  6204          BLT     INDX:B  
000031be PC df30		  6205          MOVQD   1, R6
000031c0 PC ea06		  6206          BR      LAST:B
000031c2 PC 8fd08804		  6207  INDX:   ADDQD   1, LINNUM
000031c6 PC 97a630303030834a	  6208  LAST:   MOVD    '0000', IOBUF           ;SET LINE TO ZEROES
000031ce PC 97a620202020834e	  6209          MOVD    '    ', IOBUF+4         ;SEPERATION SPACES
000031d6 PC 67d183e1		  6210          ADDR    NUMCH, R5               ;SDDRESS OF SOURCE
000031da PC 9c20		  6211          CMPQB   1, R4                   ;MOVE SKEWED TO LELT
000031dc PC 1a07		  6212          BNE     TWO:B
000031de PC 946e00834d		  6213          MOVB    0(R5), IOBUF+ 3
000031e3 PC 1c21		  6214  TWO:    CMPQB   2, R4
000031e5 PC 1a07		  6215          BNE     TRE:B
000031e7 PC 956e00834c		  6216          MOVW    0(R5), IOBUF + 2
000031ec PC 9c21		  6217  TRE:    CMPQB   3, R4
000031ee PC 1a09		  6218          BNE     FOU:B
000031f0 PC ce806e00834b02	  6219          MOVMB   0(R5), IOBUF + 1, 3
000031f7 PC 1c22		  6220  FOU:    CMPQB   4, R4
000031f9 PC 1a09		  6221          BNE     SKE:B
000031fb PC ce806e00834a03	  6222          MOVMB   0(R5), IOBUF + 0, 4
00003202 PC 1cd08337		  6223  SKE:    CMPQB   FALSE, ASS_BLED         ;IF ASSEMBLY IS VALID
00003206 PC 0a8031		  6224          BEQ     ED_END:W                 ;THEN OUTPUT LINE CODE ADDR
00003209 PC 17d0831f		  6225          MOVD    TEMP4, R0
0000320d PC 57d0881c		  6226          MOVD    TXTEND, R1
00003211 PC 97fe4800831f	  6227          MOVD    0(R1)[R0:Q], TEMP4      ;GET LINEADDR
00003217 PC b7a60000001f831f	  6228          TBITD   31, TEMP4               ;IF BIT 32 THEN NOT A CODE LINE
0000321f PC 8a8018		  6229          BFS     ED_END:W                ;AND DON'T OUTPUT ADDR
00003222 PC d7d5831f		  6230          MOVD    TEMP4, TOS              ;PASS LINE ADDRES
00003226 PC dcd1830b		  6231          MOVQB   HEX, BASE               ;ADDRESS IN HEX
0000322a PC 028e55		  6232          BSR     N_TO_ASC                ;FOR CONV TO ASCII
0000322d PC 17b9		  6233          MOVD    TOS, R4                 ;GET CHR_CNT
0000322f PC ce80d683e1835207	  6234          MOVMB   NUMCH, IOBUF+8, 8
				  6235
				  6236  ED_END: 
00003237 PC 97be82fe		  6237          MOVD    TOS, VECEN              ;GET RETURN MESSAGE FROM EDITOR
0000323b PC 97be82fa		  6238          MOVD    TOS, VECIN3              ;IF VECIN 0 THEN NO MESSAGE
0000323f PC 1fd082fa		  6239          CMPQD   0, VECIN3                ;SO BRANCH OUT TO COMMAND LOOP
00003243 PC dabc00		  6240          BGE     COMD_LOOP               ;ELSE SET WRITE PARAMETRS
00003246 PC 9fd08313		  6241          CMPQD   TRUE, ERROR             ;IF ERROR THE CLEAR BUFFER
0000324a PC 1a05		  6242          BNE     SH_ALL:B
0000324c PC 02bd00		  6243          BSR     BUF_CLR
0000324f PC 57d082fa		  6244  SH_ALL: MOVD    VECIN3, R1               ;SOURCE
00003253 PC a3d682fa82fe	  6245          SUBD    VECIN3, VECEN
00003259 PC 17d082fe		  6246          MOVD    VECEN, R0               ;CHAR COUNT
0000325d PC a7d0835c		  6247          ADDR    IOBUF+18, R2            ;DESTINATION
00003261 PC 0e0000		  6248          MOVSB
00003264 PC 02bc85		  6249          BSR     WRIT_LN
00003267 PC 9fd08313		  6250          CMPQD   TRUE, ERROR
0000326b PC 1a04		  6251          BNE     CONT_LOOP:B
0000326d PC dc30		  6252          MOVQB   1, R6                   ;CANCEL THE LOOP IF ERROR
				  6253  CONT_LOOP:
0000326f PC cc37bf1f		  6254          ACBB    -1, R6, DI_LOOP         ;LOOP TILL DONE
00003273 PC eabbd0		  6255          BR      COMD_LOOP:W
				  6256  ;-----------------------------------------------------------------------
				  6257  ;    A S S E M B L E R    C O N T R O L    P R O C E S S
				  6258  ;
00003276 PC 504153532031	  6259  PASS1_MES:      .BYTE   'PASS 1'
0000327c PC 504153532032	  6260  PASS2_MES:      .BYTE   'PASS 2'
				  6261
				  6262  ASMIT:  
00003282 PC 5fd0834a		  6263          MOVQD   0, A_MOD+4              ;KEEP MOD TABLE NEET
00003286 PC 5fd083dc		  6264          MOVQD   0, A_PC+4
0000328a PC 5fd08220		  6265          MOVQD   0, SBCOUNT              ;INIT SB COUNTER TO 0
0000328e PC dcd0821f		  6266          MOVQB   1, SEGMENT              ;INT SEGMENT TO PC CODE AREA
00003292 PC 8fd182fa		  6267          ADDQD   3, VECIN3                ;POINT TO OPTIONAL PARAMETER
00003296 PC 94a603830b		  6268          MOVB    HEX, BASE               ;GET PARAMETERS AS HEX
0000329b PC 02bcc8		  6269          BSR     LINE_PARS
0000329e PC 94a602830b		  6270          MOVB    DEC, BASE               ;RESET BASE TO DECIMAL FOR START
000032a3 PC 17d08818		  6271          MOVD    LINES, R0               ;CHECK FOR MEMORY CONFLICT
000032a7 PC ce23a000000008	  6272          MULD    8, R0                   ;GET SIZE OF DEBUG DATA
000032ae PC 57d0881c		  6273          MOVD    TXTEND, R1              ;ADD THAT TO END OF TEXT
000032b2 PC 0f0a		  6274          ADDQD   4, R1
000032b4 PC 0f0a		  6275          ADDQD   4, R1
000032b6 PC 4300		  6276          ADDD    R0, R1
000032b8 PC dfd78346		  6277          MOVQD   -1, A_MOD               ;SET NOT AUTO MODE
000032bc PC 1fd08313		  6278          CMPQD   FALSE, ERROR            ;CHECK FOR VALUE ERROR
000032c0 PC 1ac00002a1		  6279          BNE     OUT_ASM:d               ; migry add :D ;
000032c5 PC 9cd0830c		  6280          CMPQB   TRUE, A_PARAM           ;IF NOT A VALUE THEN ABORT
000032c9 PC 0a803d		  6281          BEQ     NOT_AUTO:W
000032cc PC d709		  6282          MOVD    R1, R7                  ;CALCULATE MOD TABLE ADDRESS
000032ce PC a7d683d08346	  6283          ADDR    MODTAB, A_MOD           ;SET MOD TABLE ADDRESS
000032d4 PC eba100ffff00	  6284          ANDD    H'FFFF00, R7            ;IF LESS THAN 64K USE 1/2 PAGE
000032da PC 073d0000ff00	  6285          CMPD    R7, H'FF00              ;BOUNDRY ELSE USE SYS AREA
000032e0 PC da12		  6286          BGE     SYSA:B
000032e2 PC c3a100000100	  6287          ADDD    H'100, R7
000032e8 PC 973e8346		  6288          MOVD    R7, A_MOD
000032ec PC c3a100000020	  6289          ADDD    32, R7
000032f2 PC eba100fffe00	  6290  SYSA:   ANDD    H'FFFE00, R7
000032f8 PC c3a100000200	  6291          ADDD    H'200, R7
000032fe PC 973e8306		  6292          MOVD    R7, PAR_VAL             ;PASS ALONG AS PARVAL
00003302 PC 973e83d8		  6293          MOVD    R7, A_PC
				  6294  NOT_AUTO:
00003306 PC 47d08306		  6295          CMPD    PAR_VAL, R1             ;IF CODESTART IS < TEXT AND 
0000330a PC cabbd4		  6296          BLT     BAD_MEM                 ;AND DEBUG DATA THEN ERROR
0000330d PC 97d68306833e	  6297          MOVD    PAR_VAL, CODESTAR       ;ELSE STORE IT
00003313 PC 97d6833e832f	  6298          MOVD    CODESTAR, PROG_BASE     ;SET PC START FOR ASSEMBLER
00003319 PC 5cd08337		  6299          MOVQB   FALSE, ASS_BLED ;EXPECT ABORTED ASSEMBLY
				  6300
				  6301  ;+++++++++++++
0000331d PC 02bb5b		  6303          BSR     MEM_SIZ         ;GET MEMORY SIXE FOR SYM_TAB ADDR
				  6305  ;+++++++++++++
				  6306
				  6307  ;@@@@@@@@@@@@@@
				  6311  ;@@@@@@@@@@@@@@
				  6312
00003320 PC 97068342		  6313          MOVD    R0, A_SP        ;SAVE AS AUTO SP VAL
00003324 PC 8fd68342		  6314          ADDQD   -3, A_SP        ;ALIGN TO double           (0x00bffc)
00003328 PC df477d		  6315          MOVQD   -1, -3(R0)      ;TAG TABLE AS EMPTY
0000332b PC 9706833a		  6316          MOVD    R0, SYM_TAB     ;PASS ADDR TO ASSEMBLER
0000332f PC dcd08338		  6317          MOVQB   PASS1, PASS_NUM
00003333 PC 02bc19		  6318          BSR     BUF_CLR         ;CLEAR BUFFER
00003336 PC ce80debf40834a05	  6319          MOVMB   PASS1_MES, IOBUF, 6
0000333e PC 02bbab		  6320          BSR     WRIT_LN         ;OUTPUT PASS 1
00003341 PC 02bbb7		  6321          BSR     ALISTING        ;DO LISTING
00003344 PC 5fd0831b		  6322  PASS_2: MOVQD   0, ERR_CNT
00003348 PC d7d1833e		  6323          MOVD    CODESTAR, R7    ;CODESTART
0000334c PC a7d18820		  6324          ADDR    TEXT, R6        ;VECIN3
00003350 PC 67d18820		  6325          ADDR    TEXT, R5        ;[DTEXT START
00003354 PC 97d68818832b	  6326          MOVD    LINES, COUNTER
0000335a PC 5fd08333		  6327          MOVQD   0, ASM_LIN      ;LINE OUNTER
0000335e PC 1fd08818		  6328          CMPQD   0, LINES        ;CHECK FOR INSANITY
00003362 PC dabb71		  6329          BGE     INSANE          ;AVIOD ENDLESS LOOPS
				  6330  NEXT_LINE:
00003365 PC 02bbe7		  6331          BSR     BUF_CLR
00003368 PC 94a602830b		  6332          MOVB    DEC, BASE       ;DEFAULT BASE FOR ASSEMBLY IS DECIMAL
0000336d PC d7d58333		  6333          MOVD    ASM_LIN, TOS            ;PASS LINE NUMBER
00003371 PC 028d0e		  6334          BSR     N_TO_ASC                ;FOR CONV TO ASCII
00003374 PC 17b9		  6335          MOVD    TOS, R4                 ;GET CHR_CNT
00003376 PC 97a630303030834a	  6336          MOVD    '0000', IOBUF           ;SET LINE TO ZEROES
0000337e PC 9c20		  6337          CMPQB   1, R4                   ;MOVE SKEWED TO LELT
00003380 PC 1a08		  6338          BNE     ATWO:B
00003382 PC 94d683e1834d	  6339          MOVB    NUMCH, IOBUF+ 3
00003388 PC 1c21		  6340  ATWO:   CMPQB   2, R4
0000338a PC 1a08		  6341          BNE     ATRE:B
0000338c PC 95d683e1834c	  6342          MOVW    NUMCH, IOBUF + 2
00003392 PC 9c21		  6343  ATRE:   CMPQB   3, R4
00003394 PC 1a0a		  6344          BNE     ASKE:B
00003396 PC ce80d683e1834b02	  6345          MOVMB   NUMCH, IOBUF + 1, 3
0000339e PC 9cd08338		  6346  ASKE:   CMPQB   PASS1, PASS_NUM         ;IF PASS1 THEN DO NOT OUTPUT ADDR
000033a2 PC 0a1e		  6347          BEQ     NO_ADD:B
000033a4 PC 94a603830b		  6348          MOVB    HEX, BASE
000033a9 PC dcd08312		  6349          MOVQB   TRUE, LEADZERO
000033ad PC d73d		  6350          MOVD    R7, TOS                 ;CODE ADDRES       
000033af PC 028cd0		  6351          BSR     N_TO_ASC                ;FOR CONV TO ASCII
000033b2 PC 17b9		  6352          MOVD    TOS, R4                 ;GET CHR_CNT
000033b4 PC 5cd08312		  6353          MOVQB   FALSE, LEADZERO
000033b8 PC ce80d683e1835007	  6354          MOVMB   NUMCH, IOBUF+6 ,8
000033c0 PC 27d0835a		  6355  NO_ADD: ADDR    IOBUF+16, R0
000033c4 PC 5f10		  6356          MOVQD   0, R2                   ;SET SANITY CONTROL
000033c6 PC 44a30d01		  6357  XXX:    CMPB    CR, 1(R5)
000033ca PC 0a14		  6358          BEQ     ENDL:B
000033cc PC 146a0000		  6359          MOVB    0(R5), 0(R0)            ;PLACE TEXT BYTE INTO 
000033d0 PC 8f00		  6360          ADDQD   1, R0                   ;OUTPUT BUFFER
000033d2 PC 8f28		  6361          ADDQD   1, R5                   ;INCREMENT ALL POINTERS
000033d4 PC 8f10		  6362          ADDQD   1, R2                   ;CHECK IF LOOP IS EXCESSIVE
000033d6 PC 84a04e		  6363          CMPB    78, R2                  ;IF IT IS THEN GO INSANE
000033d9 PC cabafa		  6364          BLT     INSANE
000033dc PC ea6a		  6365          BR      XXX
000033de PC 146a0000		  6366  ENDL:   MOVB    0(R5), 0(R0)            ;MOVE FINAL BYTE
000033e2 PC 5fd08313		  6367          MOVQD   FALSE, ERROR
000033e6 PC 8f28		  6368          ADDQD   1, R5
000033e8 PC 1739		  6369          MOVD    R7, R4          ;SAVE THIS CODE START
000033ea PC 94a602830b		  6370          MOVB    DEC, BASE       ;ASSEMBLY BASE
000033ef PC d73d		  6371          MOVD    R7, TOS         ;CODESTART
000033f1 PC d735		  6372          MOVD    R6, TOS         ;VECIN3
000033f3 PC d72d		  6373          MOVD    R5, TOS         ;ENDLIN
000033f5 PC 02a822		  6374          BSR     MONASM
000033f8 PC 97be8317		  6375          MOVD    TOS, ASM_ERR    ;ERROR MESSAGE
000033fc PC d7b9		  6376          MOVD    TOS, R7         ;NEXT ADDR FOR CODE
000033fe PC 1fd08317		  6377          CMPQD   FALSE, ASM_ERR  ;IF ERROR LINE THEN OTUPUT ADDR
00003402 PC 1a16		  6378          BNE     CODEL:B
00003404 PC c721		  6379          CMPD    R4, R7          ;IF ADDR IS UNCHANGED THEN THIS WAS A
00003406 PC 1a12		  6380          BNE     CODEL:B         ;COMMENT LINE 
00003408 PC 97a6202020208350	  6381          MOVD    '    ', IOBUF+6 ;CANCEL ADDR VALUE
00003410 PC 97a6202020208354	  6382          MOVD    '    ', IOBUF+10
00003418 PC 02bad1		  6383  CODEL:  BSR     WRIT_LN         ;OUT PUT THE LINE
0000341b PC 02badd		  6384          BSR     ALISTING        ;DO LISTING
0000341e PC dcd0830c		  6385          MOVQB   TRUE, A_PARAM   ;FLAG THE LINE AS ERROR FREE
00003422 PC 97d683178313	  6386          MOVD    ASM_ERR, ERROR  ;OUT PUT ASM16 ERROR IF ANY
00003428 PC 02ba8b		  6387          BSR     ERR_MES
0000342b PC 8f28		  6388          ADDQD   1, R5           ;START OF NEXT LINE
0000342d PC 9729		  6389          MOVD    R5, R6          ;SET START
0000342f PC 17d08333		  6390          MOVD    ASM_LIN, R0
00003433 PC 57d0881c		  6391          MOVD    TXTEND, R1
00003437 PC 9cd08338		  6392          CMPQB   PASS1, PASS_NUM         ;IF PASS 2 THEN CREATE DEBUG INFO
0000343b PC 0a801e		  6393          BEQ     ENTERL:W                ;PASS 1 MAKE SYMBOLIC DEBUG DATA
0000343e PC 1cd1821f		  6394          CMPQB   2, SEGMENT      ;SKIP IF SB SEG
00003442 PC 0a8039		  6395          BEQ     NO_INFO:W
00003445 PC dfff4800		  6396          MOVQD   -1, 0(R1)[R0:Q] ;NO LABEL IN PC LINE/COMMENT LINE       
00003449 PC 87a6202020208350	  6397          CMPD    '    ', IOBUF+6 ;IF PC ADDR CANCELED THEN NOCODE LINE
00003451 PC 0a24		  6398          BEQ     ENTR_SG:B       ;ENTER -1 INTO DEBUG TABLE
00003453 PC d7274800		  6399          MOVD    R4, 0(R1)[R0:Q] ;CREATE TABLE OF DEBUG INFO     
00003457 PC ea1e		  6400          BR      ENTR_SG:B       ;ENTER SYMBOL IF ANY
00003459 PC dfff4800		  6401  ENTERL: MOVQD   -1, 0(R1)[R0:Q] ;NO LABEL IN  LINE      
0000345d PC 1cd08263		  6402          CMPQB   0, LABEL        ;IF LABEL NOT CHR(0) THEN IS LABEL 
00003461 PC 0a0e		  6403          BEQ     ENTR_SY:B
00003463 PC 9cd0821f		  6404          CMPQB   1, SEGMENT      ;IF PC SEG THEN 
00003467 PC 0a08		  6405          BEQ     ENTR_SY:B               ;NO ENTRY IF PC SECTION
00003469 PC d7d748825f00	  6406          MOVD    SBC, 0(R1)[R0:Q];STATIC BASE DEBUG DATA
0000346f PC d5d748826304	  6407  ENTR_SY:MOVW    LABEL, 4(R1)[R0:Q]      ;ENTER LINE LABEL IF ANY        
00003475 PC d4d748821f07	  6408  ENTR_SG:MOVB    SEGMENT, 7(R1)[R0:Q]    ;ENTER LABEL TYPE       
0000347b PC 8fd08333		  6409  NO_INFO:ADDQD   1, ASM_LIN
0000347f PC 02bacd		  6410          BSR     BUF_CLR         ;CLEAR BUFFER FOR HEX CODE OUTPUT
00003482 PC dcd08312		  6411          MOVQB   TRUE, LEADZERO
00003486 PC dcd1830b		  6412          MOVQB   HEX, BASE
0000348a PC 67d0835a		  6413          ADDR    IOBUF+16, R1
0000348e PC c721		  6414          CMPD    R4, R7          ;IF CODE ADDR IS UNCHANGED THEN DO NOT
00003490 PC 0a804b		  6415          BEQ     NO_CODE_OUT:W   ;OUTPUT CODE (ERROR OR COMMENT LINE ENCOUNTERED
00003493 PC 9cd08338		  6416          CMPQB   PASS1, PASS_NUM         ;IF PASS1 THEN NO CODE OUT
00003497 PC 0a8044		  6417          BEQ     NO_CODE_OUT:W
0000349a PC 9cd0830c		  6418          CMPQB   TRUE, A_PARAM   ;IF LINE HADE ERROR THEN NO CODE OUT
0000349e PC 1a803d		  6419          BNE     NO_CODE_OUT:W
000034a1 PC 5f10		  6420          MOVQD   0, R2
000034a3 PC ced86500		  6421  C_LOOP: MOVZBD  0(R4), TOS      ;DURING ASSEMBLY)
000034a7 PC 028bd8		  6422          BSR     N_TO_ASC        
000034aa PC 1fb9		  6423          CMPQD   2, TOS
000034ac PC 55d283e700		  6424          MOVW    NUMCH+6, 0(R1)
000034b1 PC 8f20		  6425          ADDQD   1, R4
000034b3 PC 0f09		  6426          ADDQD   2, R1
000034b5 PC 8f10		  6427          ADDQD   1, R2
000034b7 PC 84a016		  6428          CMPB    22, R2
000034ba PC da11		  6429          BGE     OUT_C:B
000034bc PC 02ba2d		  6430          BSR     WRIT_LN
000034bf PC 02ba39		  6431          BSR     ALISTING        ;DO LISTING
000034c2 PC 02ba8a		  6432          BSR     BUF_CLR
000034c5 PC 67d0835a		  6433          ADDR    IOBUF+16, R1
000034c9 PC 5f10		  6434          MOVQD   0, R2
000034cb PC c721		  6435  OUT_C:  CMPD    R4, R7
000034cd PC ca56		  6436          BLT     C_LOOP
000034cf PC 9cd0830c		  6437          CMPQB   TRUE, A_PARAM           ;IF ERROR IN LINE THEN
000034d3 PC 1a08		  6438          BNE     NO_CODE_OUT:B           ;NO CODE OUT
000034d5 PC 02ba14		  6439          BSR     WRIT_LN
000034d8 PC 02ba20		  6440          BSR     ALISTING        ;DO LISTING
				  6441  NO_CODE_OUT:
000034db PC cfd7832bbe8a	  6442          ACBD    -1, COUNTER, NEXT_LINE
000034e1 PC 1cd18338		  6443          CMPQB   PASS2, PASS_NUM         ;IF PASS 2 THEN ASSEMBLY FINI
000034e5 PC 0a32		  6444          BEQ     DID_ASM:B        
000034e7 PC 1fd0831b		  6445          CMPQD   FALSE, ERR_CNT          ;IF ERROR THEN ABORT PASS2
000034eb PC 1a2c		  6446          BNE     DID_ASM:B
000034ed PC 02ba5f		  6447          BSR     BUF_CLR                 ;ELSE OURPUT AND START PASS2
000034f0 PC ce80debd8c834a05	  6448          MOVMB   PASS2_MES, IOBUF, 6
000034f8 PC 02b9f1		  6449          BSR     WRIT_LN
000034fb PC 02b9fd		  6450          BSR     ALISTING        ;DO LISTING
000034fe PC 5cd18338		  6451          MOVQB   PASS2, PASS_NUM         ;SET PASS 2 FLAG AND DO IT
00003502 PC eabe42		  6452          BR      PASS_2
00003505 PC 454e445f415353454d42  6453  END_MES:        .BYTE   'END_ASSEMBLY'
00003511 PC 4552524f5253	  6454  END_MESA:       .BYTE   'ERRORS'
				  6455  DID_ASM:
00003517 PC 02ba35		  6456          BSR     BUF_CLR
0000351a PC ce80de6b834a0b	  6457          MOVMB   END_MES, IOBUF, 12      ;SET END MESSAGE INTO BUFFER
00003521 PC ce80de70836805	  6458          MOVMB   END_MESA, IOBUF+30, 6
00003528 PC 5cd1830b		  6459          MOVQB   DEC, BASE       
0000352c PC d7d5831b		  6460          MOVD    ERR_CNT, TOS
00003530 PC 028b4f		  6461          BSR     N_TO_ASC
00003533 PC 17b8		  6462          MOVD    TOS, R0
00003535 PC 97d683e18359	  6463          MOVD    NUMCH, IOBUF+15
0000353b PC 02b9ae		  6464          BSR     WRIT_LN
0000353e PC 02b9ba		  6465          BSR     ALISTING        ;DO LISTING
00003541 PC 1fd0831b		  6466          CMPQD   0, ERR_CNT
00003545 PC 1a1c		  6467          BNE     OUT_ASM:B
00003547 PC 9fd78346		  6468          CMPQD   -1, A_MOD       ;CHECK FOR AUTO MODE
0000354b PC 0a12		  6469          BEQ     NOT_A1:B
0000354d PC eba100fffe00	  6470          ANDD    H'FFFE00, R7    ;R7 IS LAST ADDR
00003553 PC c3a100000200	  6471          ADDD    H'200, R7
00003559 PC 973e83d0		  6472          MOVD    R7, A_SB        ;SB START AT PAGE       
0000355d PC dcd08337		  6473  NOT_A1: MOVQB   TRUE, ASS_BLED
				  6474  OUT_ASM:
00003561 PC eab8e2		  6475          BR      COMD_LOOP:W
				  6476  ;------------------------------------------------------------------------------
				  6477  ;   T A P E    I / O    P R O C E S S
				  6478  ;
				  6479  ;       TAPE READ ERROR MESSAGES
00003564 PC 54494d5f4f5554	  6480  T_OUT:  .BYTE   'TIM_OUT'
0000356b PC 4241445f46524d	  6481  B_FRM:  .BYTE   'BAD_FRM'
00003572 PC 4352435f455252	  6482  E_CRC:  .BYTE   'CRC_ERR'
				  6483                                  ;SEE TIO.ASM FOR MORE INFO ON CYCLE TIMINGS
				  6484  TAPER:  ;TAPE READ
00003579 PC 94a603830b		  6485          MOVB    HEX, BASE               ;GET PARAMETERS AS HEX
0000357e PC 5cd08323		  6486          MOVQB   FALSE, TEMP2            ;ASSUME NO PARAMETER
00003582 PC 8fd182fa		  6487          ADDQD   3, VECIN3               ;CHECK FOR PARRAMETER
00003586 PC 02b9dd		  6488          BSR     LINE_PARS
00003589 PC 9cd0830c		  6489          CMPQB   TRUE, A_PARAM           ;IF PARAMETER IS PRESENT THEN
0000358d PC 0a0a		  6490          BEQ     BINLOAD:B               ;LOAD DATA AT THAT ADDRESS
0000358f PC 27d08820		  6491          ADDR    TEXT, R0
00003593 PC d705		  6492          MOVD    R0, TOS
00003595 PC ea28		  6493          BR      LOADT:B                 ;LOAD TEXT BUFFER
				  6494  BINLOAD:
00003597 PC 17d0881c		  6495          MOVD    TXTEND, R0              ;CHECK FOR
0000359b PC 57d08818		  6496          MOVD    LINES, R1               ;TEXT PLUS DEBUG RANGE
0000359f PC ce63a000000008	  6497          MULD    8, R1
000035a6 PC 0308		  6498          ADDD    R1, R0  
000035a8 PC 03a000000008	  6499          ADDD    8,R0
000035ae PC 07d08306		  6500          CMPD    PAR_VAL, R0             ;CHECK FOR VALID SPACE
000035b2 PC 7ab92c		  6501          BLE     BAD_MEM                 ;TEXT IS SAFE AND SO IS DEBUG DATA 
000035b5 PC dcd08323		  6502          MOVQB   TRUE, TEMP2             ;DOING A BIN LOAD
000035b9 PC d7d58306		  6503          MOVD    PAR_VAL, TOS
				  6504          ;
000035bd PC e7d58313		  6505  LOADT:  ADDR    ERROR, TOS              ;ERROR RETURN
000035c1 PC 029aa6		  6506          BSR     TREAD                   ;START TAPE READ ROUTINE
000035c4 PC 97be8327		  6507          MOVD    TOS, TEMP3              ;GET LAST ADDR LOADED
000035c8 PC 9fd08313		  6508          CMPQD   ASYNC, ERROR            ;CHECK FOR VERY BAD ERROR
000035cc PC 1a0e		  6509          BNE     FORMC:B                 ;A TIMOUT?
000035ce PC a7debf968313	  6510          ADDR    T_OUT, ERROR
000035d4 PC 02b8df		  6511          BSR     ERR_MES
000035d7 PC eab86c		  6512          BR      COMD_LOOP
000035da PC 1fd18313		  6513  FORMC:  CMPQD   FREC, ERROR
000035de PC 1a0e		  6514          BNE     FIT:B                   ;CHECK FOR BAD TAPE FORMAT
000035e0 PC a7debf8b8313	  6515          ADDR    B_FRM, ERROR
000035e6 PC 02b8cd		  6516          BSR     ERR_MES
000035e9 PC eab85a		  6517          BR      COMD_LOOP
000035ec PC 9cd08323		  6518  FIT:    CMPQB   TRUE, TEMP2
000035f0 PC 0a8036		  6519          BEQ     ABIN:w                  ;DID A BINARY LOAD
000035f3 PC 97d68327881c	  6520          MOVD    TEMP3, TXTEND           ;ELSE SET END OF TEXT BUFFER;
000035f9 PC 27d08820		  6521          ADDR    TEXT, R0                ;SET LINE NUMBER
000035fd PC 57d0881c		  6522          MOVD    TXTEND, R1
00003601 PC 5fd08818		  6523          MOVQD   0, LINES                ;SET LINES TO START
00003605 PC 1c4000		  6524  MOL:    CMPQB   0, 0(R0)                ;CHECK FOR NUL FILLER
00003608 PC 0a12		  6525          BEQ     ENDT:B 
0000360a PC 04a20d00		  6526          CMPB    CR, 0(R0)               ;COUNT CR FOR RANGE OF
0000360e PC 1a06		  6527          BNE     NOTL:B                  ;TEXT BUFFER. 1 CR = 1 LINE
00003610 PC 8fd08818		  6528          ADDQD   1, LINES                ;ADD TO LINES
00003614 PC 8f00		  6529  NOTL:   ADDQD   1, R0
00003616 PC 4700		  6530          CMPD    R0, R1
00003618 PC 7a6d		  6531          BLE     MOL
0000361a PC 9706881c		  6532  ENDT:   MOVD    R0, TXTEND              ;SET TRUE TEXT END
0000361e PC 5fd08804		  6533          MOVQD   0, LINNUM               ;START LINE
00003622 PC 5cd08337		  6534          MOVQB   FALSE, ASS_BLED         ;INITIALIZE TEXT NOT ASSEMBLED
00003626 PC 1fd28313		  6535  ABIN:   CMPQD   RCRC, ERROR             ;CHECK FOR ERROR
0000362a PC 0a05		  6536          BEQ     ECRC_:B
0000362c PC eab817		  6537          BR      COMD_LOOP:W
0000362f PC a7debf438313	  6538  ECRC_:  ADDR    E_CRC, ERROR
00003635 PC 02b87e		  6539          BSR     ERR_MES
00003638 PC eab80b		  6540          BR      COMD_LOOP
				  6541
				  6542  TAPEW:  ;TAPE WRITE PROCESS
0000363b PC d7a100000064	  6543          MOVD    CYCLE, R7               ;SET DEFAULT BAUD
00003641 PC 8fd182fa		  6544          ADDQD   3, VECIN3
00003645 PC 84a44082fa00	  6545          CMPB    '@', 0(VECIN3)           ;CHECK FOR BAUD SETTING
0000364b PC 1a19		  6546          BNE     NOBAUD:B
0000364d PC 8fd082fa		  6547          ADDQD   1, VECIN3                ;START OF BAUD VALUE
00003651 PC 94a602830b		  6548          MOVB    DEC, BASE               ;IN DECIMAL
00003656 PC 02b90d		  6549          BSR     LINE_PARS               ;GET IT
00003659 PC 1cd0830c		  6550          CMPQB   FALSE, A_PARAM
0000365d PC 0ab7e3		  6551          BEQ     NOT_CMD
00003660 PC d7d18306		  6552          MOVD    PAR_VAL, R7
00003664 PC 94a603830b		  6553  NOBAUD: MOVB    HEX, BASE               ;GET ADDRS AS HEX
00003669 PC 02b8fa		  6554          BSR     LINE_PARS               ;GET START ADDR
0000366c PC 1fd08313		  6555          CMPQD   FALSE, ERROR
00003670 PC 1ab7d0		  6556          BNE     NOT_CMD
00003673 PC 1cd0830c		  6557          CMPQB   FALSE, A_PARAM          ;IF NOT ADDR THEN DO TEXT WRITE
00003677 PC 0a8038		  6558          BEQ     WTEXT:W
0000367a PC 97d683068323	  6559          MOVD    PAR_VAL, TEMP2          ;SAVE START ADDR
00003680 PC 02b8e3		  6560          BSR     LINE_PARS               ;GET SECOND ADDR
00003683 PC 1fd08313		  6561          CMPQD   FALSE, ERROR
00003687 PC 1ab7b9		  6562          BNE     NOT_CMD
0000368a PC 1cd0830c		  6563          CMPQB   FALSE, A_PARAM          ;IF NO SECOND PARAMETER THEN NOT A 
0000368e PC 0ab7b2		  6564          BEQ     NOT_CMD                 ;COMMAND
00003691 PC 87d683238306	  6565          CMPD    TEMP2, PAR_VAL          ;CHECK FOR GOT SEQUENCE
00003697 PC 6ab7a9		  6566          BGT     NOT_CMD                 ;
0000369a PC 27d08820		  6567          ADDR    TEXT, R0 
0000369e PC 07d08323		  6568          CMPD    TEMP2, R0               ;CHECK FOR VALID RAM DUMP
000036a2 PC cab79e		  6569          BLT     NOT_CMD
000036a5 PC d7d58323		  6570          MOVD    TEMP2, TOS              ;PASS START ADDR
000036a9 PC d7d58306		  6571          MOVD    PAR_VAL, TOS            ;PASS LAST ADDR
000036ad PC ea0c		  6572          BR      T_W:B   
000036af PC 27d08820		  6573  WTEXT:  ADDR    TEXT, R0
000036b3 PC d705		  6574          MOVD    R0,TOS                  ;START OF TEXT DATA
000036b5 PC d7d5881c		  6575          MOVD    TXTEND, TOS             ;END OF TEXT DATA
000036b9 PC d73d		  6576  T_W:    MOVD    R7, TOS                 ;BAUD RATE
				  6577          ;       ======
000036bb PC 029867		  6578          BSR     TWRITE
				  6579          ;       ======
000036be PC eab785		  6580          BR      COMD_LOOP
000036c1 PC			  6581          .endseg
				  6582  ;
				  6583  ;---------------------------------------------------------------------------
				  6584
				  6585  RADIX:                                  ;SELECT RADIX COMMAND
000036c1 PC 8fd182fa		  6586          ADDQD   3, VECIN3
000036c5 PC 84a44882fa00	  6587          CMPB    'H', 0(VECIN3)
000036cb PC 0a1d		  6588          BEQ     SHEX:B
000036cd PC 84a46882fa00	  6589          CMPB    'h', 0(VECIN3)
000036d3 PC 0a15		  6590          BEQ     SHEX:B
000036d5 PC 84a44482fa00	  6591          CMPB    'D', 0(VECIN3)
000036db PC 0a14		  6592          BEQ     SDEC:B
000036dd PC 84a46482fa00	  6593          CMPB    'd', 0(VECIN3)
000036e3 PC 0a0c		  6594          BEQ     SDEC:B
000036e5 PC eab75b		  6595          BR      NOT_CMD
000036e8 PC dcd1830a		  6596  SHEX:   MOVQB   HEX, MON_BASE
000036ec PC eab757		  6597          BR      COMD_LOOP
000036ef PC 5cd1830a		  6598  SDEC:   MOVQB   DEC, MON_BASE   
000036f3 PC eab750		  6599          BR      COMD_LOOP
				  6600
				  6601  ;
				  6602  ;---------------------------------------------------------------------------
				  6603  ;       RS-232 PORT ACCESS COMMANDS
				  6604  ;
				  6605
				  6606  ;       PORT ACCESS MESSAGES
000036f6 PC 42595445535f57524954  6607  BYT_ZOUT: .BYTE 'BYTES_WRITTEN     '    ;COMPLETION MESSAGE FOR WRITE
00003708 PC 42595445535f52454144  6608  BYT_ZIN:  .BYTE 'BYTES_READ        '    ;    "          "     "  READ 
0000371a PC 4241445f53594e	  6609  BAD_SYN:  .BYTE 'BAD_SYN'               ;HANDSHAKE ERROR MESSAGE        
				  6610
				  6611  ;ROUTINE TO DO COMMON PARSING
00003721 PC 94a603830b		  6612  ZCOM:   MOVB    HEX, BASE               ;INTERPRET NUMBERS AS HEX
00003726 PC 0fd182fa		  6613          ADDQD   2, VECIN3                ;START OF COMMON FEATURES
0000372a PC 5fd0831f		  6614          MOVQD   0,TEMP4                 ;SET TO HANDSHAKE MODE
0000372e PC 84a45382fa00	  6615          CMPB    'S',0(VECIN3)            ;CHECK IF S IS SPECIFIED
00003734 PC 0a24		  6616          BEQ     ZPAR1:B                 ;YESY THEN GET FIRST PARAM
00003736 PC 84a47382fa00	  6617          CMPB    's',0(VECIN3)            ;CHECK FOR LOWER CASE
0000373c PC 0a1c		  6618          BEQ     ZPAR1:B                 ;YES, THEN GET FIRST PARAM
0000373e PC 98a601831f		  6619          ORB     1,TEMP4                 ;NOW SET NO HANDSHAKE MODE
00003743 PC 84a44682fa00	  6620          CMPB    'F',0(VECIN3)            ;YES, THEN GET FIRST PARAM
00003749 PC 0a0f		  6621          BEQ     ZPAR1:B                 ;ELSE CHECK FOR LOWER CASE
0000374b PC 84a46682fa00	  6622          CMPB    'f',0(VECIN3)
00003751 PC 0a07		  6623          BEQ     ZPAR1:B                 ;IF NO MATCH THEN
00003753 PC 17b8		  6624  ZERR1:  MOVD    TOS,R0                  ;CLEAR STACK OF RETURN ADDR
00003755 PC eab6eb		  6625          BR      NOT_CMD                 ;AND DO ERROR RETURN
00003758 PC 8fd082fa		  6626  ZPAR1:  ADDQD   1,VECIN3                 ;POINT TO NEXT ELEMENT
0000375c PC 84a46d82fa00	  6627          CMPB    'm',0(VECIN3)            ;GO WITH DEFAULT IF SPACE
00003762 PC 0a1f		  6628          BEQ     ZPAR2:B
00003764 PC 84a44d82fa00	  6629          CMPB    'M',0(VECIN3)            ;GO WITH DEFAULT IF SPACE
0000376a PC 0a17		  6630          BEQ     ZPAR2:B
0000376c PC 98a602831f		  6631          ORB     2,TEMP4                 ;SET AND CHECK FOR PORT 1 (AUX)
00003771 PC 84a44182fa00	  6632          CMPB    'A',0(VECIN3)            ;YES THE GET NEXT PARAM 
00003777 PC 0a0a		  6633          BEQ     ZPAR2:B
00003779 PC 84a46182fa00	  6634          CMPB    'a',0(VECIN3)            ;CHECK FOR LOWER CASE
0000377f PC 1a54		  6635          BNE     ZERR1                   ;IF NO MATCH THEN NOT COMMAND
00003781 PC 0fd182fa		  6636  ZPAR2:  ADDQD   2,VECIN3                 ;START OF LAST TWO PARAM
00003785 PC 02b7de		  6637          BSR     LINE_PARS
00003788 PC 1cd0830c		  6638          CMPQB   FALSE,A_PARAM           ;IF NO PARAMETERS THEN DONE
0000378c PC 0a805a		  6639          BEQ     ZDOIT:W                 ;ELSE CHECK FOR PARAM ERROR
0000378f PC 1fd08313		  6640          CMPQD   FALSE,ERROR             ;IF NO ERROR PROCEED TO NEXT PARAM
00003793 PC 0a07		  6641          BEQ     ZOK1:B
00003795 PC 17b8		  6642  ZERR2:  MOVD    TOS,R0                  ;CLEAR STACK
00003797 PC eab6ac		  6643          BR      COMD_LOOP
0000379a PC 98a604831f		  6644  ZOK1:   ORB     4,TEMP4                 ;BINARY DATA TRANSFER   
0000379f PC 97d683068323	  6645          MOVD    PAR_VAL,TEMP2           ;ENTER PARAM AS START ADDR
000037a5 PC 02b7be		  6646          BSR     LINE_PARS               ;GET SECOND PARAMETER
000037a8 PC 9cd0830c		  6647          CMPQB   TRUE,A_PARAM            ;NO, THEN NOT A COMMAND
000037ac PC 1abfa7		  6648          BNE     ZERR1
000037af PC 1fd08313		  6649          CMPQD   FALSE,ERROR             ;VALUE ERROR?
000037b3 PC 1a62		  6650          BNE     ZERR2                   ;YES
000037b5 PC 97d683068327	  6651          MOVD    PAR_VAL,TEMP3           ;ELSE SAVE PARAMETER
000037bb PC 87d683238327	  6652          CMPD    TEMP2,TEMP3             ;VALID ORDER?
000037c1 PC dabf92		  6653          BGE     ZERR1                   ;NO, THEN ERROR
000037c4 PC 17d08818		  6654          MOVD    LINES,R0                ;CHECK THAT GIVEN ADDRESS
000037c8 PC ce23a000000008	  6655          MULD    8,R0                    ;RANGE DOES NOT CONFLICT WITH
000037cf PC 57d0881c		  6656          MOVD    TXTEND,R1               ;EDIT BUFFER OR
000037d3 PC 43a000000008	  6657          ADDD    8,R1                    ;DEBUG DATA
000037d9 PC 4300		  6658          ADDD    R0,R1
000037db PC 47d08323		  6659          CMPD    TEMP2,R1                ;IF START IS LESS THAN NEEDE MEM
000037df PC 6a07		  6660          BGT     ZDOIT:B                 ;THEN OK, ELSE
000037e1 PC 57b8		  6661          MOVD    TOS,R1                  ;CLEAR STACK
000037e3 PC eab6fb		  6662          BR      BAD_MEM
000037e6 PC b4a601831f		  6663  ZDOIT:  TBITB   1,TEMP4
000037eb PC 8ac0000008		  6664          BFS     ZECHO:d                 ; migry add :D ;
000037f0 PC dcd005		  6665          MOVQB   TRUE,NOTECHO
000037f3 PC 1200		  6666  ZECHO:  RET     0
				  6667
				  6668  ;-----------------------------------------------------------------------------
				  6669  ;               THE WRITE ROUTINE
				  6670  ;
000037f5 PC 02bf2c		  6671  ZOUT:   BSR     ZCOM
000037f8 PC 5f20		  6672          MOVQD   0,R4
000037fa PC b4a602831f		  6673          TBITB   2,TEMP4                 ;IS THIS A DATA WRITE?
000037ff PC 8a1b		  6674          BFS     ZOBIN:B                 ;NO, THEN SET UP EDIT BUFFER 
00003801 PC a7d688208323	  6675          ADDR    TEXT,TEMP2              ;PARAMETERS
00003807 PC 97d6881c8327	  6676          MOVD    TXTEND,TEMP3            ;START OF TEXT AND,
0000380d PC 87d683238327	  6677          CMPD    TEMP2,TEMP3             ;IS THERE SOMETHING IN BUFFER?
00003813 PC dab62d		  6678          BGE     NOT_CMD                 ;NO, THEN ERROR
00003816 PC 8fd78327		  6679          ADDQD   -1,TEMP3                ;END OF TEXT
				  6680                                          ;TEMP4 PORT NUMBER
				  6681                                          ;TEMP2 START
				  6682                                          ;TEMP3 END
				  6683  ZOBIN:                                  ;READ HANSHAKE
0000381a PC b4a600831f		  6684          TBITB   0,TEMP4
0000381f PC 8ac000002f		  6685          BFS     ZOFAST:d                ; migry add :D ;
00003824 PC df01		  6686          MOVQD   READ, R0                ;SVC INPUT
00003826 PC 67d0834a		  6687          ADDR    IOBUF, R1               
0000382a PC 5f17		  6688          MOVQD   -2, R2
0000382c PC 5f18		  6689          MOVQD   MAIN, R3
0000382e PC dcd005		  6690          MOVQB   TRUE,NOTECHO
00003831 PC b4a601831f		  6691          TBITB   1,TEMP4
00003836 PC 9a07		  6692          BFC     ZO0:B
00003838 PC df18		  6693          MOVQD   AUX,R3
0000383a PC 5cd005		  6694          MOVQB   FALSE,NOTECHO
0000383d PC e2			  6695  ZO0:    SVC
0000383e PC 84a62a834a		  6696          CMPB    '*',IOBUF
00003843 PC 0a0b		  6697          BEQ     ZO5:B
00003845 PC a7debed58313	  6698          ADDR    BAD_SYN,ERROR           ;ELSE OUTPUT ERROR MESSAGE
0000384b PC 02b668		  6699          BSR     ERR_MES
				  6700  ZOFAST:
0000384e PC 02b6fe		  6701  ZO5:    BSR     BUF_CLR                 ;CLEAR BUFFER
00003851 PC e7d1834a		  6702          ADDR    IOBUF,R7
00003855 PC d4a33e00		  6703          MOVB    '>',0(R7)               ;START OF DATA
00003859 PC 8f38		  6704          ADDQD   1,R7                    ;POINT TO NEXT BUFFER SPACE
0000385b PC 54a010		  6705          MOVB    16,R1
0000385e PC 87d683238327	  6706  ZO1:    CMPD    TEMP2,TEMP3             ;IF NOT DONE THEN
00003864 PC 7a06		  6707          BLE     ZO2:B
00003866 PC 5c00		  6708          MOVQB   0,R0
00003868 PC ea07		  6709          BR      ZO3:B
0000386a PC 1490832300		  6710  ZO2:    MOVB    0(TEMP2),R0
0000386f PC ced805		  6711  ZO3:    MOVZBD  R0,TOS
00003872 PC dcd1830b		  6712          MOVQB   HEX,BASE
00003876 PC dcd08312		  6713          MOVQB   TRUE,LEADZERO   
0000387a PC 028805		  6714          BSR     N_TO_ASC
0000387d PC 5cd08312		  6715          MOVQB   FALSE,LEADZERO  
00003881 PC 17b8		  6716          MOVD    TOS,R0
00003883 PC d5d383e700		  6717          MOVW    NUMCH+6,0(R7)
00003888 PC 8fd08323		  6718          ADDQD   1,TEMP2
0000388c PC 0f39		  6719          ADDQD   2,R7    
0000388e PC cc0f50		  6720          ACBB    -1,R1,ZO1
00003891 PC d4a30d00		  6721          MOVB    CR,0(R7)
00003895 PC 5f02		  6722          MOVQD   WRITE, R0       ;THRU SVC FUNCTION
00003897 PC 67d0834a		  6723          ADDR    IOBUF, R1       ;LINE LENGTH IS 80
0000389b PC ce98a022		  6724          MOVZBD  34, R2          ;USED WITH BUF CLR ROUTINE
0000389f PC 5f18		  6725          MOVQD   MAIN, R3
000038a1 PC b4a601831f		  6726          TBITB   1,TEMP4
000038a6 PC 9a04		  6727          BFC     ZO4:B
000038a8 PC df18		  6728          MOVQD   AUX,R3
000038aa PC e2			  6729  ZO4:    SVC
000038ab PC 8f20		  6730          ADDQD   1,R4
000038ad PC 94a62e834a		  6731          MOVB    '.',IOBUF
000038b2 PC 5f02		  6732          MOVQD   WRITE, R0       ;THRU SVC FUNCTION
000038b4 PC 67d0834a		  6733          ADDR    IOBUF, R1       ;LINE LENGTH IS 80
000038b8 PC ce98a001		  6734          MOVZBD  1, R2           ;USED WITH BUF CLR ROUTINE
000038bc PC 07250000003c	  6735          CMPD    R4,60
000038c2 PC ca0b		  6736          BLT     ZO11:B
000038c4 PC 94a60d834b		  6737          MOVB    CR,IOBUF+1
000038c9 PC 5f20		  6738          MOVQD   0,R4
000038cb PC 8f10		  6739          ADDQD   1,R2    
000038cd PC 5f18		  6740  ZO11:   MOVQD   MAIN, R3
000038cf PC b4a601831f		  6741          TBITB   1,TEMP4
000038d4 PC 9ac0000006		  6742          BFC     ZO10:d          ; migry add :D ;
000038d9 PC e2			  6743          SVC
000038da PC 87d683238327	  6744  ZO10:   CMPD    TEMP2,TEMP3
000038e0 PC 7abf3a		  6745          BLE     ZOBIN
000038e3 PC b4a600831f		  6746          TBITB   0,TEMP4
000038e8 PC 8ac000002f		  6747          BFS     ZOFAST1:d       ; migry add :D ;
000038ed PC df01		  6748          MOVQD   READ, R0        ;SVC INPUT
000038ef PC 67d0834a		  6749          ADDR    IOBUF, R1               
000038f3 PC 5f17		  6750          MOVQD   -2, R2
000038f5 PC 5f18		  6751          MOVQD   MAIN, R3
000038f7 PC dcd005		  6752          MOVQB   TRUE,NOTECHO
000038fa PC b4a601831f		  6753          TBITB   1,TEMP4
000038ff PC 9a07		  6754          BFC     ZO6:B
00003901 PC 5cd005		  6755          MOVQB   FALSE,NOTECHO
00003904 PC df18		  6756          MOVQD   AUX,R3
00003906 PC e2			  6757  ZO6:    SVC
00003907 PC 84a62a834a		  6758          CMPB    '*',IOBUF
0000390c PC 0a0b		  6759          BEQ     ZO7:B
0000390e PC a7debe0c8313	  6760          ADDR    BAD_SYN,ERROR   ;ELSE OUTPUT ERROR MESSAGE
00003914 PC 02b59f		  6761          BSR     ERR_MES
				  6762  ZOFAST1:
00003917 PC 02b635		  6763  ZO7:    BSR     BUF_CLR
0000391a PC e7d1834a		  6764          ADDR    IOBUF,R7
0000391e PC d4a33c00		  6765          MOVB    '<',0(R7)
00003922 PC d4a30d01		  6766          MOVB    CR,1(R7)
00003926 PC 5f02		  6767          MOVQD   WRITE, R0       ;THRU SVC FUNCTION
00003928 PC 67d0834a		  6768          ADDR    IOBUF, R1       ;LINE LENGTH IS 80
0000392c PC ce98a002		  6769          MOVZBD  2, R2           ;USED WITH BUF CLR ROUTINE
00003930 PC 5f18		  6770          MOVQD   MAIN, R3
00003932 PC b4a601831f		  6771          TBITB   1,TEMP4
00003937 PC 9a04		  6772          BFC     ZO8:B
00003939 PC df18		  6773          MOVQD   AUX,R3
0000393b PC e2			  6774  ZO8:    SVC
0000393c PC eab507		  6775          BR      COMD_LOOP               ;DONE
				  6776
				  6777  ;-------------------------------------------------------------------------
				  6778  ;       PORT READ ROUTINE
				  6779  ;
0000393f PC 02bde2		  6780  ZIN:    BSR     ZCOM
00003942 PC b4a602831f		  6781          TBITB   2,TEMP4                 ;IS THIS A DATA WRITE?
00003947 PC 8a10		  6782          BFS     ZIST:B                  ;NO, THEN SET UP EDIT BUFFER 
00003949 PC a7d688208323	  6783          ADDR    TEXT,TEMP2              ;PARAMETERS
0000394f PC 97a6000fffff8327	  6784          MOVD    H'FFFFF,TEMP3           ; TEMP4 PORT NUMBER
00003957 PC 5fd0832b		  6785  ZIST:   MOVQD   0,COUNTER                       ; TEMP2 START
0000395b PC 5f20		  6786          MOVQD   0,R4
				  6787                                          ; TEMP3 END
				  6788  ZIBIN:  
0000395d PC df01		  6789          MOVQD   READ, R0                ;SVC INPUT
0000395f PC 67d0834a		  6790          ADDR    IOBUF, R1               
00003963 PC 97a0ffffffd8	  6791          MOVD   -40, R2
00003969 PC 5f18		  6792          MOVQD   MAIN, R3
0000396b PC dcd005		  6793          MOVQB   TRUE,NOTECHO
0000396e PC b4a601831f		  6794          TBITB   1,TEMP4
00003973 PC 9a07		  6795          BFC     ZI0:B
00003975 PC 5cd005		  6796          MOVQB   FALSE,NOTECHO
00003978 PC df18		  6797          MOVQD   AUX,R3
0000397a PC e2			  6798  ZI0:    SVC
0000397b PC e7d1834a		  6799          ADDR    IOBUF,R7
0000397f PC c4a33c00		  6800          CMPB    '<',0(R7)
00003983 PC 0a80db		  6801          BEQ     ZI100:W
00003986 PC c4a33e00		  6802          CMPB    '>',0(R7)
0000398a PC 0a0b		  6803          BEQ     ZI1:B
0000398c PC a7debd8e8313	  6804          ADDR    BAD_SYN,ERROR           ;ELSE OUTPUT ERROR MESSAGE
00003992 PC 02b521		  6805          BSR     ERR_MES
00003995 PC 8f38		  6806  ZI1:    ADDQD   1,R7
00003997 PC 94a110		  6807          MOVB    16,R6
				  6808
0000399a PC 97a6202020208390	  6809  ZI4:    MOVD    '    ',IOBUF2
000039a2 PC 97a6202020208393	  6810          MOVD    '    ',IOBUF2+3
000039aa PC 94a6488390		  6811          MOVB    'H',IOBUF2
000039af PC 94a6278391		  6812          MOVB    "'",IOBUF2+1
000039b4 PC 957e008392		  6813          MOVW    0(R7),IOBUF2+2
000039b9 PC 94a60d8394		  6814          MOVB    CR,IOBUF2+4
000039be PC 67d18390		  6815          ADDR    IOBUF2,R5
000039c2 PC d72d		  6816          MOVD    R5,TOS
000039c4 PC 8f29		  6817          ADDQD   3,R5
000039c6 PC d72d		  6818          MOVD    R5,TOS
000039c8 PC 0285cb		  6819          BSR     A_NUM   
000039cb PC 17b8		  6820          MOVD    TOS,R0
000039cd PC 1fd08313		  6821          CMPQD   FALSE,ERROR
000039d1 PC 0a0e		  6822          BEQ     ZI8:B
000039d3 PC a7debb988313	  6823          ADDR    B_FRM, ERROR
000039d9 PC 02b4da		  6824          BSR     ERR_MES
000039dc PC eab467		  6825          BR      COMD_LOOP
000039df PC 9404832300		  6826  ZI8:    MOVB    R0,0(TEMP2)
000039e4 PC 04a00d		  6827          CMPB    CR,R0
000039e7 PC 1a06		  6828          BNE     ZI11:B
000039e9 PC 8fd0832b		  6829          ADDQD   1,COUNTER
000039ed PC 8fd08323		  6830  ZI11:   ADDQD   1,TEMP2
000039f1 PC 0f39		  6831          ADDQD   2,R7
000039f3 PC 87d683238327	  6832          CMPD    TEMP2,TEMP3
000039f9 PC 6a8083		  6833          BGT     ZI200:W
000039fc PC cc37bf9e		  6834          ACBB    -1,R6,ZI4
00003a00 PC b4a600831f		  6835          TBITB   0,TEMP4
00003a05 PC 8ac0000056		  6836          BFS     ZIFAST:d        ; migry add :D ;
				  6837  ;----
00003a0a PC 8f20		  6838          ADDQD   1,R4
00003a0c PC 94a62e834a		  6839          MOVB    '.',IOBUF
00003a11 PC 5f02		  6840          MOVQD   WRITE, R0       ;THRU SVC FUNCTION
00003a13 PC 67d0834a		  6841          ADDR    IOBUF, R1       ;LINE LENGTH IS 80
00003a17 PC ce98a001		  6842          MOVZBD  1, R2           ;USED WITH BUF CLR ROUTINE
00003a1b PC 07250000003c	  6843          CMPD    R4,60
00003a21 PC ca0b		  6844          BLT     ZI21:B
00003a23 PC 94a60d834b		  6845          MOVB    CR,IOBUF+1
00003a28 PC 5f20		  6846          MOVQD   0,R4
00003a2a PC 8f10		  6847          ADDQD   1,R2    
00003a2c PC 5f18		  6848  ZI21:   MOVQD   MAIN, R3
00003a2e PC b4a601831f		  6849          TBITB   1,TEMP4
00003a33 PC 9a03		  6850          BFC     ZI22:B
00003a35 PC e2			  6851          SVC
				  6852  ZI22:
00003a36 PC 02b516		  6853          BSR     BUF_CLR
00003a39 PC e7d1834a		  6854          ADDR    IOBUF,R7
00003a3d PC d4a32a00		  6855          MOVB    '*',0(R7)
00003a41 PC d4a30d01		  6856          MOVB    CR,1(R7)
00003a45 PC 5f02		  6857          MOVQD   WRITE, R0       ;THRU SVC FUNCTION
00003a47 PC 67d0834a		  6858          ADDR    IOBUF, R1       ;LINE LENGTH IS 80
00003a4b PC ce98a002		  6859          MOVZBD  2, R2           ;USED WITH BUF CLR ROUTINE
00003a4f PC 5f18		  6860          MOVQD   MAIN, R3
00003a51 PC b4a601831f		  6861          TBITB   1,TEMP4
00003a56 PC 9a04		  6862          BFC     ZI9:B
00003a58 PC df18		  6863          MOVQD   AUX,R3
00003a5a PC e2			  6864  ZI9:    SVC
				  6865  ZIFAST:
00003a5b PC eabf02		  6866          BR      ZIBIN
00003a5e PC b4a602831f		  6867  ZI100:  TBITB   2,TEMP4
00003a63 PC 8ac0000019		  6868          BFS     ZI200:d         ; migry add :D ;
00003a68 PC 97d68323881c	  6869          MOVD    TEMP2,TXTEND
00003a6e PC 5fd08804		  6870          MOVQD   0,LINNUM
00003a72 PC 97d6832b8818	  6871          MOVD    COUNTER,LINES
00003a78 PC 5cd08337		  6872          MOVQB   FALSE,ASS_BLED
				  6873  ZI200:
00003a7c PC b4a600831f		  6874          TBITB   0,TEMP4 
00003a81 PC 8ac0000027		  6875          BFS     ZI40:d          ; migry add :D ;    
00003a86 PC e7d1834a		  6876          ADDR    IOBUF,R7
00003a8a PC d4a32a00		  6877          MOVB    '*',0(R7)
00003a8e PC d4a30d01		  6878          MOVB    CR,1(R7)
00003a92 PC 5f02		  6879          MOVQD   WRITE, R0       ;THRU SVC FUNCTION
00003a94 PC 67d0834a		  6880          ADDR    IOBUF, R1       ;LINE LENGTH IS 80
00003a98 PC ce98a002		  6881          MOVZBD  2, R2           ;USED WITH BUF CLR ROUTINE
00003a9c PC 5f18		  6882          MOVQD   MAIN, R3
00003a9e PC b4a601831f		  6883          TBITB   1,TEMP4
00003aa3 PC 9a04		  6884          BFC     ZI50:B
00003aa5 PC df18		  6885          MOVQD   AUX,R3
00003aa7 PC e2			  6886  ZI50:    SVC
				  6887  ZI40:
00003aa8 PC eab39b		  6888          BR      COMD_LOOP               ;DONE
				  6889
				  6890  ;@@@@@@@@@@@@@@
				  6923
				  6924  ATR:
00003aab PC 0fd182fa		  6925          ADDQD   2,VECIN3
00003aaf PC 84a40d82fa00	  6926          CMPB    CR,0(VECIN3)
00003ab5 PC 0a22		  6927          BEQ     AT01
00003ab7 PC 8fd082fa		  6928          ADDQD   1,VECIN3
00003abb PC 02b4a8		  6929          BSR     LINE_PARS
00003abe PC 9cd0830c		  6930          CMPQB   TRUE,A_PARAM            ;NO, THEN NOT A COMMAND
00003ac2 PC 1ab37e		  6931          BNE     NOT_CMD
00003ac5 PC 1fd08313		  6932          CMPQD   FALSE,ERROR             ;VALUE ERROR?
00003ac9 PC 1ab377		  6933          BNE     NOT_CMD                 ;YES
00003acc PC 17d08306		  6934          MOVD    PAR_VAL,R0              ;ELSE SAVE PARAMETER
00003ad0 PC 9f07		  6935          CMPQD   -1,R0
00003ad2 PC 0ab36e		  6936          BEQ     NOT_CMD
00003ad5 PC ea04		  6937          BR      AT02:B
00003ad7 PC df07		  6938  AT01:   MOVQD   -1,R0
00003ad9 PC 0296ad		  6939  AT02:   BSR     INITAUXU                ;initialise second UART channel
00003adc PC eab367		  6940          BR      COMD_LOOP               ;DONE
				  6941
				  6942  ATM:
00003adf PC 0fd182fa		  6943          ADDQD   2,VECIN3
00003ae3 PC 84a40d82fa00	  6944          CMPB    CR,0(VECIN3)
00003ae9 PC 0ac0000023		  6945          BEQ     ATMX:d                  ; migry add :D ;
00003aee PC 8fd082fa		  6946          ADDQD   1,VECIN3
00003af2 PC 02b471		  6947          BSR     LINE_PARS
00003af5 PC 9cd0830c		  6948          CMPQB   TRUE,A_PARAM            ;NO, THEN NOT A COMMAND
00003af9 PC 1ab347		  6949          BNE     NOT_CMD
00003afc PC 1fd08313		  6950          CMPQD   FALSE,ERROR             ;VALUE ERROR?
00003b00 PC 1ab340		  6951          BNE     NOT_CMD                 ;YES
00003b03 PC 97d683068302	  6952          MOVD    PAR_VAL,MEMSIZ          ;ELSE SAVE PARAMETER
00003b09 PC eab33a		  6953          BR      COMD_LOOP
				  6954  ATMX:
00003b0c PC dfd78302		  6955          MOVQD   -1,MEMSIZ
00003b10 PC eab333		  6956          BR      COMD_LOOP               ;DONE
				  6957
				  6958  ; end of ahelpio.32k
				  6959  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				  6960  ; start of asub.32k
				  6961
				  6962  SRDLIN:
				  6963          ;++++++++++++++++
00003b13 PC ced0a5b8		  6964          MOVXBW  (-LINLIM),TOS
00003b17 PC 5cb8		  6965          MOVQB   TRMA,TOS        ;   RDLIN (-LINLIM,NDTRM,INBUF)
00003b19 PC e77d00		  6966          ADDR    INBUF(R7),TOS                   
				  6967          ;migry;SPRD    MOD,TOS         ;{FOR CXP}              
00003b1c PC 0210		  6968          BSR     RDLIN:B
				  6969          ;----------------
00003b1e PC 677900		  6970          ADDR    INBUF(R7),R5    ;   DTRM.SCN :=1
00003b21 PC ced9bb8050		  6971          MOVZWD  TOS,INLM(R7)
00003b26 PC c32b8050		  6972          ADDD    R5,INLM(R7)     ;   DTRM.INLM:=RDN
00003b2a PC 1200		  6973          RET     0
				  6974  ;
				  6975  ;
				  6976  ;    R D L I N       ( READ LIN PROCEDURE  )
				  6977  ;
				  6978  ;       LOCAL CONSTANTS
				  6979  ;
				  6980  ;
				  6981  ;
				  6982  ;
				  6983  ;       ARGUMENTS DEFINITIONS
				  6984  ;
				  6985  ;
				  6986  RDLIN:  .PROC                           ; PROCEDURE DEFINITION
			  6987  RDN:    .BLKW   ;WORD                   ; RDN : INTEGER*2 MAX # OF BYTES
			  6988  RDTRM:  .BLKB   ;BYTE                   ; RDTRM : INTEGER*1 TERMINAL #
			  6989  RDVEC:  .BLKD   ;DOUBLE                 ; VAR RDVEC : CHAR[1..RDN]
				  6990  ;
				  6991  ;       LOCAL VARIABLES
				  6992  ;
				  6993          .RETURNS
			  6994          .BLKW   ;WORD                   ; RETURN # OF READ BYTES
				  6995          .VAR    [R1,R2,R3]
00003b2c PC 820e00		  6996          .BEGIN
00003b2f PC 5c08		  6997            MOVQB   FALSE,R1                ; READLNF:=FALSE
00003b31 PC 1dc00d		  6998            CMPQW   0,RDN                   ; IF RDN<= THEN
00003b34 PC 7a09		  6999            BLE     RDLINA:B                ; BEGIN
00003b36 PC dc08		  7000            MOVQB   TRUE,R1                 ;   READLNF:=TRUE;
00003b38 PC 4e21c60d0d		  7001            NEGW    RDN,RDN                 ;   RDN:=-RDN;
				  7002                                            ; END
				  7003  RDLINA: 
00003b3d PC 5f10		  7004            MOVQD   0,R2                    ; N:=0
				  7005                                          ; REPEAT
				  7006  RDLIN1: 
				  7007            ;++++++++++++++++
00003b3f PC ddb8		  7008            MOVQW   TRUE,TOS                ; {RDCHR (CHR,FALSE,RDTRM)}
00003b41 PC d4c50c		  7009            MOVB    RDTRM,TOS
				  7010            ;migry;SPRD    MOD,TOS
00003b44 PC 0295b1		  7011            BSR     RDCHR
00003b47 PC 7ca5ff		  7012            ADJSPB  -1                      ; {REMOVE ENDF}
00003b4a PC d4b8		  7013            MOVB    TOS,R3                  ; CHR:=RDCHR (FALSE,RDTRM);
				  7014            ;----------------
00003b4c PC d4c50c		  7015            MOVB    RDTRM,TOS
00003b4f PC c4a07f		  7016            CMPB    DELETE,R3
00003b52 PC 1a05		  7017            BNE     RDLIN3:b 
00003b54 PC d4a008		  7018            MOVB    BACKSP,R3
00003b57 PC 02803d		  7019  RDLIN3:   BSR     DOECHO:W                ; DOECHO(CHR,RDTRM)
00003b5a PC 1cc00c		  7020            CMPQB   TRMA, RDTRM
00003b5d PC 1a8017		  7021            BNE     RDLIN2:W
00003b60 PC c4a008		  7022            CMPB    BACKSP,R3
00003b63 PC 1a11		  7023            BNE     RDLIN2:B
00003b65 PC 9c08		  7024            CMPQB   TRUE,R1                 ;   IF READLNF
00003b67 PC 1a0d		  7025            BNE     RDLIN2:B                ;    THEN
00003b69 PC 1f10		  7026            CMPQD   0,R2                    ;     IF N> 0
				  7027  ;       BGE     RDLIN2:B                ;       THEN
00003b6b PC da22		  7028            BGE     RDLINEX:B               ;       THEN
00003b6d PC 8fc708		  7029            ADDQD   -1,RDVEC                ;         N:=N-1;
00003b70 PC 8f17		  7030            ADDQD   -1,R2                   ; ELSE
00003b72 PC ea4d		  7031            BR      RDLIN1                  ; BEGIN
00003b74 PC 141c0800		  7032  RDLIN2:   MOVB    R3,0(RDVEC)             ;    VEC(N):=CHR;
00003b78 PC 8fc008		  7033            ADDQD   1,RDVEC                 ;    N:=N+1;
00003b7b PC 8c10		  7034            ADDQB   1,R2                    ; END;
00003b7d PC 85c00d		  7035            CMPW    RDN,R2                  ; UNTIL
00003b80 PC 7a0d		  7036            BLE     RDLINEX:B               ;     (N>=RDN)
00003b82 PC 9c08		  7037            CMPQB   TRUE,R1                 ;   OR (READLNF AND (CHR=CR))
00003b84 PC 1abfbb		  7038            BNE     RDLIN1
00003b87 PC 041d0d		  7039            CMPB    R3,CR
00003b8a PC 1abfb5		  7040            BNE     RDLIN1
				  7041  RDLINEX:
00003b8d PC 15160d		  7042            MOVW    R2,RDN                  ; RDLIN:=N
00003b90 PC 92701205		  7043          .ENDPROC
				  7044  ;
				  7045  ;    D O E C H O  ( EC_CHR,EC_TRM)
				  7046  ;        EC-CHR  INPUT : BYTE IN R3 {CHAR TO BE ECHO}
				  7047  ;        EC_TRM  INPUT : BYTE  {TERMINAL NUMBER}
				  7048  ;    FUNCTION  - CHECK IF ECHOB OF THIS TERMINAL ON THEN ECHO
				  7049  ;                IF EC_CHR IS BACK_SPACE ECHO WITH SPACE TO
				  7050  ;                IF EC_CHR IS CR AND ECHOLF BIT ON ECHO WITH CR LF
				  7051  ;
				  7052  ;
				  7053  DOECHO: .PROC           ; PROCEDURE DOECHO (EC_CHR,EC_TRM : BYTE)
			  7054  EC_TRM: .BLKB   ;BYTE
				  7055          .VAR    [R1,R3]
00003b94 PC 820a00		  7056          .BEGIN
00003b97 PC 54d003		  7057          MOVB    OPHND,R1        ; {SAVE OPMOD OF TERM IN R1 BITS 0..3}
00003b9a PC 1cc008		  7058          CMPQB   TRMA,EC_TRM
00003b9d PC 1a805a		  7059          BNE     ECEX:W
00003ba0 PC 9cd005		  7060          CMPQB   TRUE,NOTECHO
00003ba3 PC 0a8054		  7061          BEQ     ECEX:w
				  7062  ;       LSHB    -4,R1
				  7063  ;EC2:   TBITB   ECHOB,R1        ; IF ECHO THEN
				  7064  ;       BFC     ECEX:W          ; BEGIN
				  7065  EC3:    
00003ba6 PC 74a002		  7066          TBITB   2, R1           ;IF BIT 2 SET
00003ba9 PC 9a0a		  7067          BFC     DOALL:B         ;THEN ECHO CR WITH CR
00003bab PC c4a00d		  7068          CMPB    CR, R3          ;ELSE ECHO CR WITH SPACE
00003bae PC 1a05		  7069          BNE     DOALL:B
00003bb0 PC d4a020		  7070          MOVB    ' ', R3 
				  7071  DOALL:  
				  7072          ;++++++++++++++++
00003bb3 PC dcb8		  7073          MOVQB   TRUE,TOS
00003bb5 PC d41d		  7074          MOVB    R3,TOS
00003bb7 PC d4c508		  7075          MOVB    EC_TRM,TOS      ;   PRCHR (TURE,EC_CHR,EC_TRM)
				  7076          ;migry;SPRD    MOD,TOS
00003bba PC d4a581		  7077          MOVB    0x81,TOS
00003bbd PC 029565		  7078          BSR     PRCHR
00003bc0 PC 9cb8		  7079          CMPQB   TRUE,TOS        ;   {ADJUST STACK}
				  7080          ;----------------
00003bc2 PC 041d0d		  7081          CMPB    R3,CR           ;   IF EC_CHR=CR THEN
00003bc5 PC 1a0d		  7082          BNE     EC4:B
00003bc7 PC 74a000		  7083          TBITB   0,R1            ;     AND ECHOLF ON 
00003bca PC 8a802d		  7084          BFS     ECEX:w          ;   THEN ECHO WITH LF
00003bcd PC d4a00a		  7085          MOVB    LF,R3
00003bd0 PC ea56		  7086          BR      EC3
				  7087  EC4:                            ;   IF EC_CHR=BACKSP THEN
00003bd2 PC c4a008		  7088          CMPB    BACKSP, R3      ;   BEGIN
00003bd5 PC 1a22		  7089          BNE     ECEX:B
				  7090  ZAP:    
				  7091          ;++++++++++++++++
00003bd7 PC dcb8		  7092          MOVQB   TRUE,TOS
00003bd9 PC d4a520		  7093          MOVB    SPACE,TOS
00003bdc PC d4c508		  7094          MOVB    EC_TRM,TOS      ;   PRCHR (TURE,EC_CHR,EC_TRM)
				  7095          ;migry;SPRD    MOD,TOS
00003bdf PC d4a582		  7096          MOVB    0x82,TOS
00003be2 PC 029540		  7097          BSR     PRCHR
00003be5 PC 9cb8		  7098          CMPQB   TRUE,TOS        ;   {ADJUST STACK}
				  7099          ;----------------
				  7100          ;++++++++++++++++
00003be7 PC dcb8		  7101          MOVQB   TRUE,TOS
00003be9 PC d4a508		  7102          MOVB    BACKSP, TOS
00003bec PC d4c508		  7103          MOVB    EC_TRM,TOS      ;   PRCHR (TURE,EC_CHR,EC_TRM)
				  7104          ;migry;SPRD    MOD,TOS
00003bef PC d4a583		  7105          MOVB    0x83,TOS
00003bf2 PC 029530		  7106          BSR     PRCHR
00003bf5 PC 9cb8		  7107          CMPQB   TRUE,TOS        ;   {ADJUST STACK}
				  7108          ;----------------
				  7109  ECEX:
00003bf7 PC 92501201		  7110          .ENDPROC
				  7111  ;
				  7112  ;
				  7113  ;
				  7114  ;  SKIP ON SPACE SUBROUTINE
				  7115  ;
00003bfb PC 8f28		  7116  COMP1:  ADDQD   1,R5                    ; DTRM.SCN:=DTRM.SCN+1;
00003bfd PC c42b8050		  7117  COMPS:  CMPB    R5,INLM(R7)             ; WHILE DRTM.SCN<DTRM.INLM
00003c01 PC da0e		  7118          BGE     COMPEX:B
00003c03 PC 046d000d		  7119          CMPB    0(R5),CR                ;   AND INBUF(DTRM.SCN)<=SPACE
00003c07 PC 0a08		  7120          BEQ     COMPEX:B                ;     DTRM.SCN:=DTRM.SCN+1;
00003c09 PC 046d0020		  7121          CMPB    0(R5),SPACE             ;   AND INBUF(DTRM.SCN)<=SPACE
00003c0d PC 7a6e		  7122          BLE     COMP1                   ;     DTRM.SCN:=DTRM.SCN+1;
00003c0f PC 1200		  7123  COMPEX: RET     0                       ; END WHILE
				  7124  ;
				  7125  ;
				  7126  ;       P R I N T A
				  7127  ;
				  7128  ;       PRINT ARRAY PROCEDURE
				  7129  ;
				  7130  ;       CALLING SEQUENCE PRINTA (ARRP,ENDP,PRTRM)
				  7131  ;          ARRP  - POINTER TO ARRAY TO BE PRINTED
				  7132  ;          ENDP  - POINTER TO LAST BYTE TO BE PRINTED
				  7133  ;          PRTRM - # OF TERMINAL TO PRINT ON
				  7134  ;          HND   - BOOLEAN FLAG IF HAND-SHAKING NEDDED
				  7135  ;
				  7136  ;
00003c11 PC			  7137          .ALIGN 2
				  7138  PRINTA: .PROC
			  7139  ARRP:   .BLKD   ;DOUBLE         ; VAR: ARRAY OF CHR
			  7140  ENDP:   .BLKD   ;DOUBLE         ;  POINTER
			  7141  PRTRM:  .BLKB   ;BYTE           ;  INTEGER [0..1]
			  7142  DUMMY1: .BLKB   ;BYTE for alignment - migry
				  7143          .VAR    [R1,R2,R3,R4]
00003c12 PC 821e00		  7144          .BEGIN
00003c15 PC 57c00e		  7148          MOVD    ARRP,R1         ; R1:=POINTER TO PRINT ARRAY
00003c18 PC 94d003		  7149          MOVB    OPHND,R2        ; R2:= OPMOD [PRTRM]
00003c1b PC 1cc009		  7150          CMPQB   TRMA,PRTRM
00003c1e PC 0a04		  7151          BEQ     PRNTLP:B
00003c20 PC 5f11		  7152          MOVQD   2 ,R2           ;NO LINE FEED TO AUX PORT
				  7153          ;
				  7154          ; main print loop
				  7155          ;
00003c22 PC 144900		  7156  PRNTLP: MOVB    0(R1),R4
				  7157          ;++++++++++++++++
00003c25 PC d4a501		  7158          MOVB    TRUE,TOS
00003c28 PC d425		  7159          MOVB    R4,TOS          ;   PRCHR(TRUE,M(ARRP),PRTRM)
00003c2a PC d4c509		  7160          MOVB    PRTRM,TOS
				  7161          ;migry;SPRD    MOD,TOS
00003c2d PC d4a584		  7162          MOVB    0x84,TOS
00003c30 PC 0294f2		  7163          BSR     PRCHR           ;   {REMOVE ENDF FROM STACK}
00003c33 PC 9cb8		  7164          CMPQB   TRUE,TOS        ; END
00003c35 PC 04250d		  7165          CMPB    R4,CR           ; IF NOT (HAND[PRTRM] AND M[ARRP]=CR]
				  7166          ;----------------
00003c38 PC 1a1a		  7167          BNE     PRNT8:B         ; THEN
00003c3a PC b4a001		  7168          TBITB   1, R2           ; BEGIN
00003c3d PC 8a15		  7169          BFS     PRNT8:B         ;IF SET THEN NO LF
00003c3f PC 14a10a		  7170          MOVB    LF,R4           ;   ECHO WITH LF
				  7171          ;++++++++++++++++
00003c42 PC d4a501		  7172          MOVB    TRUE,TOS
00003c45 PC d425		  7173          MOVB    R4,TOS          ;   PRCHR(TRUE,M(ARRP),PRTRM)
00003c47 PC d4c509		  7174          MOVB    PRTRM,TOS
				  7175          ;migry;SPRD    MOD,TOS
00003c4a PC d4a585		  7176          MOVB    0x85,TOS
00003c4d PC 0294d5		  7177          BSR     PRCHR           ;   {REMOVE ENDF FROM STACK}
00003c50 PC 9cb8		  7178          CMPQB   TRUE,TOS        ; END
				  7179          ;----------------
00003c52 PC 8f08		  7180  PRNT8:  ADDQD   1,R1
00003c54 PC 1fc00a		  7181          CMPQD   0,ENDP          ; IF ENDP<>0 THEN
00003c57 PC 0a09		  7182          BEQ     PRTA5:B
00003c59 PC 070e0a		  7183          CMPD    R1,ENDP         ;  REPEAT UNTILE ARRP>ENDP
00003c5c PC da0b		  7184          BGE     PRTAEX:B
00003c5e PC ea44		  7185          BR      PRNTLP
00003c60 PC 044d0000		  7186  PRTA5:  CMPB    0(R1),PRINTE    ; ELSE
00003c64 PC 1abfbe		  7187          BNE     PRNTLP          ;  REPEAT UNTILE M(ARRP)=END INDICATOR
				  7188  PRTAEX:
00003c67 PC 9278120a		  7192          .ENDPROC
				  7193  ;
				  7194  ;
				  7195  ;       S P R I N T A
				  7196  ;       STANDARD CALL TO PRINTA PROCEDURE
				  7197  ;
				  7198  ;       FUNCTION - PRINT OUTPUT BUFFER OF CURRENTLY WORKING TERMINAL
				  7199  ;
				  7200  ;       PARAMETERS - NONE
				  7201  ;
				  7202  ;       LOCAL VARIABLES - NONE
				  7203  ;
				  7204  ;
00003c6b PC			  7205          .ALIGN 2
				  7206  SPRINTA:
				  7207          ;++++++++++++++++
00003c6c PC e77d00		  7208          ADDR    OUTB(R7),TOS
00003c6f PC d735		  7209          MOVD    R6,TOS          ; PRINTA (DTRM.OUTB,DTRM.OUTLM,DTRM)
00003c71 PC 5cb8		  7210          MOVQB   TRMA,TOS
00003c73 PC d4a599		  7211          MOVB    0x99,TOS        ; migry - for alignment
				  7212          ;migry;SPRD    MOD,TOS
00003c76 PC 02bf9c		  7213          BSR     PRINTA
				  7214          ;----------------
00003c79 PC 1200		  7215          RET     0
				  7216  ;
				  7217  ;
00003c7b PC 30313233343536373839  7218  HEXAN: .BYTE '0123456789ABCDEF'
				  7219  ;       H X T O B N  (HEXA OR DECIMAL TO BINARY)
				  7220  ;
				  7221  ;
				  7222
				  7223  HXTOBN:  .PROC
			  7224  WORD_HB: .BLKD  ;DOUBLE ; WORD_HB : DINTEGER
			  7225  EXRR_HB: .BLKB  ;BYTE           ; EXRR : INTEGER
			  7226  VECP_HB: .BLKD  ;DOUBLE ; VECP : VAR :POINTER
			  7227  ENDP_HB: .BLKD  ;DOUBLE ; ENDP : POINTER
				  7228          .RETURNS
			  7229          .BLKB   9
				  7230          .VAR    [R0,R1,R4]
00003c8b PC 821300		  7231          .BEGIN
00003c8e PC dcc010		  7232          MOVQB   TRUE,EXRR_HB    ; EXRR:= TRUE
00003c91 PC 17c00c		  7233          MOVD    VECP_HB, R0
00003c94 PC 04a22000		  7234  NLOOP:  CMPB    ' ', 0(R0)
00003c98 PC 0a12		  7235          BEQ     ENDN:B
00003c9a PC 04a20d00		  7236          CMPB    CR, 0(R0)
00003c9e PC 0a0c		  7237          BEQ     ENDN:B
00003ca0 PC 04a23d00		  7238          CMPB    '=', 0(R0)
00003ca4 PC 0a06		  7239          BEQ     ENDN:B
00003ca6 PC 8f00		  7240          ADDQD   1, R0
00003ca8 PC ea6c		  7241          BR      NLOOP
00003caa PC 170608		  7242  ENDN:   MOVD    R0, ENDP_HB
00003cad PC 8f07		  7243          ADDQD   -1, R0
00003caf PC d7c50c		  7244          MOVD    VECP_HB, TOS
00003cb2 PC d705		  7245          MOVD    R0, TOS
00003cb4 PC 94d6830a830b	  7246          MOVB    MON_BASE, BASE
00003cba PC 0282d9		  7247          BSR     A_NUM   
00003cbd PC 17be11		  7248          MOVD    TOS, WORD_HB
00003cc0 PC 1fd08313		  7249          CMPQD   FALSE, ERROR
00003cc4 PC 1a05		  7250          BNE     A_NUMERR:B
00003cc6 PC 5cc010		  7251          MOVQB   FALSE,EXRR_HB   ; EXRR:=FALSE
				  7252  A_NUMERR:
00003cc9 PC 17c6080c		  7253          MOVD    ENDP_HB,VECP_HB ; UNTILE VECP>= ENDP
00003ccd PC 92c81204		  7254          .ENDPROC
				  7255  ;
				  7256  ;
				  7257  ;       B N T O H X   (BINARY TO HEX or DECIMAL CONVERSION)
				  7258  ;
				  7259  ;
				  7260  BNTOHX:  .PROC
			  7261  WORD_BH: .BLKD  ;DOUBLE ; WORD : DINTEGER
			  7262  N_BH:    .BLKB  ;BYTE           ; N : INTEGER
			  7263  TYPE_BH: .BLKB  ;BYTE           ; TYPE : INTEGER[0..2]
				  7264           .VAR   [R1,R2]
			  7265  SV_R6:   .BLKD
00003cd1 PC 820604		  7266           .BEGIN
				  7267
00003cd4 PC 97a32020202000	  7268          MOVD    '    ', 0(R6)
00003cdb PC 97a32020202004	  7269          MOVD    '    ', 4(R6)
00003ce2 PC 97a32020202008	  7270          MOVD    '    ', 8(R6)
00003ce9 PC 17367c		  7271          MOVD    R6, SV_R6
00003cec PC 03a60000000c7c	  7272          ADDD    12, SV_R6
00003cf3 PC 1cd1830a		  7273          CMPQB   DEC, MON_BASE
00003cf7 PC 1a803e		  7274          BNE     DOHEX:W
00003cfa PC 5cd08312		  7275          MOVQB   FALSE, LEADZERO
00003cfe PC 97c00a		  7276          MOVD    WORD_BH, R2
00003d01 PC 1cc209		  7277          CMPQB   4, N_BH
00003d04 PC ca0d		  7278          BLT     DO_IT:B
00003d06 PC ce9d10		  7279          MOVXWD  R2, R2
00003d09 PC 1cc109		  7280          CMPQB   2, N_BH
00003d0c PC ca05		  7281          BLT     DO_IT:B
00003d0e PC ce9c10		  7282          MOVXBD  R2, R2
00003d11 PC 0fc209		  7283  DO_IT:  ADDQD   4, N_BH
00003d14 PC d715		  7284          MOVD    R2, TOS
00003d16 PC 94d6830a830b	  7285          MOVB    MON_BASE, BASE
00003d1c PC 028363		  7286          BSR     N_TO_ASC
00003d1f PC 97b8		  7287          MOVD    TOS, R2         ;CLEAN STACK
00003d21 PC 5f08		  7288          MOVQD   0, R1
00003d23 PC 94e3d183e100	  7289  MOCH:   MOVB    NUMCH[R1:B], 0(R6)
00003d29 PC 8f08		  7290          ADDQD   1, R1
00003d2b PC 8f30		  7291          ADDQD   1, R6
00003d2d PC 040e09		  7292          CMPB    R1, N_BH
00003d30 PC ca73		  7293          BLT     MOCH
00003d32 PC ea8063		  7294          BR      BTHEX:W
				  7295  DOHEX:
00003d35 PC dcd08312		  7296          MOVQB   TRUE, LEADZERO
00003d39 PC d7c50a		  7297          MOVD    WORD_BH, TOS
00003d3c PC 94d6830a830b	  7298          MOVB    MON_BASE, BASE
00003d42 PC 02833d		  7299          BSR     N_TO_ASC
00003d45 PC 97b8		  7300          MOVD    TOS, R2         ;CLEAN STACK
00003d47 PC 1cc309		  7301          CMPQB   6, N_BH
00003d4a PC 1a05		  7302          BNE     NOT6:B
00003d4c PC 0fc109		  7303          ADDQD   2, N_BH
00003d4f PC 5f08		  7304  NOT6:   MOVQD   0, R1
00003d51 PC 1cc209		  7305          CMPQB   4, N_BH
00003d54 PC ca0b		  7306          BLT     BTHLP:B
00003d56 PC 5f0a		  7307          MOVQD   4, R1
00003d58 PC 1cc109		  7308          CMPQB   2, N_BH
00003d5b PC ca04		  7309          BLT     BTHLP:B
00003d5d PC 5f0b		  7310          MOVQD   6, R1
00003d5f PC ce98c009		  7311  BTHLP:  MOVZBD  N_BH,R2 ; (* R2:=VECP *)
00003d63 PC 1f10		  7312          CMPQD   0,R2    ;  WHILE N>0 DO
00003d65 PC da30		  7313          BGE     BTHEX:B
00003d67 PC 8f17		  7314          ADDQD   -1,R2
00003d69 PC 04a7d13083e1	  7315          CMPB    '0',NUMCH[R1:B]
00003d6f PC 1a14		  7316          BNE     BTH2:B  ; IF R2:=0 AND N>1 THEN
00003d71 PC 9cc009		  7317          CMPQB   1,N_BH  
00003d74 PC 0a0f		  7318          BEQ     BTH2:B
00003d76 PC 9cc008		  7319          CMPQB   1,TYPE_BH ; CASE TYPE OF
00003d79 PC 6a0a		  7320          BGT     BTH2:B    ;   <1 PUT LEADING ZEROS
00003d7b PC ca13		  7321          BLT     BTH4:B    ;   >1 SUPRESS LEADING ZEROS
00003d7d PC 94a32000		  7322          MOVB    " ",0(R6) ;   =1 INSERT SPACE FOR LEADING ZEROS
00003d81 PC ea0b		  7323          BR      BTH3:B
00003d83 PC 94e3d183e100	  7324  BTH2:   MOVB    NUMCH[R1:B],0(R6) ; M(VECP):=HEXAN[R2]
00003d89 PC 5cc008		  7325          MOVQB   0,TYPE_BH
00003d8c PC 8f30		  7326  BTH3:   ADDQD   1,R6    ; VECP:=VECP+1
00003d8e PC 8cc709		  7327  BTH4:   ADDQB   -1,N_BH ; N:=N-1
00003d91 PC 8f08		  7328          ADDQD   1, R1
00003d93 PC ea4c		  7329          BR      BTHLP
				  7330  BTHEX:
00003d95 PC 5cd08312		  7331          MOVQB   FALSE, LEADZERO
00003d99 PC 9cd081aa		  7332          CMPQB   TRUE, PROCESS
00003d9d PC 1a05		  7333          BNE     BTHEX2:B
00003d9f PC 97c17c		  7334          MOVD    SV_R6, R6
				  7335  BTHEX2:
00003da2 PC 92601206		  7336          .ENDPROC
				  7337  ;
				  7338  ;
				  7339  ;       T B S R C H  (TABLE SEREACH PROCEDURE )
				  7340  ;
				  7341  ;
				  7342  TBSRCH:  .PROC
			  7343  TABADR: .BLKD   ;DOUBLE         ; TABADDR : POINTER
			  7344  LENGTH: .BLKB   ;BYTE           ; LENGTH : INTEGER
				  7345          .RETURNS
			  7346  EXITF:  .BLKB   ;BYTE           ; EXITF : BOOLEAN
				  7347          .VAR
			  7348  SAVER5: .BLKD
00003da6 PC 820004		  7349          .BEGIN
00003da9 PC 172e7c		  7350          MOVD    R5, SAVER5      ;SAVE ENRTY POINT
00003dac PC 44a36100		  7351          CMPB    'a', 0(R5)      ;CONVERT COMMAND CHARS TO UPPER CASE
00003db0 PC 6a06		  7352          BGT     ACAP5:B         
00003db2 PC 40a3e000		  7353          ADDB    -H'20, 0(R5)    
00003db6 PC 44a36101		  7354  ACAP5:  CMPB    'a', 1(R5)      ;CONVERT COMMAND CHARS TO UPPER CASE
00003dba PC 6a06		  7355          BGT     ACAP2:B         
00003dbc PC 40a3e001		  7356          ADDB    -H'20, 1(R5)    
00003dc0 PC 5f10		  7357  ACAP2:  MOVQD   0,R2            ; I:=0
				  7358                                  ; REPEAT
00003dc2 PC 45eb82090000	  7359  SRCHL:  CMPW    0(TABADR)[R2:W],0(R5)
00003dc8 PC 0a23		  7360          BEQ     SRFND:B         ;  IF TAB(I_I+1)<>INBUF(I_I+1)
00003dca PC 44eb82090000	  7361          CMPB    0(TABADR)[R2:W],0(R5); THEN IF TAB(I)=INBUF(I)
00003dd0 PC 1a0a		  7362          BNE     SRC2:B          ;           THEN
00003dd2 PC 04ed82090120	  7363          CMPB    1(TABADR)[R2:W],SPACE;          IF TAB(I+1):=SPACE
00003dd8 PC 0a15		  7364          BEQ     SRFND2:B        ;                GOTO FOUND;
00003dda PC 8f10		  7365  SRC2:   ADDQD   1,R2            ;      ELSE
00003ddc PC 041608		  7366          CMPB    R2,LENGTH       ;       I:=I+1;
00003ddf PC ca63		  7367          BLT     SRCHL           ; UNTIL I=LENGTH;
00003de1 PC 5cc00c		  7368          MOVQB   FALSE,EXITF     ; EXITF:=FALSE;
00003de4 PC 5f10		  7369          MOVQD   0,R2
00003de6 PC 57c17c		  7370          MOVD    SAVER5, R5      ;RESTORE ENTRY POINT
00003de9 PC ea0c		  7371          BR      SRCHEX:B
00003deb PC 8f28		  7372  SRFND:  ADDQD   1,R5            ; DTRM.SCN:=DTRM.SCN+1;
00003ded PC 8f28		  7373  SRFND2: ADDQD   1,R5            ; DTRM.SCN:=DTRM.SCN+1;
00003def PC dcc00c		  7374          MOVQB   TRUE,EXITF      ; EXITF:=TRUE
00003df2 PC 02be0b		  7375          BSR     COMPS           ; COMPS  {COMPRESS SPACE}
				  7376  SRCHEX:
00003df5 PC 92001204		  7377          .ENDPROC
				  7378  ;
				  7379  ;
				  7380  ;       G E T P U T     P R O C E D U R E
				  7381  ;
				  7382  ;       FUNCTION - GET REGISTER OR MEMORY VALUE TO R1
				  7383  ;                  PUT REGISTER OR MEMORY VALUE FROM R1
				  7384  ;
				  7385  ;                  REGISTER IS ONE OF :
				  7386  ;                  PC,US,IS,INTB,SB,FP,MOD,PSR,MSR,EADD,PTB,PF,
				  7387  ;                  SC,BPR,BCNT,REAL-MSR,SP,FL,FSR,R,F,FSR,CFG,SOFT-BPR
				  7388  ;
				  7389  ;                  MEMORY IS : BYTE WORD DOUBLE
				  7390  ;
				  7391  ;                  R2 CONTAINS REGISTER # (OR MEMORY)
				  7392  ;
				  7393  ;       CALLING SEQUENCE GETPUT (GET_PUT,TYPE,N,VALUE)
				  7394  ;             GETPUT -  0 GET
				  7395  ;                       1 PUT
				  7396  ;             TYPE   -  REGISTER TYPE (IN R2)
				  7397  ;             N      -  REGISTER NUMBER
				  7398  ;             VALUE  -  VALUE GET (OR PUT) IN R1
				  7399  ;
				  7400  ;
				  7401  GETPUTX: 
				  7402  GETPUT:  .PROC
			  7403  GET_PUT: .BLKB  ;BYTE                           ; GET-PUT : INTEGET [0..1]
			  7404  N_GP:    .BLKD  ;DOUBLE                 ; N       : DINTEGER
				  7405           .VAR   [R0,R3]
			  7406  TEMP:    .BLKD
			  7407  MSET:    .BLKB
00003df9 PC 820905		  7408           .BEGIN
00003dfc PC 5cc07b		  7409          MOVQB   FALSE,MSET
00003dff PC 17c008		  7410          MOVD    N_GP,R0
00003e02 PC 5f18		  7411          MOVQD   0,R3
00003e04 PC ceccf0daffffd84c03	  7412          EXTSB   REGTB[R2:D],R3,0,4      ; GET OPERATION TYPE
00003e0d PC c4a007		  7413          CMPB    7,R3                    ; SOFT BREAK POINT              
00003e10 PC 1a06		  7414          BNE     LGPX:B                  ; THEN SET STAND ALONE SOFT ACTION
00003e12 PC dcd081a9		  7415          MOVQB   TRUE,SPACIT            ; FLAG TO TRUE
00003e16 PC 1cc00c		  7416  LGPX:   CMPQB   GETI,GET_PUT            ; (* SET CC IF OPERATION IS GET *)
00003e19 PC 7defdb04		  7417  LGP:    CASEW   CASE_GP:B[R3:W]         ; CASE OF OPERATIN NUMBER
00003e1d PC 1a00		  7418  CASE_GP: .WORD  GMPUL-LGP               ; MPU OPERATION
00003e1f PC cd00		  7419           .WORD  GMMUL-LGP               ; MMU   "
00003e21 PC 6e00		  7420           .WORD  GSPL-LGP                ; SP    "
00003e23 PC 8c00		  7421           .WORD  GFPUL-LGP               ; FPU   "
00003e25 PC b400		  7422           .WORD  GFSRL-LGP               ; FSR   "
00003e27 PC 1801		  7423           .WORD  PCFGL-LGP               ; CFG   "
00003e29 PC 3801		  7424           .WORD  GML-LGP                 ; MEMORY "
00003e2b PC 1d00		  7425           .WORD  BRL-LGP                 ; SOFT-BREAK
00003e2d PC 1600		  7426           .WORD  GMSRL-LGP               ; MSR
00003e2f PC 1e0fd510		  7427  GMSRL:  SMR     MSR,SCRCH1      ; TRAP IF NO MMU
00003e33 PC 4e2300		  7428  GMPUL:  NEGD    R0,R0
00003e36 PC ce23a000000004	  7429  BRL:    MULD    4,R0
00003e3d PC ced8f0daffffd816	  7430          MOVZBD  REGTB+3[R2:D],R3
00003e45 PC 0318		  7431          ADDD    R3,R0           ;    R0:=REGTB.OFFSET+4*R0
00003e47 PC 27e0d020		  7432  GMPUL2: ADDR    SEREA[R0:B],R0
00003e4b PC 1cf7daffffd807	  7433          CMPQB   -2,REGTB+2[R2:D]
00003e52 PC 1a05		  7434          BNE     GMPUL3:B        ; IF REGTB.L2=-2 THEN  {SB INDIRECT READ} 
00003e54 PC 174000		  7435          MOVD    0(R0),R0        ;    R0  := M[R0]        
00003e57 PC 1cc00c		  7436  GMPUL3: CMPQB   GETI,GET_PUT
00003e5a PC 1a16		  7437          BNE     PMPUL:B         ; IF GET COMMAND THEN
00003e5c PC 574000		  7438          MOVD    0(R0),R1        ;    R1:=SEREA[REGTB.OFFSET]
00003e5f PC 84a60181a9		  7439          CMPB    TRUE,SPACIT    ; IF REAL ALONE THEN STRIP BE BIT
00003e64 PC 1a811f		  7440          BNE     GPREX:W
00003e67 PC 6ba00fffffff	  7441          ANDD    H'FFFFFFF,R1
00003e6d PC ea8116		  7442          BR      GPREX:W
00003e70 PC 84a60181a9		  7443  PMPUL:  CMPB    TRUE,SPACIT    ;IF REAL ALONE ADD BE BIT
00003e75 PC 1a0c		  7444          BNE     PMPULX:B
00003e77 PC 1f08		  7445          CMPQD   0,R1            ;IF BP RESET THEN DON'T ENABLE
00003e79 PC 0a08		  7446          BEQ     PMPULX:B
00003e7b PC 5ba020000000	  7447          ORD     H'20000000,R1
00003e81 PC 170a00		  7448  PMPULX: MOVD    R1,0(R0)        ; ELSE  SEREA[REGTB.OFFSET]:=R1;
00003e84 PC ea80ff		  7449          BR      GPREX:W
				  7450  ;
				  7451  ; GET PUT SP
				  7452  ;
00003e87 PC 14d8ffffd7d0	  7453  GSPL:   MOVB    USX+3,R0
00003e8d PC b4a60934		  7454          TBITB   PSR_S,SVPSR     ; IF PSR_S THEN
00003e91 PC 8abfb6		  7455          BFS     GMPUL2          ;    R0:=US-OFFSET
00003e94 PC 14d8ffffd7c7	  7456          MOVB    ISX+3,R0        ; ELSE
00003e9a PC eabfad		  7457          BR      GMPUL2          ;    R0:=IS-OFF_SET
				  7458  ;
				  7459  ; GET PUT FPU REG
				  7460  ;
00003e9d PC be450604		  7461  MOVFI1: MOVF    F0,4(SP)
00003ea1 PC be05c804		  7462  MOVFI2: MOVF    4(SP),F0
				  7463  ;
00003ea5 PC d70d		  7464  GFPUL:  MOVD    R1,TOS          ;MOVE DATA TO STACK
00003ea7 PC 1a0f		  7465          BNE     PFPUL:B         ; IF GET THEN
00003ea9 PC 97de7410		  7466          MOVD    MOVFI1,JMPRAM   ; COPT MOVFF INS TO RAM
00003ead PC a2			  7467          NOP
00003eae PC a2			  7468          NOP
00003eaf PC ce88061264		  7469          INSSB   R0,JMPRAM+2,3,5 ;   CHANGE GEN 1
00003eb4 PC ea0d		  7470          BR      GFPU4:B         ; ELSE
00003eb6 PC 97de6b10		  7471  PFPUL:  MOVD    MOVFI2,JMPRAM   ; COPT MOVFF INS TO RAM
00003eba PC a2			  7472          NOP
00003ebb PC a2			  7473          NOP
00003ebc PC ce880611c4		  7474          INSSB   R0,JMPRAM+1,6,5 ;   CHANGE GEN 2
00003ec1 PC 95de2314		  7475  GFPU4:  MOVW    RET0:B,JMPRAM+4 ; COPY RET 0 INS
00003ec5 PC 7fd610		  7476          JSR     JMPRAM          ; EXECUTE MOVFF INS
00003ec8 PC 57b8		  7477  GFPU6:  MOVD    TOS,R1          ; COPY FROM STACK TO R1
00003eca PC ea80b9		  7478          BR      GPREX:W
				  7479  ;
				  7480  ;
				  7481  ; GET PUT FSR
				  7482  ;
				  7483  ;
00003ecd PC 1a07		  7484  GFSRL:  BNE     PFSRL:B         ; IF GET THEN
00003ecf PC 3ef705		  7485          SFSR    TOS             ;   MOVE FSR TO STACK
00003ed2 PC ea76		  7486          BR      GFPU6           ; ELSE
00003ed4 PC d70d		  7487  PFSRL:  MOVD    R1,TOS          ; MOVE R1 TO FSR VIA STACK
00003ed6 PC 3e0fb8		  7488          LFSR    TOS
00003ed9 PC ea80aa		  7489          BR      GPREX:W
				  7490  ;
				  7491  ; GET PUT MMU REG
				  7492  ;
00003edc PC 1e0fc07c		  7493  SMRL:   SMR     BPR0,TEMP               ; SMR INSTRUCTION
00003ee0 PC 1e0bc07c		  7494  LMRL:   LMR     BPR0,TEMP               ; LMR INSTRUCTION
00003ee4 PC 1200		  7495  RET0:   RET     0               ; RET 0 INSTRUCTION
				  7496  ;
00003ee6 PC 170e7c		  7497  GMMUL:  MOVD    R1, TEMP
00003ee9 PC 97de7310		  7498          MOVD    SMRL,JMPRAM     ; IF GETPUT:=GET THEN
00003eed PC 0a0f		  7499          BEQ     MMUL2:B         ;    COPY SMR TO RAM
00003eef PC 97de7110		  7500          MOVD    LMRL,JMPRAM     ; ELSE COPY LMR TO RAM
00003ef3 PC 84a00f		  7501          CMPB    15, R2          ;CHECK FOR MMSR
00003ef6 PC 1a06		  7502          BNE     MMUL2:B
00003ef8 PC 970e8078		  7503          MOVD    R1, MNMSR
00003efc PC 00f0daffffd757	  7504  MMUL2:  ADDB    REGTB+3[R2:D],R0 ;R0:=N+REGTB.OFFSET
00003f03 PC 95de6114		  7505  MMUL3:  MOVW    RET0,JMPRAM+4   ; COPY RET 0
00003f07 PC 4e15a007		  7506          LSHW    7, R0
00003f0b PC a9a6f87f11		  7507          ANDW    H'F87F, JMPRAM+1
00003f10 PC 990611		  7508          ORW     R0, JMPRAM+1    ; INSERT REG NUMBER
00003f13 PC 7fd610		  7509          JSR     JMPRAM          ; JUMP TO RAM
00003f16 PC 57c07c		  7510          MOVD    TEMP, R1
00003f19 PC 1cc07b		  7511          CMPQB   FALSE,MSET
00003f1c PC 0a8067		  7512          BEQ     GPREX:W
00003f1f PC 5fc07c		  7513          MOVQD   0, TEMP
00003f22 PC 1e0bc57c		  7514          LMR     MSR, TEMP
00003f26 PC 5fd08078		  7515          MOVQD   0, MNMSR
00003f2a PC 5fd0805c		  7516          MOVQD   0, SVMSR
00003f2e PC ea8055		  7517          BR      GPREX:W
				  7518  ;
				  7519  ; GET PUT CFG
				  7520  ;
00003f31 PC 1708		  7521  PCFGL:  MOVD    R1,R0           ; (* MOVE OPERAND TO R0 *)
00003f33 PC 0a18		  7522          BEQ     GCFG:B          ; IF GETPUT=PUT THEN
00003f35 PC 970e08		  7523          MOVD    R1,CONFIG       ;   CONFIG:=R1
00003f38 PC 74a002		  7524          TBITB   CNFMMU, R1      ;IF SETTING MMU THEN INIT MSR
00003f3b PC 9a05		  7525          BFC     NOM:B           ;AND SET SAVED MSR
00003f3d PC dcc07b		  7526          MOVQB   TRUE,MSET 
00003f40 PC 97de0710		  7527  NOM:    MOVD    SCFGL:B,JMPRAM  ;   COPY SETCFG INSTRUCTION TO RAM
00003f44 PC eabfb8		  7528          BR      MMUL2           ;   GOTO MMUL2
00003f47 PC 0e0b00		  7529  SCFGL:  SETCFG  []              ; (* SETCFG INSTRUCTIN *)
00003f4a PC a2			  7530          NOP
00003f4b PC ce58d008		  7531  GCFG:   MOVZBD  CONFIG,R1       ; ELSE R1:=CONFIG;
00003f4f PC ea34		  7532          BR      GPREX:B
				  7533  ;
				  7534  ; GET PUT MEMORY
				  7535  ;
00003f51 PC d4f0daffffd702	  7536  GML:    MOVB    REGTB+3[R2:D],R3        ; GET B W D INDICATOR
00003f58 PC c0c00c		  7537          ADDB    GET_PUT,R3      ; R3:= B W D +GET_PUT
00003f5b PC 7ce7db04		  7538  GMCASE: CASEB   GM2:B[R3:B]     ; CASE OF (B W D ) + GET_PUT
00003f5f PC 0a			  7539  GM2:    .BYTE   GB-GMCASE               ; GET BYTE
00003f60 PC 10			  7540          .BYTE   PB-GMCASE               ; PUT BYTE
00003f61 PC 15			  7541          .BYTE   GW-GMCASE               ; GET WORD
00003f62 PC 1b			  7542          .BYTE   PW-GMCASE               ; PUT WORD
00003f63 PC 20			  7543          .BYTE   GD-GMCASE               ; GET DOUBLE WORD
00003f64 PC 25			  7544          .BYTE   PD-GMCASE               ; PUT DOUBLE  WORD
00003f65 PC ce584000		  7545  GB:     MOVZBD  0(R0),R1        ; R1:=M(ADDR) *** MOVUS ***
00003f69 PC ea1a		  7546          BR      GPREX:B
00003f6b PC 140a00		  7547  PB:     MOVB    R1,0(R0)        ; M(ADDR):=R1 *** MOVSU ***
00003f6e PC ea15		  7548          BR      GPREX:B
00003f70 PC ce594000		  7549  GW:     MOVZWD    0(R0),R1        ; R1:=M(ADDR) *** MOVUS ***
00003f74 PC ea0f		  7550          BR     GPREX:B
00003f76 PC 150a00		  7551  PW:     MOVW    R1,0(R0)        ; M(ADDR):=R1 *** MOVSU ***
00003f79 PC ea0a		  7552          BR      GPREX:B
00003f7b PC 574000		  7553  GD:     MOVD    0(R0),R1        ; R1:=M(ADDR) *** MOVUS ***
00003f7e PC ea05		  7554          BR      GPREX:B
00003f80 PC 170a00		  7555  PD:     MOVD    R1,0(R0)        ; M(ADDR):=R1 *** MOVSU ***
00003f83 PC 5cd081a9		  7556  GPREX:  MOVQB   FALSE,SPACIT   ; CANCEL ACTION OF STAND ALONE MODE
00003f87 PC 92901205		  7557          .ENDPROC
				  7558
				  7559  ; end of asub.32k
				  7560  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				  7561  ; start of autil.32k
				  7562
				  7563
				  7564
00003f8b PC 4552525f56414c0d	  7565  AUERROR: .BYTE 'ERR_VAL',CR
				  7566
				  7567  A_NUM:                  .PROC
			  7568          DSTRT:          .BLKD  
			  7569          D_END:          .BLKD  
				  7570                          .RETURNS
			  7571          D_VAL:          .BLKD
				  7572                          .VAR [R1,R2,R3,R4,R5]
00003f93 PC 823e00		  7573                          .BEGIN
00003f96 PC 5f18		  7574                          MOVQD 0,R3
00003f98 PC 5f28		  7575                          MOVQD   FALSE, R5       ;FLAG FOR NOP
00003f9a PC a7de718313		  7576                          ADDR    AUERROR, ERROR
00003f9f PC 5cd081ac		  7577                          MOVQB   FALSE,NEGIT
00003fa3 PC 17c10c		  7578                          MOVD    DSTRT,R4
00003fa6 PC 05a3274800		  7579                          CMPW    H'2748, 0(R4)   ;ASSMBLER ERR H'2748 = "H'"
00003fab PC 0a8063		  7580                          BEQ     A_HEX:W
00003fae PC 05a3274400		  7581                          CMPW    H'2744, 0(R4)   ;             H'2744 = "D'"
00003fb3 PC 0a1a		  7582                          BEQ     A_DEC:B
00003fb5 PC 05a3276800		  7583                          CMPW    H'2768, 0(R4)   ;ASSMBLER ERR H'2748 = "h'"
00003fba PC 0a8054		  7584                          BEQ     A_HEX:W
00003fbd PC 05a3276400		  7585                          CMPW    H'2764, 0(R4)   ;             H'2744 = "d'"
00003fc2 PC 0a0b		  7586                          BEQ     A_DEC:B
00003fc4 PC 9cd1830b		  7587                          CMPQB   HEX, BASE        
00003fc8 PC 0a8048		  7588                          BEQ     HEX_NUM:W
00003fcb PC ea04		  7589                          BR      DEC_NUM:B
00003fcd PC 0f21		  7590          A_DEC:          ADDQD   2, R4
00003fcf PC 04a32d00		  7591          DEC_NUM:        CMPB    '-', 0(R4)
00003fd3 PC 1a0a		  7592                          BNE     PLUS_SIGN:B
00003fd5 PC dcd081ac		  7593                          MOVQB   TRUE, NEGIT
00003fd9 PC 8c20		  7594                          ADDQB   1, R4
00003fdb PC ea0a		  7595                          BR      INTLOOP:B
00003fdd PC 04a32b00		  7596          PLUS_SIGN:      CMPB    '+', 0(R4)
00003fe1 PC 1a04		  7597                          BNE     INTLOOP:B
00003fe3 PC 8f20		  7598                          ADDQD   1, R4
				  7599          INTLOOP:                    
00003fe5 PC 946000		  7600                          MOVB 0(R4),R2
00003fe8 PC 072608		  7601                          CMPD R4,D_END
00003feb PC 6a807c		  7602                          BGT DONE1:W
				  7603          POSI:                                 
00003fee PC df28		  7604          ANUM:           MOVQD   TRUE, R5
00003ff0 PC a0a030		  7605                          SUBB    H'30,R2
00003ff3 PC 1c10		  7606                          CMPQB   0, R2
00003ff5 PC 6a8083		  7607                          BGT     NONEG:W
00003ff8 PC 84a009		  7608                          CMPB    9, R2
00003ffb PC ca807d		  7609                          BLT     NONEG:W
00003ffe PC cee3a00000000a	  7610                          MULD    10,R3
00004005 PC ce9810		  7611                          MOVZBD  R2,R2
00004008 PC c310		  7612                          ADDD    R2,R3
0000400a PC 8f20		  7613                          ADDQD   1,R4
0000400c PC ea59		  7614                          BR      INTLOOP
				  7615  ;-----------------HEX
0000400e PC 0f21		  7616          A_HEX:          ADDQD   2, R4
00004010 PC 04a32d00		  7617          HEX_NUM:        CMPB    '-', 0(R4)
00004014 PC 1a0a		  7618                          BNE     HEXPLUS:B
00004016 PC dcd081ac		  7619                          MOVQB   TRUE,NEGIT
0000401a PC 8f20		  7620                          ADDQD   1, R4
0000401c PC ea0a		  7621                          BR      HEXLOOP:B
0000401e PC 04a32b00		  7622          HEXPLUS:        CMPB    '+', 0(R4)
00004022 PC 1a04		  7623                          BNE     HEXLOOP:B
00004024 PC 8f20		  7624                          ADDQD   1, R4
				  7625          HEXLOOP:                    
00004026 PC 946000		  7626                          MOVB 0(R4),R2
00004029 PC 072608		  7627                          CMPD R4,D_END
0000402c PC 6a803b		  7628                          BGT DONE1:W
0000402f PC df28		  7629                          MOVQD   TRUE, R5
00004031 PC 84a039		  7630                          CMPB '9', R2
00004034 PC ca11		  7631                          BLT  HEXLET:B
00004036 PC a0a030		  7632                          SUBB H'30,R2
00004039 PC 1c10		  7633                          CMPQB   0, R2
0000403b PC 6a803d		  7634                          BGT  NONEG:w
0000403e PC 84a009		  7635                          CMPB    9, R2
00004041 PC ca37		  7636                          BLT  NONEG:B
00004043 PC ea17		  7637                          BR  MAKEHEX:B
00004045 PC 84a061		  7638          HEXLET:         CMPB 'a', R2    ;CHECK FOR LOWER CASE
00004048 PC 6a05		  7639                          BGT UP:B                
0000404a PC 80a0e0		  7640                          ADDB -H'20, R2
0000404d PC a0a037		  7641                  UP:     SUBB H'37, R2
00004050 PC 84a00a		  7642                          CMPB 10, R2
00004053 PC 6a25		  7643                          BGT NONEG:B
00004055 PC 84a00f		  7644                          CMPB 15, R2
00004058 PC ca20		  7645                          BLT     NONEG:B
0000405a PC 4ed7a004		  7646          MAKEHEX:        LSHD  4,R3
0000405e PC ce9810		  7647                          MOVZBD R2,R2
00004061 PC c310		  7648                          ADDD R2,R3
00004063 PC 8f20		  7649                          ADDQD   1,R4
00004065 PC ea41		  7650                          BR HEXLOOP
				  7651
				  7652          DONE1:                             
00004067 PC 1f28		  7653                          CMPQD   FALSE, R5
00004069 PC 0a0f		  7654                          BEQ     NONEG:B
0000406b PC 5fd08313		  7655                          MOVQD   FALSE, ERROR
0000406f PC 1cd081ac		  7656                          CMPQB FALSE,NEGIT
00004073 PC 0a05		  7657                          BEQ NONEG:B
00004075 PC 4ee318		  7658                          NEGD R3,R3
00004078 PC 171e0c		  7659          NONEG:          MOVD R3,D_VAL
0000407b PC 927c1204		  7660                          .ENDPROC
				  7661
				  7662  N_TO_ASC:               .PROC
			  7663          BIN_VAL:        .BLKD
				  7664                          .RETURNS
			  7665          CHRCOUNT:       .BLKD
				  7666                          .VAR[R0,R1,R2,R3,R4,R5,R6,R7]
0000407f PC 82ff00		  7667                          .BEGIN
00004082 PC ce18a050		  7668                          MOVZBD 80, R0
00004086 PC 67d083e1		  7669                          ADDR NUMCH, R1
0000408a PC 54a22000		  7670                  CLRIT:  MOVB ' ', 0(R1)
0000408e PC 8f08		  7671                          ADDQD 1, R1
00004090 PC cc077a		  7672                          ACBB -1, R0, CLRIT
00004093 PC 97c6088434		  7673                          MOVD BIN_VAL, DEC_VAL
00004098 PC 5fc008		  7674                          MOVQD 0, CHRCOUNT
0000409b PC 84a603830b		  7675                          CMPB HEX, BASE
000040a0 PC 1a8062		  7676                          BNE  D_WRI:W
000040a3 PC e7d083e1		  7677                          ADDR NUMCH, R3
000040a7 PC 14a008		  7678                          MOVB 8,R0
000040aa PC dcd08433		  7679                          MOVQB TRUE,LEAD_0  
000040ae PC 1cd08312		  7680                          CMPQB FALSE,LEADZERO
000040b2 PC 0a06		  7681                          BEQ H_WRILOOP:B
000040b4 PC 5cd08433		  7682                          MOVQB FALSE,LEAD_0  
				  7683
000040b8 PC 4e83a6048434	  7684          H_WRILOOP:      ROTD 4,DEC_VAL
000040be PC 54d08434		  7685                          MOVB DEC_VAL,R1
000040c2 PC 68a00f		  7686                          ANDB H'F,R1
000040c5 PC 1c08		  7687                          CMPQB 0,R1
000040c7 PC 1a08		  7688                          BNE H_OUTIT:B
000040c9 PC 9cd08433		  7689                          CMPQB TRUE,LEAD_0  
000040cd PC 0a1b		  7690                          BEQ H_SKIPI:B
000040cf PC 94a030		  7691          H_OUTIT:        MOVB H'30,R2
000040d2 PC 040d0a		  7692                          CMPB R1,H'A
000040d5 PC ca05		  7693                          BLT H_NUMCHR:B
000040d7 PC 94a037		  7694                          MOVB H'37,R2
000040da PC 8008		  7695          H_NUMCHR:       ADDB R1,R2
000040dc PC d41200		  7696                          MOVB R2,0(R3)
000040df PC 8f18		  7697                          ADDQD 1,R3                      
000040e1 PC 8fc008		  7698                          ADDQD 1, CHRCOUNT
000040e4 PC 5cd08433		  7699                          MOVQB FALSE,LEAD_0  
000040e8 PC 9c00		  7700          H_SKIPI:        CMPQB 1,R0
000040ea PC 1a11		  7701                          BNE H_NO:B
000040ec PC 9cd08433		  7702                          CMPQB TRUE,LEAD_0   
000040f0 PC 1a0b		  7703                          BNE H_NO:B
000040f2 PC d4a23000		  7704                          MOVB '0',0(R3)
000040f6 PC 8f18		  7705                          ADDQD 1,R3                      
000040f8 PC 8fc008		  7706                          ADDQD 1, CHRCOUNT
000040fb PC cc07bfbd		  7707          H_NO:           ACBB -1,R0,H_WRILOOP
000040ff PC ea8078		  7708                          BR  EX_N_T_:W
				  7709
				  7710  ;-----------------DEC WRITE
00004102 PC 5cd081ac		  7711          D_WRI:          MOVQB FALSE,NEGIT
00004106 PC d7d18434		  7712                          MOVD DEC_VAL, R7
0000410a PC 073d00000000	  7713                          CMPD R7,0
00004110 PC da09		  7714                          BGE POS:B
00004112 PC 4ee339		  7715                          NEGD R7,R7
00004115 PC dcd081ac		  7716                          MOVQB TRUE,NEGIT
00004119 PC ce18a04e		  7717          POS:            MOVZBD 78,R0
0000411d PC 14a7d03083e1	  7718                          MOVB '0',NUMCH[R0:B]
00004123 PC 1f38		  7719                          CMPQD 0,R7
00004125 PC 1a09		  7720                          BNE ILOOP:B
00004127 PC 8f07		  7721                          ADDQD -1,R0
00004129 PC 8fc008		  7722                          ADDQD 1, CHRCOUNT
0000412c PC ea28		  7723                          BR FIN:B
				  7724
0000412e PC 1f38		  7725          ILOOP:          CMPQD 0,R7
00004130 PC 0a24		  7726                          BEQ FIN:B
00004132 PC 9739		  7727                          MOVD R7,R6
00004134 PC ceb7a10000000a	  7728                          REMD 10,R6
0000413b PC 4eb331		  7729                          ABSD R6,R6
0000413e PC 80a130		  7730                          ADDB H'30,R6
00004141 PC 1437d083e1		  7731                          MOVB R6,NUMCH[R0:B]
00004146 PC 8fc008		  7732                          ADDQD 1, CHRCOUNT
00004149 PC cef3a10000000a	  7733                          QUOD 10,R7
00004150 PC 8f07		  7734                          ADDQD -1,R0
00004152 PC ea5c		  7735                          BR ILOOP
				  7736
00004154 PC 9cd081ac		  7737          FIN:            CMPQB TRUE,NEGIT
00004158 PC 1a0d		  7738                          BNE NON:B
0000415a PC 14a7d02d83e1	  7739                          MOVB '-',NUMCH[R0:B]
00004160 PC 8fc008		  7740                          ADDQD 1, CHRCOUNT
00004163 PC 8f07		  7741                          ADDQD -1,R0
				  7742
00004165 PC 8f00		  7743          NON:            ADDQD 1,R0
				  7744
00004167 PC 67e0d083e1		  7745       PACKLEFT:          ADDR NUMCH[R0:B], R1
0000416c PC ce18c008		  7746                          MOVZBD  CHRCOUNT, R0
00004170 PC a7d083e1		  7747                          ADDR NUMCH, R2
00004174 PC 0e0000		  7748                          MOVSB
				  7749          EX_N_T_:
00004177 PC 92ff1200		  7750                          .ENDPROC
				  7751
				  7752
				  7753
				  7754
0000417b PC			  7755                  .endseg
				  7756
				  7757
				  7758  INIT__:                 .PROC
				  7759                          .VAR
0000417b PC 820000		  7760                          .BEGIN
0000417e PC 92001200		  7761                          .ENDPROC
				  7762
				  7763  ;OPEN__:                .PROC
				  7764  ;       FID:            .BLKD  
				  7765  ;                       .BLKD  
				  7766  ;                       .BLKW
				  7767  ;                       .BLKW
				  7768  ;                       .BLKW
				  7769  ;       FNADDR:         .BLKD  
				  7770  ;                       .VAR
				  7771  ;                       .BEGIN
				  7772  ;                       .ENDPROC
				  7773
				  7774  ; end of autil.32k
				  7775  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				  7776  ; start of edit.32k
				  7777
				  7778  EDIT:           .PROC
			  7779          EVECIN: .BLKD   ;START OF INPUT LINE
			  7780          EVECEN: .BLKD   ;FOR INSERT AND REPLACE FUNCTIONS
			  7781          COM_N:  .BLKW
				  7782                  .RETURNS
			  7783          R_VIN:  .BLKD           ;EVECIN START OF RETURN MESSAGE
			  7784          R_VEN:  .BLKD           ;EVECEN END OF RETURN MESSAGE
				  7785                  .VAR[R0,R1,R2,R3,R4,R5,R6,R7]
00004182 PC 82ff00		  7786                  .BEGIN
00004185 PC ea80e7		  7787                  BR      STARTE:W
00004188 PC 4552525f4544230d	  7788          E_MES:  .BYTE   'ERR_ED#',CR
00004190 PC 4241445f5458540d	  7789          E_MES2: .BYTE   'BAD_TXT',CR
				  7790
				  7791  CHR_CNT:
00004198 PC 17d08814		  7792          MOVD    L_ADDR, R0
0000419c PC 9700		  7793          MOVD    R0, R2
0000419e PC 5cd083e0		  7794          MOVQB   0, SAFETY       ;SANITY CONTROL
000041a2 PC 8f00		  7795  NXCHR0: ADDQD   1, R0
000041a4 PC 8cd083e0		  7796          ADDQB   1, SAFETY       ;INCREMENT SAFETY COUNT
000041a8 PC 84a66483e0		  7797          CMPB    100, SAFETY     ;IF NO CR AFTER 100 THEN BAD
000041ad PC 6a08		  7798          BGT     SANE0:B
000041af PC 5fd18313		  7799          MOVQD   TEXT_BAD, ERROR ;SET BAD TEXT ERROR FLAG AND
000041b3 PC ea0f		  7800          BR      CHREX:B
000041b5 PC 0445000d		  7801  SANE0:  CMPB    0(R0), CR
000041b9 PC 1a69		  7802          BNE     NXCHR0
000041bb PC 8f00		  7803          ADDQD   1, R0
000041bd PC a300		  7804          SUBD    R0, R2
000041bf PC 4eb310		  7805          ABSD    R2, R2
000041c2 PC 1200		  7806  CHREX:  RET     0
				  7807
				  7808
				  7809  LINE_ADDR:
000041c4 PC 5cd083e0		  7810          MOVQB   0, SAFETY       ;SANITY CONTROL
000041c8 PC 1f08		  7811          CMPQD   0, R1           ;R0 := ADDR(LINE R1)
000041ca PC 0a8043		  7812          BEQ     FRST:W
000041cd PC 9fd78810		  7813          CMPQD   -1, LAST_AD     ;CHECK FOR VALID LAST
000041d1 PC da19		  7814          BGE     NXCHR:B
000041d3 PC 870e880c		  7815          CMPD    R1, LAST_L      ;IF CURRENT LINE #
000041d7 PC 1a09		  7816          BNE     NOTSAM:B
000041d9 PC 17d08810		  7817          MOVD    LAST_AD, R0
000041dd PC ea8030		  7818          BR      FRST:W
000041e0 PC ca0a		  7819  NOTSAM: BLT     NXCHR:B         ;>= LAST LINE # THEN DO
000041e2 PC 17d08810		  7820          MOVD    LAST_AD, R0     ;DO OPTIMIZED SEARCH
000041e6 PC 63d0880c		  7821          SUBD    LAST_L, R1
000041ea PC 8f00		  7822  NXCHR:  ADDQD   1, R0
000041ec PC 8cd083e0		  7823          ADDQB   1, SAFETY       ;INCREMENT SAFETY COUNT
000041f0 PC 84a66483e0		  7824          CMPB    100, SAFETY     ;IF NO CR AFTER 100 THEN BAD
000041f5 PC 6a08		  7825          BGT     SANE:B
000041f7 PC 5fd18313		  7826          MOVQD   TEXT_BAD, ERROR ;SET BAD TEXT ERROR FLAG AND
000041fb PC ea12		  7827          BR      FRST:B          ;TERMINATE LOOKUP LOOP
000041fd PC 0445000d		  7828  SANE:   CMPB    0(R0), CR
00004201 PC 1a69		  7829          BNE     NXCHR
00004203 PC 5cd083e0		  7830          MOVQB   0, SAFETY       ;RESET SAFETY FOR NEXT LINE
00004207 PC cf0fbfe3		  7831          ACBD    -1, R1, NXCHR:W
0000420b PC 8f00		  7832          ADDQD   1, R0
				  7833  FRST:                          
0000420d PC 1200		  7834          RET     0
				  7835
				  7836  MOVSB_B:
0000420f PC 944a0000		  7837          MOVB    0(R1), 0(R2)
00004213 PC 8f0f		  7838          ADDQD   -1, R1
00004215 PC 8f17		  7839          ADDQD   -1, R2
00004217 PC cf0778		  7840          ACBD    -1, R0, MOVSB_B
0000421a PC 1200		  7841          RET     0
				  7842
				  7843  EXPAND:
0000421c PC 17d0881c		  7844          MOVD    TXTEND, R0
00004220 PC 57d08814		  7845          MOVD    L_ADDR, R1
00004224 PC 2308		  7846          SUBD    R1, R0          ;CHR CNT
00004226 PC 57d0881c		  7847          MOVD    TXTEND, R1      ;SOURCE
0000422a PC 83d68800881c	  7848          ADDD    LGTH, TXTEND  
00004230 PC 97d0881c		  7849          MOVD    TXTEND,R2       ;DESTINATION
00004234 PC 1f00		  7850          CMPQD   0, R0
00004236 PC da08		  7851          BGE     NOEXP:B
00004238 PC 8f0f		  7852          ADDQD   -1, R1
0000423a PC 8f17		  7853          ADDQD   -1, R2
0000423c PC 0253		  7854          BSR     MOVSB_B         ;REV E BUG
0000423e PC 1200		  7855  NOEXP:  RET      0
				  7856
				  7857  ADDLIN:
00004240 PC 17d08800		  7858          MOVD    LGTH, R0
00004244 PC 57c00e		  7859          MOVD    EVECIN, R1       ;SOURCE
00004247 PC 97d08814		  7860          MOVD    L_ADDR, R2      ;DESTINATION
0000424b PC 0e0000		  7861          MOVSB
0000424e PC 1200		  7862          RET     0
				  7863
				  7864  SQUEEZ:
00004250 PC 02bf48		  7865          BSR     CHR_CNT
00004253 PC 5700		  7866          MOVD    R0, R1          ;SOURCE
00004255 PC 17d0881c		  7867          MOVD    TXTEND, R0
00004259 PC 2308		  7868          SUBD    R1, R0          ;GETCHR CNT
0000425b PC 1f00		  7869          CMPQD   0, R0
0000425d PC da0d		  7870          BGE     NO_SQE:B
0000425f PC a316881c		  7871          SUBD    R2, TXTEND      ;UPDATE TXTEND
00004263 PC 97d08814		  7872          MOVD    L_ADDR, R2
00004267 PC 0e0000		  7873          MOVSB
0000426a PC 1200		  7874  NO_SQE: RET     0
				  7875
				  7876  STARTE:                    
0000426c PC 5fd08313		  7877          MOVQD   FALSE, ERROR
00004270 PC 1dc008		  7878          CMPQW   0, COM_N
00004273 PC 0a21		  7879          BEQ     RESETE:B  
00004275 PC 1fd08804		  7880          CMPQD   0, LINNUM
00004279 PC 6a80fb		  7881          BGT     ER:W
0000427c PC 87d688048818	  7882          CMPD    LINNUM, LINES
00004282 PC 6a80f2		  7883          BGT     ER:W
00004285 PC 27d08820		  7884          ADDR    TEXT, R0
00004289 PC 57d08804		  7885          MOVD    LINNUM, R1
0000428d PC 02bf37		  7886          BSR     LINE_ADDR
00004290 PC 97068814		  7887          MOVD    R0, L_ADDR
00004294 PC ced9c108		  7888  RESETE: MOVZWD  COM_N, R7
00004298 PC 7defdf04		  7889  CMD_VE:  CASEW   CMD_VECE:B[R7:W]
0000429c PC 2a00		  7890  CMD_VECE:       .WORD   INITE - CMD_VE      ; "RS"
0000429e PC 3e00		  7891                  .WORD   INSERT - CMD_VE     ; "IN"
000042a0 PC 6300		  7892                  .WORD   DISPLY - CMD_VE     ; "TP"
000042a2 PC 8c00		  7893                  .WORD   DELETEE - CMD_VE    ; "KI"
000042a4 PC a600		  7894                  .WORD   REPLAC - CMD_VE     ; "RP"
				  7895  INVALE:
000042a6 PC 5fd08804		  7896          MOVQD   0, LINNUM
000042aa PC 5fd08818		  7897          MOVQD   0, LINES
000042ae PC 5fd08808		  7898          MOVQD   0, NEXT_LN
000042b2 PC 5fd0880c		  7899          MOVQD   0, LAST_L
000042b6 PC a7d68820881c	  7900          ADDR    TEXT, TXTEND
000042bc PC dfd78810		  7901          MOVQD   -1, LAST_AD
000042c0 PC 1200		  7902          RET     0
				  7903
000042c2 PC 0264		  7904  INITE:   BSR     INVALE                          
000042c4 PC ea80f2		  7905          BR      EDIT_EX:W
				  7906
				  7907  INS_LINE:
000042c7 PC 02bf55		  7908          BSR     EXPAND
000042ca PC 02bf76		  7909          BSR     ADDLIN
000042cd PC 02becb		  7910          BSR     CHR_CNT
000042d0 PC 8fd08818		  7911          ADDQD   1, LINES
000042d4 PC 1200		  7912          RET     0
				  7913
				  7914  INSERT: 
000042d6 PC 97c60a8800		  7915          MOVD    EVECEN, LGTH
000042db PC a3c60e8800		  7916          SUBD    EVECIN, LGTH
000042e0 PC 8fd08800		  7917          ADDQD   1, LGTH
000042e4 PC 9fd08800		  7918          CMPQD   1, LGTH                 ;        CMPQD   2, LGTH   
000042e8 PC da808c		  7919          BGE     ER:W   
000042eb PC 07d588000000003a	  7920          CMPD    LGTH, LINE_LGTH         ;CHECK FOR MAX LENGTH
000042f3 PC 6a8081		  7921          BGT     ER:W    
000042f6 PC 0251		  7922          BSR     INS_LINE
000042f8 PC ea80a6		  7923          BR      EX:W
				  7924
				  7925  DISPLY:  
000042fb PC 1fd08818		  7926          CMPQD   0, LINES
000042ff PC da8075		  7927          BGE     ER:W
00004302 PC 87d688048818	  7928          CMPD    LINNUM ,LINES
00004308 PC da806c		  7929          BGE     ER:W
0000430b PC 17d688140e		  7930          MOVD    L_ADDR, R_VIN
00004310 PC 02be88		  7931          BSR     CHR_CNT
00004313 PC 8f07		  7932          ADDQD   -1, R0
00004315 PC 17060a		  7933          MOVD    R0, R_VEN
00004318 PC ea808c		  7934          BR      LEAVE:W
				  7935
				  7936  DEL_LINE:
0000431b PC 02bf35		  7937          BSR     SQUEEZ
0000431e PC 8fd78818		  7938          ADDQD   -1, LINES
00004322 PC 1200		  7939          RET     0
				  7940
				  7941  DELETEE: 
00004324 PC 87d688048818	  7942          CMPD    LINNUM, LINES
0000432a PC da804a		  7943          BGE     ER:W
0000432d PC 9fd08818		  7944          CMPQD   1, LINES
00004331 PC ca08		  7945          BLT     DO_DEL:B
00004333 PC 02bf73		  7946          BSR     INVALE
00004336 PC ea8068		  7947          BR      EX:W
00004339 PC 0262		  7948  DO_DEL: BSR     DEL_LINE
0000433b PC ea8063		  7949          BR      EX:W
				  7950
				  7951  REPLAC: 
0000433e PC 87d688048818	  7952          CMPD    LINNUM, LINES
00004344 PC da30		  7953          BGE     ER:B
00004346 PC 97c60a8800		  7954          MOVD    EVECEN, LGTH
0000434b PC a3c60e8800		  7955          SUBD    EVECIN, LGTH
00004350 PC 8fd08800		  7956          ADDQD   1, LGTH
00004354 PC 9fd08800		  7957          CMPQD   1, LGTH   
00004358 PC da1c		  7958          BGE     ER:B   
0000435a PC 9fd08818		  7959          CMPQD   1, LINES
0000435e PC ca07		  7960          BLT     A_DEL:B
00004360 PC 02bf46		  7961          BSR     INVALE
00004363 PC ea05		  7962          BR      INSE:B
00004365 PC 02bfb6		  7963  A_DEL:  BSR     DEL_LINE
				  7964  INSE:    
00004368 PC 02bf5f		  7965          BSR     INS_LINE
0000436b PC ea8033		  7966          BR      EX:w
				  7967
0000436e PC 27d8be22		  7968  ER2:    ADDR    E_MES2, R0
00004372 PC ea06		  7969          BR      SET:B
00004374 PC 27d8be14		  7970  ER:     ADDR    E_MES, R0
00004378 PC 17060e		  7971  SET:    MOVD    R0, R_VIN
0000437b PC 8f03		  7972          ADDQD   EMES_L, R0
0000437d PC 17060a		  7973          MOVD    R0, R_VEN
00004380 PC dfd78810		  7974          MOVQD   -1, LAST_AD
00004384 PC 97d6880c8804	  7975          MOVD    LAST_L, LINNUM          ;RESTORE A GOOD LINE NUMBER
0000438a PC 8fd78804		  7976          ADDQD   -1, LINNUM
0000438e PC 9fd78804		  7977          CMPQD   -1, LINNUM
00004392 PC ca06		  7978          BLT     OK_N:B
00004394 PC 5fd08804		  7979          MOVQD   0, LINNUM
00004398 PC dfd08313		  7980  OK_N:   MOVQD   TRUE, ERROR
0000439c PC ea1a		  7981          BR      EDIT_EX:B                       ;LEAVE
0000439e PC 5fc00e		  7982  EX:     MOVQD   0, R_VIN
000043a1 PC 5fc00a		  7983          MOVQD   0, R_VEN
000043a4 PC 97d68804880c	  7984  LEAVE:  MOVD    LINNUM, LAST_L
000043aa PC 1fd18313		  7985          CMPQD   TEXT_BAD, ERROR         ;CHECK FOR BAD TEXT ERROR
000043ae PC 0a40		  7986          BEQ     ER2                        
000043b0 PC 97d688148810	  7987          MOVD    L_ADDR, LAST_AD
				  7988  EDIT_EX:
000043b6 PC 92ff1202		  7989          .ENDPROC
				  7990
				  7991  ; end of edit.32k
				  7992  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				  7993  ; start of float.32k
				  7994
				  7995
				  7996  P1_DIGIT:       .PROC
			  7997          .BLKB   4
				  7998          .RETURNS
			  7999          .BLKB   4
				  8000          .VAR    [R7,R6]
			  8001          .BLKB   4
000043ba PC 82c004		  8002          .BEGIN
				  8003
				  8004                                  ; line 153
				  8005                                  ; line 154
000043bd PC cedc9184398058	  8006          MOVXBD  88(FLOATS),R7
000043c4 PC ce9ce19784392f	  8007          MOVXBD  47(FLOATS)[R7:B],R6
000043cb PC a3a100000030	  8008          SUBD    48,R6
000043d1 PC 17367c		  8009          MOVD    R6,(-4)(FP)
				  8010                                  ; line 155
000043d4 PC 1fc07c		  8011          CMPQD   0,(-4)(FP)
000043d7 PC 7a8009		  8012          BLE     L1:W
				  8013                                  ; line 155
000043da PC df908439807c	  8014          MOVQD   1,124(FLOATS)
				  8015  L1:
				  8016                                  ; line 156
000043e0 PC 07a6000000097c	  8017          CMPD    9,(-4)(FP)
000043e7 PC da8009		  8018          BGE     L2:W
				  8019                                  ; line 156
000043ea PC df908439807c	  8020          MOVQD   1,124(FLOATS)
				  8021  L2:
				  8022                                  ; line 157
000043f0 PC 17c67c08		  8023          MOVD    (-4)(FP),8(FP)
				  8024                                  ; line 158
000043f4 PC 92031200		  8025          .ENDPROC
				  8026
				  8027  P2_MOVE_PNT:    .PROC
			  8028          .BLKB   0
				  8029          .VAR    [R7]
000043f8 PC 828000		  8030          .BEGIN
				  8031
				  8032                                  ; line 161
				  8033                                  ; line 162
000043fb PC cedc9184398058	  8034          MOVXBD  88(FLOATS),R7
00004402 PC 8f38		  8035          ADDQD   1,R7
00004404 PC 943c84398058	  8036          MOVB    R7,88(FLOATS)
				  8037                                  ; line 163
0000440a PC cedc9184398058	  8038          MOVXBD  88(FLOATS),R7
00004411 PC 04a7970d84392f	  8039          CMPB    13,47(FLOATS)[R7:B]
				  8040
00004418 PC 1a8009		  8041          BNE     L3:W
				  8042                                  ; line 163
0000441b PC 5c908439805a	  8043          MOVQB   0,90(FLOATS)
				  8044  L3:
				  8045                                  ; line 164
00004421 PC cedc9184398058	  8046          MOVXBD  88(FLOATS),R7
00004428 PC 04a7972084392f	  8047          CMPB    32,47(FLOATS)[R7:B]
0000442f PC 1a8009		  8048          BNE     L4:W
				  8049                                  ; line 164
00004432 PC 5c908439805a	  8050          MOVQB   0,90(FLOATS)
				  8051  L4:
				  8052                                  ; line 165
00004438 PC cedc9184398058	  8053          MOVXBD  88(FLOATS),R7
0000443f PC 873c84392c		  8054          CMPD    R7,44(FLOATS)
00004444 PC 7a8009		  8055          BLE     L5:W
				  8056                                  ; line 165
00004447 PC 5c908439805a	  8057          MOVQB   0,90(FLOATS)
				  8058  L5:
				  8059                                  ; line 166
0000444d PC cedc9184398058	  8060          MOVXBD  88(FLOATS),R7
00004454 PC c7a100000028	  8061          CMPD    40,R7
0000445a PC da8009		  8062          BGE     L6:W
				  8063                                  ; line 166
0000445d PC 5c908439805a	  8064          MOVQB   0,90(FLOATS)
				  8065  L6:
				  8066                                  ; line 167
00004463 PC 92011200		  8067          .ENDPROC
				  8068
				  8069  P3_Q_SHF:       .PROC
			  8070          .BLKB   6
				  8071          .VAR    [R7]
00004467 PC 828000		  8072          .BEGIN
				  8073
				  8074                                  ; line 172
				  8075                                  ; line 173
0000446a PC cedcc108		  8076          MOVXBD  8(FP),R7
0000446e PC 1f38		  8077          CMPQD   0,R7
00004470 PC 1a8006		  8078          BNE     L7:W
				  8079                                  ; line 173
00004473 PC ea807f		  8080          BR      L8:W
				  8081  L7:
				  8082                                  ; line 174
00004476 PC 97840a00843920	  8083          MOVD    0(10(FP)),32(FLOATS)
				  8084                                  ; line 175
0000447d PC 97840a04843924	  8085          MOVD    4(10(FP)),36(FLOATS)
				  8086                                  ; line 176
00004484 PC e7850a00		  8087          ADDR    0(10(FP)),TOS
00004488 PC ced0c508		  8088          MOVXBW  8(FP),TOS
0000448c PC 0289ab		  8089          BSR     D_SHF   
				  8090                                  ; line 177
0000448f PC e7850a04		  8091          ADDR    4(10(FP)),TOS
				  8092
00004493 PC ced0c508		  8093          MOVXBW  8(FP),TOS
00004497 PC 0289a0		  8094          BSR     D_SHF   
				  8095                                  ; line 178
0000449a PC cedcc108		  8096          MOVXBD  8(FP),R7
0000449e PC 1f38		  8097          CMPQD   0,R7
000044a0 PC 7a802c		  8098          BLE     L9:W
				  8099                                  ; line 180
000044a3 PC cedcc108		  8100          MOVXBD  8(FP),R7
000044a7 PC c3a100000020	  8101          ADDD    32,R7
000044ad PC 143e08		  8102          MOVB    R7,8(FP)
				  8103                                  ; line 181
000044b0 PC e7ddffffbb74	  8104          ADDR    36(FLOATS),TOS
000044b6 PC ced0c508		  8105          MOVXBW  8(FP),TOS
000044ba PC 02897d		  8106          BSR     D_SHF   
				  8107                                  ; line 182
000044bd PC e7850a00		  8108          ADDR    0(10(FP)),TOS
000044c1 PC d795843924		  8109          MOVD    36(FLOATS),TOS
000044c6 PC 028965		  8110          BSR     D_OR    
000044c9 PC ea8029		  8111          BR      L10:W
				  8112  L9:
				  8113                                  ; line 185
000044cc PC cedcc108		  8114          MOVXBD  8(FP),R7
000044d0 PC e3a100000020	  8115          SUBD    32,R7
000044d6 PC 143e08		  8116          MOVB    R7,8(FP)
				  8117                                  ; line 186
000044d9 PC e7ddffffbb47	  8118          ADDR    32(FLOATS),TOS
000044df PC ced0c508		  8119          MOVXBW  8(FP),TOS
000044e3 PC 028954		  8120          BSR     D_SHF   
				  8121                                  ; line 187
000044e6 PC e7850a04		  8122          ADDR    4(10(FP)),TOS
000044ea PC d795843920		  8123          MOVD    32(FLOATS),TOS
000044ef PC 02893c		  8124          BSR     D_OR    
				  8125  L10:
				  8126  L8:
				  8127                                  ; line 190
000044f2 PC 92011206		  8128          .ENDPROC
				  8129
				  8130  P4_Q_MUL_10:    .PROC
			  8131          .BLKB   0
				  8132          .VAR    
000044f6 PC 820000		  8133          .BEGIN
				  8134
				  8135                                  ; line 193
				  8136                                  ; line 194
000044f9 PC 9794843900843910	  8137          MOVD    0(FLOATS),16(FLOATS)
				  8138                                  ; line 195
00004501 PC 9794843904843914	  8139          MOVD    4(FLOATS),20(FLOATS)
				  8140                                  ; line 196
00004509 PC e7ddffffbaf7	  8141          ADDR    0(FLOATS),TOS
0000450f PC ddb9		  8142          MOVQW   3,TOS
00004511 PC 02bf56		  8143          BSR     P3_Q_SHF   
				  8144                                  ; line 197
				  8145
00004514 PC e7ddffffbafc	  8146          ADDR    16(FLOATS),TOS
0000451a PC ddb8		  8147          MOVQW   1,TOS
0000451c PC 02bf4b		  8148          BSR     P3_Q_SHF   
				  8149                                  ; line 198
0000451f PC e7ddffffbae1	  8150          ADDR    0(FLOATS),TOS
00004525 PC e7ddffffbaeb	  8151          ADDR    16(FLOATS),TOS
0000452b PC 028942		  8152          BSR     Q_ADD   
				  8153                                  ; line 199
0000452e PC 92001200		  8154          .ENDPROC
				  8155
				  8156  P5_Q_MOD_10:    .PROC
			  8157          .BLKB   0
				  8158          .VAR    
00004532 PC 820000		  8159          .BEGIN
				  8160
				  8161                                  ; line 203
				  8162                                  ; line 204
00004535 PC 9794843900843908	  8163          MOVD    0(FLOATS),8(FLOATS)
				  8164                                  ; line 205
0000453d PC 979484390484390c	  8165          MOVD    4(FLOATS),12(FLOATS)
				  8166                                  ; line 206
00004545 PC e7ddffffbabb	  8167          ADDR    0(FLOATS),TOS
0000454b PC 028948		  8168          BSR     Q_DIV_10
				  8169                                  ; line 207
0000454e PC 02bfa8		  8170          BSR     P4_Q_MUL_10
				  8171                                  ; line 208
00004551 PC e7ddffffbab7	  8172          ADDR    8(FLOATS),TOS
00004557 PC e7ddffffbaa9	  8173          ADDR    0(FLOATS),TOS
0000455d PC 028923		  8174          BSR     Q_SUB   
				  8175                                  ; line 209
00004560 PC 979484390884398064	  8176          MOVD    8(FLOATS),100(FLOATS)
				  8177                                  ; line 210
00004569 PC 92001200		  8178          .ENDPROC
				  8179
				  8180  P6_REAL_CON:    .PROC
			  8181          .BLKB   0
				  8182          .VAR    [R7]
			  8183          .BLKB   2
0000456d PC 828002		  8184          .BEGIN
				  8185
				  8186                                  ; line 216
				  8187                                  ; line 217
00004570 PC dcc07e		  8188          MOVQB   1,(-2)(FP)
				  8189                                  ; line 218
00004573 PC 5f9084398068	  8190          MOVQD   0,104(FLOATS)
				  8191                                  ; line 219
00004579 PC 5f9084391c		  8192          MOVQD   0,28(FLOATS)
				  8193                                  ; line 220
0000457e PC 5cc07f		  8194          MOVQB   0,(-1)(FP)
				  8195
				  8196  L11:
				  8197                                  ; line 223
00004581 PC cedc9184398058	  8198          MOVXBD  88(FLOATS),R7
00004588 PC 04a7972e84392f	  8199          CMPB    46,47(FLOATS)[R7:B]
0000458f PC 0a8048		  8200          BEQ     L12:W
				  8201                                  ; line 226
00004592 PC 02bf64		  8202          BSR     P4_Q_MUL_10
				  8203                                  ; line 227
00004595 PC 5fb8		  8204          MOVQD   0,TOS
00004597 PC 02be23		  8205          BSR     P1_DIGIT   
0000459a PC 97bc843918		  8206          MOVD    TOS,24(FLOATS)
				  8207                                  ; line 228
0000459f PC 1f90843918		  8208          CMPQD   0,24(FLOATS)
000045a4 PC 0a8006		  8209          BEQ     L13:W
				  8210                                  ; line 228
000045a7 PC 5cc07e		  8211          MOVQB   0,(-2)(FP)
				  8212  L13:
				  8213                                  ; line 229
000045aa PC e7ddffffba56	  8214          ADDR    0(FLOATS),TOS
000045b0 PC e7ddffffba68	  8215          ADDR    24(FLOATS),TOS
000045b6 PC 0288b7		  8216          BSR     Q_ADD   
				  8217                                  ; line 230
000045b9 PC 9cc07f		  8218          CMPQB   1,(-1)(FP)
000045bc PC 1a8009		  8219          BNE     L14:W
				  8220                                  ; line 230
000045bf PC 8f9084398060	  8221          ADDQD   1,96(FLOATS)
				  8222  L14:
				  8223                                  ; line 231
000045c5 PC 1cc07e		  8224          CMPQB   0,(-2)(FP)
000045c8 PC 1a8009		  8225          BNE     L15:W
				  8226                                  ; line 231
000045cb PC 8f9084398068	  8227          ADDQD   1,104(FLOATS)
				  8228  L15:
				  8229                                  ; line 232
000045d1 PC 02be27		  8230          BSR     P2_MOVE_PNT
000045d4 PC ea8009		  8231          BR      L16:W
				  8232  L12:
				  8233                                  ; line 236
000045d7 PC dcc07f		  8234          MOVQB   1,(-1)(FP)
				  8235                                  ; line 237
000045da PC 02be1e		  8236          BSR     P2_MOVE_PNT
				  8237  L16:
				  8238                                  ; line 240
000045dd PC cedc9184398058	  8239          MOVXBD  88(FLOATS),R7
000045e4 PC 04a7974584392f	  8240          CMPB    69,47(FLOATS)[R7:B]
000045eb PC 0a800c		  8241          BEQ     L17:W
000045ee PC 1c908439805a	  8242          CMPQB   0,90(FLOATS)
000045f4 PC 1abf8d		  8243          BNE     L11
				  8244  L17:
				  8245                                  ; line 241
000045f7 PC 1f9084398078	  8246          CMPQD   0,120(FLOATS)
000045fd PC 1a8019		  8247          BNE     L18:W
				  8248                                  ; line 243
00004600 PC 87a40000000984398068  8249          CMPD    9,104(FLOATS)
0000460a PC da8009		  8250          BGE     L19:W
				  8251
				  8252                                  ; line 243
0000460d PC df908439807c	  8253          MOVQD   1,124(FLOATS)
				  8254  L19:
00004613 PC ea8016		  8255          BR      L20:W
				  8256  L18:
				  8257                                  ; line 246
00004616 PC 87a40000001184398068  8258          CMPD    17,104(FLOATS)
00004620 PC da8009		  8259          BGE     L21:W
				  8260                                  ; line 246
00004623 PC df908439807c	  8261          MOVQD   1,124(FLOATS)
				  8262  L21:
				  8263  L20:
				  8264                                  ; line 248
00004629 PC 92011200		  8265          .ENDPROC
				  8266
				  8267  P7_DEC_CONV:    .PROC
			  8268          .BLKB   0
				  8269          .VAR    [R7,R6]
0000462d PC 82c000		  8270          .BEGIN
				  8271
				  8272                                  ; line 252
				  8273                                  ; line 253
00004630 PC ce9ca41484398060	  8274          MOVXBD  20,96(FLOATS)
				  8275                                  ; line 254
00004638 PC d79184398060	  8276          MOVD    96(FLOATS),R7
0000463e PC 14a7973084392f	  8277          MOVB    48,47(FLOATS)[R7:B]
				  8278                                  ; line 255
00004645 PC ea802d		  8279          BR      L23:W
				  8280  L22:
				  8281                                  ; line 257
00004648 PC 02beea		  8282          BSR     P5_Q_MOD_10
				  8283                                  ; line 258
0000464b PC e7ddffffb9b5	  8284          ADDR    0(FLOATS),TOS
00004651 PC 028842		  8285          BSR     Q_DIV_10
				  8286                                  ; line 259
00004654 PC d7a100000030	  8287          MOVD    48,R7
0000465a PC c39184398064	  8288          ADDD    100(FLOATS),R7
00004660 PC 979184398060	  8289          MOVD    96(FLOATS),R6
00004666 PC 143f9684392f	  8290          MOVB    R7,47(FLOATS)[R6:B]
				  8291                                  ; line 260
0000466c PC 8f9784398060	  8292          ADDQD   -1,96(FLOATS)
				  8293  L23:
				  8294                                  ; line 261
00004672 PC d791843900		  8295          MOVD    0(FLOATS),R7
00004677 PC db91843904		  8296          ORD     4(FLOATS),R7
0000467c PC 1f38		  8297          CMPQD   0,R7
0000467e PC 1a4a		  8298          BNE     L22
				  8299                                  ; line 262
00004680 PC 9c9084398080	  8300          CMPQB   1,128(FLOATS)
00004686 PC 1a8010		  8301          BNE     L24:W
				  8302                                  ; line 262
00004689 PC d79184398060	  8303          MOVD    96(FLOATS),R7
0000468f PC 14a7972d84392f	  8304          MOVB    45,47(FLOATS)[R7:B]
				  8305
				  8306  L24:
				  8307                                  ; line 264
00004696 PC cedd9184398082	  8308          MOVXWD  130(FLOATS),R7
0000469d PC 1f38		  8309          CMPQD   0,R7
0000469f PC 7a8017		  8310          BLE     L25:W
				  8311                                  ; line 266
000046a2 PC 4ea1948439808284398082  8312          NEGW    130(FLOATS),130(FLOATS)
				  8313                                  ; line 267
000046ad PC dc9084398081	  8314          MOVQB   1,129(FLOATS)
000046b3 PC ea8009		  8315          BR      L26:W
				  8316  L25:
				  8317                                  ; line 269
000046b6 PC 5c9084398081	  8318          MOVQB   0,129(FLOATS)
				  8319  L26:
				  8320                                  ; line 271
000046bc PC ce9ca41b84398060	  8321          MOVXBD  27,96(FLOATS)
				  8322                                  ; line 272
000046c4 PC d79184398060	  8323          MOVD    96(FLOATS),R7
000046ca PC 14a7973084392f	  8324          MOVB    48,47(FLOATS)[R7:B]
				  8325                                  ; line 273
000046d1 PC d79184398060	  8326          MOVD    96(FLOATS),R7
000046d7 PC 8f3d		  8327          ADDQD   -5,R7
000046d9 PC 14a7974584392f	  8328          MOVB    69,47(FLOATS)[R7:B]
				  8329                                  ; line 275
000046e0 PC ea8049		  8330          BR      L28:W
				  8331  L27:
				  8332                                  ; line 277
000046e3 PC cedd9184398082	  8333          MOVXWD  130(FLOATS),R7
000046ea PC cefba10000000a	  8334          MODD    10,R7
000046f1 PC 973c84398064	  8335          MOVD    R7,100(FLOATS)
				  8336                                  ; line 278
000046f7 PC cedd9184398082	  8337          MOVXWD  130(FLOATS),R7
000046fe PC cef3a10000000a	  8338          QUOD    10,R7
00004705 PC 953c84398082	  8339          MOVW    R7,130(FLOATS)
				  8340                                  ; line 279
0000470b PC d7a100000030	  8341          MOVD    48,R7
00004711 PC c39184398064	  8342          ADDD    100(FLOATS),R7
00004717 PC 979184398060	  8343          MOVD    96(FLOATS),R6
0000471d PC 143f9684392f	  8344          MOVB    R7,47(FLOATS)[R6:B]
				  8345                                  ; line 280
00004723 PC 8f9784398060	  8346          ADDQD   -1,96(FLOATS)
				  8347  L28:
				  8348                                  ; line 281
00004729 PC cedd9184398082	  8349          MOVXWD  130(FLOATS),R7
00004730 PC 1f38		  8350          CMPQD   0,R7
00004732 PC 1abfb1		  8351          BNE     L27
				  8352                                  ; line 282
00004735 PC 9c9084398081	  8353          CMPQB   1,129(FLOATS)
0000473b PC 1a8010		  8354          BNE     L29:W
				  8355                                  ; line 282
0000473e PC d79184398060	  8356          MOVD    96(FLOATS),R7
00004744 PC 14a7972d84392f	  8357          MOVB    45,47(FLOATS)[R7:B]
				  8358  L29:
				  8359                                  ; line 283
0000474b PC 92031200		  8360          .ENDPROC
				  8361
				  8362  P8_ROUND:       .PROC
			  8363          .BLKB   0
				  8364          .VAR    [R7]
			  8365          .BLKB   8
0000474f PC 828008		  8366          .BEGIN
				  8367
				  8368                                  ; line 287
				  8369                                  ; line 288
00004752 PC df908439806c	  8370          MOVQD   1,108(FLOATS)
				  8371                                  ; line 289
00004758 PC 1f9084398078	  8372          CMPQD   0,120(FLOATS)
0000475e PC 1a800b		  8373          BNE     L30:W
				  8374                                  ; line 289
00004761 PC ce9ca40a8439806c	  8375          MOVXBD  10,108(FLOATS)
				  8376  L30:
				  8377                                  ; line 290
00004769 PC 17968439806c78	  8378          MOVD    108(FLOATS),(-8)(FP)
00004770 PC 9fc078		  8379          CMPQD   1,(-8)(FP)
00004773 PC 6a802a		  8380          BGT     L31:W
00004776 PC dfc07c		  8381          MOVQD   1,(-4)(FP)
00004779 PC ea8006		  8382          BR      L33:W
				  8383  L32:
0000477c PC 8fc07c		  8384          ADDQD   1,(-4)(FP)
				  8385  L33:
				  8386                                  ; line 292
0000477f PC e7ddffffb881	  8387          ADDR    0(FLOATS),TOS
00004785 PC 02870e		  8388          BSR     Q_DIV_10
				  8389                                  ; line 293
00004788 PC cedd9184398082	  8390          MOVXWD  130(FLOATS),R7
0000478f PC 8f38		  8391          ADDQD   1,R7
00004791 PC 953c84398082	  8392          MOVW    R7,130(FLOATS)
				  8393                                  ; line 294
00004797 PC 07c6787c		  8394          CMPD    (-8)(FP),(-4)(FP)
0000479b PC 1a61		  8395          BNE     L32
				  8396  L31:
				  8397                                  ; line 295
0000479d PC 92011200		  8398          .ENDPROC
				  8399
				  8400  P9_EXP: .PROC
			  8401          .BLKB   0
				  8402          .VAR    [R7]
000047a1 PC 828000		  8403          .BEGIN
				  8404
				  8405                                  ; line 299
				  8406                                  ; line 300
000047a4 PC ea8021		  8407          BR      L35:W
				  8408  L34:
				  8409                                  ; line 302
000047a7 PC 5fb8		  8410          MOVQD   0,TOS
000047a9 PC 02bc11		  8411          BSR     P1_DIGIT   
				  8412
000047ac PC cedd9184398082	  8413          MOVXWD  130(FLOATS),R7
000047b3 PC cee3a10000000a	  8414          MULD    10,R7
000047ba PC c3b9		  8415          ADDD    TOS,R7
000047bc PC 953c84398082	  8416          MOVW    R7,130(FLOATS)
				  8417                                  ; line 303
000047c2 PC 02bc36		  8418          BSR     P2_MOVE_PNT
				  8419  L35:
				  8420                                  ; line 304
000047c5 PC 9c908439805a	  8421          CMPQB   1,90(FLOATS)
000047cb PC 0a5c		  8422          BEQ     L34
				  8423                                  ; line 305
000047cd PC 9c9084398081	  8424          CMPQB   1,129(FLOATS)
000047d3 PC 1a800e		  8425          BNE     L36:W
				  8426                                  ; line 305
000047d6 PC 4ea1948439808284398082  8427          NEGW    130(FLOATS),130(FLOATS)
				  8428  L36:
				  8429                                  ; line 306
000047e1 PC 1f9084398078	  8430          CMPQD   0,120(FLOATS)
000047e7 PC 1a8032		  8431          BNE     L37:W
				  8432                                  ; line 308
000047ea PC cedd9184398082	  8433          MOVXWD  130(FLOATS),R7
000047f1 PC c7a100000025	  8434          CMPD    37,R7
000047f7 PC da8009		  8435          BGE     L38:W
				  8436                                  ; line 308
000047fa PC df908439807c	  8437          MOVQD   1,124(FLOATS)
				  8438  L38:
				  8439                                  ; line 309
00004800 PC cedd9184398082	  8440          MOVXWD  130(FLOATS),R7
00004807 PC c7a1ffffffdb	  8441          CMPD    -37,R7
0000480d PC 7a8009		  8442          BLE     L39:W
				  8443                                  ; line 309
00004810 PC df908439807c	  8444          MOVQD   1,124(FLOATS)
				  8445  L39:
00004816 PC ea802f		  8446          BR      L40:W
				  8447  L37:
				  8448                                  ; line 312
00004819 PC cedd9184398082	  8449          MOVXWD  130(FLOATS),R7
00004820 PC c7a100000133	  8450          CMPD    307,R7
00004826 PC da8009		  8451          BGE     L41:W
				  8452                                  ; line 312
00004829 PC df908439807c	  8453          MOVQD   1,124(FLOATS)
				  8454  L41:
				  8455                                  ; line 313
0000482f PC cedd9184398082	  8456          MOVXWD  130(FLOATS),R7
00004836 PC c7a1fffffecd	  8457          CMPD    -307,R7
0000483c PC 7a8009		  8458          BLE     L42:W
				  8459                                  ; line 313
0000483f PC df908439807c	  8460          MOVQD   1,124(FLOATS)
				  8461  L42:
				  8462  L40:
				  8463                                  ; line 315
00004845 PC 92011200		  8464          .ENDPROC
				  8465
				  8466  P10_SIGN_CHK:   .PROC
			  8467          .BLKB   4
				  8468          .VAR    [R7]
00004849 PC 828000		  8469          .BEGIN
				  8470
				  8471                                  ; line 318
				  8472                                  ; line 319
0000484c PC cedc9184398058	  8473          MOVXBD  88(FLOATS),R7
00004853 PC 04a7972d84392f	  8474          CMPB    45,47(FLOATS)[R7:B]
0000485a PC 1a800d		  8475          BNE     L43:W
				  8476                                  ; line 319
0000485d PC dc800800		  8477          MOVQB   1,0(8(FP))
				  8478                                  ; line 319
00004861 PC 02bb97		  8479          BSR     P2_MOVE_PNT
00004864 PC ea8017		  8480          BR      L44:W
				  8481  L43:
				  8482                                  ; line 320
00004867 PC cedc9184398058	  8483          MOVXBD  88(FLOATS),R7
0000486e PC 04a7972b84392f	  8484          CMPB    43,47(FLOATS)[R7:B]
00004875 PC 1a8006		  8485          BNE     L45:W
				  8486                                  ; line 320
00004878 PC 02bb80		  8487          BSR     P2_MOVE_PNT
				  8488  L45:
				  8489  L44:
				  8490                                  ; line 321
0000487b PC 92011204		  8491          .ENDPROC
				  8492
				  8493  P11_NORMALIZ:   .PROC
			  8494          .BLKB   0
				  8495          .VAR    [R7]
0000487f PC 828000		  8496          .BEGIN
				  8497
				  8498                                  ; line 324
				  8499                                  ; line 325
00004882 PC 5f908439805c	  8500          MOVQD   0,92(FLOATS)
				  8501                                  ; line 326
00004888 PC ea8014		  8502          BR      L47:W
				  8503  L46:
				  8504                                  ; line 328
0000488b PC e7ddffffb775	  8505          ADDR    0(FLOATS),TOS
00004891 PC ddb8		  8506          MOVQW   1,TOS
00004893 PC 02bbd4		  8507          BSR     P3_Q_SHF   
				  8508                                  ; line 329
00004896 PC 8f908439805c	  8509          ADDQD   1,92(FLOATS)
				  8510  L47:
				  8511                                  ; line 330
0000489c PC 5db8		  8512          MOVQW   0,TOS
0000489e PC d795843904		  8513          MOVD    4(FLOATS),TOS
000048a3 PC ced0a51f		  8514          MOVXBW  31,TOS
000048a7 PC 0285b3		  8515          BSR     D_TBIT  
000048aa PC 9cb8		  8516          CMPQB   1,TOS
000048ac PC 1a5f		  8517          BNE     L46
				  8518
				  8519                                  ; line 331
000048ae PC e7ddffffb752	  8520          ADDR    0(FLOATS),TOS
000048b4 PC 5dbe		  8521          MOVQW   -4,TOS
000048b6 PC 02bbb1		  8522          BSR     P3_Q_SHF   
				  8523                                  ; line 332
000048b9 PC 5f3a		  8524          MOVQD   4,R7
000048bb PC e3918439805c	  8525          SUBD    92(FLOATS),R7
000048c1 PC 973c84398060	  8526          MOVD    R7,96(FLOATS)
				  8527                                  ; line 333
000048c7 PC 92011200		  8528          .ENDPROC
				  8529
				  8530  ASC_2_RE:       .PROC
			  8531          .BLKB   20
				  8532          .VAR    [R7,R6]
			  8533          .BLKB   4
000048cb PC 82c004		  8534          .BEGIN
				  8535
				  8536                                  ; line 344
				  8537                                  ; line 345
000048ce PC 97c41484392c	  8538          MOVD    20(FP),44(FLOATS)
				  8539                                  ; line 346
000048d4 PC dfc07c		  8540          MOVQD   1,(-4)(FP)
000048d7 PC ea8006		  8541          BR      L50:W
				  8542  L49:
000048da PC 8fc07c		  8543          ADDQD   1,(-4)(FP)
				  8544  L50:
				  8545                                  ; line 346
000048dd PC d7c17c		  8546          MOVD    (-4)(FP),R7
000048e0 PC 97c17c		  8547          MOVD    (-4)(FP),R6
000048e3 PC 14e78796187f84392f	  8548          MOVB    -1(24(FP))[R7:B],47(FLOATS)[R6:B]
				  8549                                  ; line 346
000048ec PC 07a6000000287c	  8550          CMPD    40,(-4)(FP)
000048f3 PC 1a67		  8551          BNE     L49
				  8552  L48:
				  8553                                  ; line 347
000048f5 PC 9784100084398078	  8554          MOVD    0(16(FP)),120(FLOATS)
				  8555                                  ; line 348
000048fd PC 5d9084398082	  8556          MOVQW   0,130(FLOATS)
				  8557                                  ; line 349
00004903 PC 5f9084398084	  8558          MOVQD   0,132(FLOATS)
				  8559                                  ; line 350
00004909 PC 5c9084398080	  8560          MOVQB   0,128(FLOATS)
				  8561                                  ; line 351
0000490f PC 5c9084398081	  8562          MOVQB   0,129(FLOATS)
				  8563                                  ; line 352
00004915 PC 5f908439807c	  8564          MOVQD   0,124(FLOATS)
				  8565                                  ; line 353
0000491b PC 5f9084398060	  8566          MOVQD   0,96(FLOATS)
				  8567                                  ; line 354
00004921 PC 5f90843900		  8568          MOVQD   0,0(FLOATS)
				  8569                                  ; line 355
00004926 PC 5f90843904		  8570          MOVQD   0,4(FLOATS)
				  8571
				  8572                                  ; line 356
0000492b PC 5f801c00		  8573          MOVQD   0,0(28(FP))
				  8574                                  ; line 357
0000492f PC 5f801c04		  8575          MOVQD   0,4(28(FP))
				  8576                                  ; line 358
00004933 PC 5f90843928		  8577          MOVQD   0,40(FLOATS)
				  8578                                  ; line 359
00004938 PC dc9084398058	  8579          MOVQB   1,88(FLOATS)
				  8580                                  ; line 359
0000493e PC dc908439805a	  8581          MOVQB   1,90(FLOATS)
				  8582                                  ; line 361
00004944 PC e7ddffffb73c	  8583          ADDR    128(FLOATS),TOS
0000494a PC 02beff		  8584          BSR     P10_SIGN_CHK
				  8585                                  ; line 362
0000494d PC 02bc20		  8586          BSR     P6_REAL_CON
				  8587                                  ; line 364
00004950 PC 1c908439805a	  8588          CMPQB   0,90(FLOATS)
00004956 PC 1a8006		  8589          BNE     L51:W
				  8590                                  ; line 364
00004959 PC ea8012		  8591          BR      L52:W
				  8592  L51:
				  8593                                  ; line 365
0000495c PC 02ba9c		  8594          BSR     P2_MOVE_PNT
				  8595                                  ; line 367
0000495f PC e7ddffffb722	  8596          ADDR    129(FLOATS),TOS
00004965 PC 02bee4		  8597          BSR     P10_SIGN_CHK
				  8598                                  ; line 368
00004968 PC 02be39		  8599          BSR     P9_EXP     
				  8600  L52:
				  8601                                  ; line 371
0000496b PC d791843900		  8602          MOVD    0(FLOATS),R7
00004970 PC db91843904		  8603          ORD     4(FLOATS),R7
00004975 PC 1f38		  8604          CMPQD   0,R7
00004977 PC 1a8006		  8605          BNE     L53:W
				  8606                                  ; line 371
0000497a PC ea823b		  8607          BR      L54:W
				  8608  L53:
				  8609                                  ; line 372
0000497d PC 1f908439807c	  8610          CMPQD   0,124(FLOATS)
00004983 PC 0a8006		  8611          BEQ     L55:W
				  8612                                  ; line 372
00004986 PC ea822f		  8613          BR      L54:W
				  8614  L55:
				  8615                                  ; line 373
00004989 PC cedd9184398082	  8616          MOVXWD  130(FLOATS),R7
00004990 PC e39184398060	  8617          SUBD    96(FLOATS),R7
00004996 PC 953c84398082	  8618          MOVW    R7,130(FLOATS)
				  8619                                  ; line 380
0000499c PC 5f908439805c	  8620          MOVQD   0,92(FLOATS)
				  8621                                  ; line 381
000049a2 PC ea8014		  8622          BR      L57:W
				  8623  L56:
				  8624                                  ; line 383
000049a5 PC e7ddffffb65b	  8625          ADDR    0(FLOATS),TOS
000049ab PC ddb8		  8626          MOVQW   1,TOS
				  8627
000049ad PC 02baba		  8628          BSR     P3_Q_SHF   
				  8629                                  ; line 384
000049b0 PC 8f908439805c	  8630          ADDQD   1,92(FLOATS)
				  8631  L57:
				  8632                                  ; line 385
000049b6 PC 5db8		  8633          MOVQW   0,TOS
000049b8 PC d795843904		  8634          MOVD    4(FLOATS),TOS
000049bd PC ced0a51b		  8635          MOVXBW  27,TOS
000049c1 PC 028499		  8636          BSR     D_TBIT  
000049c4 PC 1cb8		  8637          CMPQB   0,TOS
000049c6 PC 0a5f		  8638          BEQ     L56
				  8639                                  ; line 386
000049c8 PC d7a10000003b	  8640          MOVD    59,R7
000049ce PC e3918439805c	  8641          SUBD    92(FLOATS),R7
000049d4 PC 973c84398060	  8642          MOVD    R7,96(FLOATS)
				  8643                                  ; line 389
000049da PC 83948439806084398084  8644          ADDD    96(FLOATS),132(FLOATS)
				  8645                                  ; line 396
000049e4 PC ea8056		  8646          BR      L59:W
				  8647  L58:
				  8648                                  ; line 398
000049e7 PC cedd9184398082	  8649          MOVXWD  130(FLOATS),R7
000049ee PC 1f38		  8650          CMPQD   0,R7
000049f0 PC da8025		  8651          BGE     L60:W
				  8652                                  ; line 399
000049f3 PC 02bb03		  8653          BSR     P4_Q_MUL_10
				  8654                                  ; line 400
000049f6 PC cedd9184398082	  8655          MOVXWD  130(FLOATS),R7
000049fd PC 8f3f		  8656          ADDQD   -1,R7
000049ff PC 953c84398082	  8657          MOVW    R7,130(FLOATS)
				  8658                                  ; line 401
00004a05 PC 02be7a		  8659          BSR     P11_NORMALIZ
				  8660                                  ; line 402
00004a08 PC 83948439806084398084  8661          ADDD    96(FLOATS),132(FLOATS)
00004a12 PC ea8028		  8662          BR      L61:W
				  8663  L60:
				  8664                                  ; line 405
00004a15 PC e7ddffffb5eb	  8665          ADDR    0(FLOATS),TOS
00004a1b PC 028478		  8666          BSR     Q_DIV_10
				  8667                                  ; line 406
00004a1e PC cedd9184398082	  8668          MOVXWD  130(FLOATS),R7
00004a25 PC 8f38		  8669          ADDQD   1,R7
00004a27 PC 953c84398082	  8670          MOVW    R7,130(FLOATS)
				  8671                                  ; line 407
00004a2d PC 02be52		  8672          BSR     P11_NORMALIZ
				  8673                                  ; line 408
00004a30 PC 83948439806084398084  8674          ADDD    96(FLOATS),132(FLOATS)
				  8675  L61:
				  8676  L59:
				  8677                                  ; line 410
00004a3a PC cedd9184398082	  8678          MOVXWD  130(FLOATS),R7
00004a41 PC 1f38		  8679          CMPQD   0,R7
00004a43 PC 1abfa4		  8680          BNE     L58
				  8681                                  ; line 412
00004a46 PC 97948439808484398060  8682          MOVD    132(FLOATS),96(FLOATS)
				  8683
				  8684                                  ; line 413
00004a50 PC 83a4000003ff84398084  8685          ADDD    1023,132(FLOATS)
				  8686                                  ; line 414
00004a5a PC d79184398060	  8687          MOVD    96(FLOATS),R7
00004a60 PC c3a10000007f	  8688          ADDD    127,R7
00004a66 PC 973c84398088	  8689          MOVD    R7,136(FLOATS)
				  8690                                  ; line 415
00004a6c PC 9794843904843928	  8691          MOVD    4(FLOATS),40(FLOATS)
				  8692                                  ; line 416
00004a74 PC 9794843900843910	  8693          MOVD    0(FLOATS),16(FLOATS)
				  8694                                  ; line 417
00004a7c PC 9794843904843914	  8695          MOVD    4(FLOATS),20(FLOATS)
				  8696                                  ; line 418
00004a84 PC e7ddffffb58c	  8697          ADDR    16(FLOATS),TOS
00004a8a PC cedca57f		  8698          MOVXBD  127,TOS
00004a8e PC 028391		  8699          BSR     D_AND   
				  8700                                  ; line 419
00004a91 PC e7ddffffb583	  8701          ADDR    20(FLOATS),TOS
00004a97 PC cedca50f		  8702          MOVXBD  15,TOS
00004a9b PC 028384		  8703          BSR     D_AND   
				  8704                                  ; line 421
00004a9e PC e7ddffffb5e6	  8705          ADDR    132(FLOATS),TOS
00004aa4 PC ced0a514		  8706          MOVXBW  20,TOS
00004aa8 PC 02838f		  8707          BSR     D_SHF   
				  8708                                  ; line 422
00004aab PC e7ddffffb555	  8709          ADDR    0(FLOATS),TOS
00004ab1 PC ddbc		  8710          MOVQW   -7,TOS
00004ab3 PC 02b9b4		  8711          BSR     P3_Q_SHF   
				  8712                                  ; line 423
00004ab6 PC df90843908		  8713          MOVQD   1,8(FLOATS)
				  8714                                  ; line 424
00004abb PC 5f9084390c		  8715          MOVQD   0,12(FLOATS)
				  8716                                  ; line 425
00004ac0 PC 87a4001fffff843904	  8717          CMPD    2097151,4(FLOATS)
00004ac9 PC 0a8022		  8718          BEQ     L62:W
00004acc PC 9f97843900		  8719          CMPQD   -1,0(FLOATS)
00004ad1 PC 0a801a		  8720          BEQ     L62:W
				  8721                                  ; line 426
00004ad4 PC 1f90843910		  8722          CMPQD   0,16(FLOATS)
00004ad9 PC 0a8012		  8723          BEQ     L63:W
				  8724                                  ; line 426
00004adc PC e7ddffffb524	  8725          ADDR    0(FLOATS),TOS
00004ae2 PC e7ddffffb526	  8726          ADDR    8(FLOATS),TOS
00004ae8 PC 028385		  8727          BSR     Q_ADD   
				  8728  L63:
				  8729  L62:
				  8730                                  ; line 428
00004aeb PC e7ddffffb519	  8731          ADDR    4(FLOATS),TOS
00004af1 PC d7a5000fffff	  8732          MOVD    1048575,TOS
00004af7 PC 028328		  8733          BSR     D_AND   
				  8734                                  ; line 429
00004afa PC e7ddffffb50a	  8735          ADDR    4(FLOATS),TOS
00004b00 PC d79584398084	  8736          MOVD    132(FLOATS),TOS
00004b06 PC 028325		  8737          BSR     D_OR    
				  8738                                  ; line 430
				  8739
00004b09 PC 9c9084398080	  8740          CMPQB   1,128(FLOATS)
00004b0f PC 1a8016		  8741          BNE     L64:W
				  8742                                  ; line 431
00004b12 PC e7ddffffb4f2	  8743          ADDR    4(FLOATS),TOS
00004b18 PC d7a180000001	  8744          MOVD    -2147483647,R7
00004b1e PC 8f3f		  8745          ADDQD   -1,R7
00004b20 PC d73d		  8746          MOVD    R7,TOS
00004b22 PC 028309		  8747          BSR     D_OR    
				  8748  L64:
				  8749                                  ; line 433
00004b25 PC e7ddffffb563	  8750          ADDR    136(FLOATS),TOS
00004b2b PC ced0a517		  8751          MOVXBW  23,TOS
00004b2f PC 028308		  8752          BSR     D_SHF   
				  8753                                  ; line 434
00004b32 PC e7ddffffb4f6	  8754          ADDR    40(FLOATS),TOS
00004b38 PC 5dbe		  8755          MOVQW   -4,TOS
00004b3a PC 0282fd		  8756          BSR     D_SHF   
				  8757                                  ; line 435
00004b3d PC 87a400ffffff843928	  8758          CMPD    16777215,40(FLOATS)
00004b46 PC 0a8010		  8759          BEQ     L65:W
				  8760                                  ; line 436
00004b49 PC 1f90843914		  8761          CMPQD   0,20(FLOATS)
00004b4e PC 0a8008		  8762          BEQ     L66:W
				  8763                                  ; line 436
00004b51 PC 8f90843928		  8764          ADDQD   1,40(FLOATS)
				  8765  L66:
				  8766  L65:
				  8767                                  ; line 438
00004b56 PC e7ddffffb4d2	  8768          ADDR    40(FLOATS),TOS
00004b5c PC d7a5007fffff	  8769          MOVD    8388607,TOS
00004b62 PC 0282bd		  8770          BSR     D_AND   
				  8771                                  ; line 439
00004b65 PC e7ddffffb4c3	  8772          ADDR    40(FLOATS),TOS
00004b6b PC d79584398088	  8773          MOVD    136(FLOATS),TOS
00004b71 PC 0282ba		  8774          BSR     D_OR    
				  8775                                  ; line 440
00004b74 PC 9c9084398080	  8776          CMPQB   1,128(FLOATS)
00004b7a PC 1a8016		  8777          BNE     L67:W
				  8778                                  ; line 441
00004b7d PC e7ddffffb4ab	  8779          ADDR    40(FLOATS),TOS
00004b83 PC d7a180000001	  8780          MOVD    -2147483647,R7
00004b89 PC 8f3f		  8781          ADDQD   -1,R7
00004b8b PC d73d		  8782          MOVD    R7,TOS
00004b8d PC 02829e		  8783          BSR     D_OR    
				  8784  L67:
				  8785                                  ; line 442
00004b90 PC 9f9084398078	  8786          CMPQD   1,120(FLOATS)
00004b96 PC 1a8014		  8787          BNE     L68:W
				  8788                                  ; line 443
00004b99 PC 17948439001c00	  8789          MOVD    0(FLOATS),0(28(FP))
				  8790                                  ; line 444
00004ba0 PC 17948439041c04	  8791          MOVD    4(FLOATS),4(28(FP))
00004ba7 PC ea800e		  8792          BR      L69:W
				  8793  L68:
				  8794                                  ; line 447
				  8795
00004baa PC 17948439281c00	  8796          MOVD    40(FLOATS),0(28(FP))
				  8797                                  ; line 448
00004bb1 PC 5f801c04		  8798          MOVQD   0,4(28(FP))
				  8799  L69:
				  8800  L54:
				  8801                                  ; line 451
00004bb5 PC 17948439807c0c00	  8802          MOVD    124(FLOATS),0(12(FP))
				  8803                                  ; line 452
00004bbd PC 92031214		  8804          .ENDPROC
				  8805
				  8806  REAL_2_A:       .PROC
			  8807          .BLKB   12
				  8808          .VAR    [R7,R6]
			  8809          .BLKB   4
00004bc1 PC 82c004		  8810          .BEGIN
				  8811
				  8812                                  ; line 460
				  8813                                  ; line 461
00004bc4 PC 9784100084398078	  8814          MOVD    0(16(FP)),120(FLOATS)
				  8815                                  ; line 462
00004bcc PC 1f9084398078	  8816          CMPQD   0,120(FLOATS)
00004bd2 PC 1a80d7		  8817          BNE     L70:W
				  8818                                  ; line 465
00004bd5 PC 97840c0084398084	  8819          MOVD    0(12(FP)),132(FLOATS)
				  8820                                  ; line 466
00004bdd PC 5db8		  8821          MOVQW   0,TOS
00004bdf PC d79584398084	  8822          MOVD    132(FLOATS),TOS
00004be5 PC ced0a51f		  8823          MOVXBW  31,TOS
00004be9 PC 028271		  8824          BSR     D_TBIT  
00004bec PC 9cb8		  8825          CMPQB   1,TOS
00004bee PC 1a800c		  8826          BNE     L71:W
				  8827                                  ; line 467
00004bf1 PC dc9084398080	  8828          MOVQB   1,128(FLOATS)
00004bf7 PC ea8009		  8829          BR      L72:W
				  8830  L71:
				  8831                                  ; line 468
00004bfa PC 5c9084398080	  8832          MOVQB   0,128(FLOATS)
				  8833  L72:
				  8834                                  ; line 469
00004c00 PC e7ddffffb484	  8835          ADDR    132(FLOATS),TOS
00004c06 PC d7a57f800000	  8836          MOVD    2139095040,TOS
00004c0c PC 028213		  8837          BSR     D_AND   
				  8838                                  ; line 470
00004c0f PC e7ddffffb475	  8839          ADDR    132(FLOATS),TOS
00004c15 PC ced0a5e9		  8840          MOVXBW  -23,TOS
00004c19 PC 02821e		  8841          BSR     D_SHF   
				  8842                                  ; line 471
00004c1c PC 97840c00843904	  8843          MOVD    0(12(FP)),4(FLOATS)
				  8844                                  ; line 472
00004c23 PC 5f90843900		  8845          MOVQD   0,0(FLOATS)
				  8846                                  ; line 473
00004c28 PC e7ddffffb3dc	  8847          ADDR    4(FLOATS),TOS
00004c2e PC d7a5007fffff	  8848          MOVD    8388607,TOS
				  8849
00004c34 PC 0281eb		  8850          BSR     D_AND   
				  8851                                  ; line 474
00004c37 PC d79184398084	  8852          MOVD    132(FLOATS),R7
00004c3d PC db91843904		  8853          ORD     4(FLOATS),R7
00004c42 PC db91843900		  8854          ORD     0(FLOATS),R7
00004c47 PC 1f38		  8855          CMPQD   0,R7
00004c49 PC 1a8006		  8856          BNE     L73:W
				  8857                                  ; line 474
00004c4c PC ea818f		  8858          BR      L74:W
				  8859  L73:
				  8860                                  ; line 475
00004c4f PC a3a40000007f84398084  8861          SUBD    127,132(FLOATS)
				  8862                                  ; line 476
00004c59 PC 83a4000003ff84398084  8863          ADDD    1023,132(FLOATS)
				  8864                                  ; line 477
00004c63 PC e7ddffffb421	  8865          ADDR    132(FLOATS),TOS
00004c69 PC ced0a514		  8866          MOVXBW  20,TOS
00004c6d PC 0281ca		  8867          BSR     D_SHF   
				  8868                                  ; line 478
00004c70 PC e7ddffffb390	  8869          ADDR    0(FLOATS),TOS
00004c76 PC ddbe		  8870          MOVQW   -3,TOS
00004c78 PC 02b7ef		  8871          BSR     P3_Q_SHF   
				  8872                                  ; line 479
00004c7b PC e7ddffffb389	  8873          ADDR    4(FLOATS),TOS
00004c81 PC d79584398084	  8874          MOVD    132(FLOATS),TOS
00004c87 PC 0281a4		  8875          BSR     D_OR    
				  8876                                  ; line 480
00004c8a PC 9c9084398080	  8877          CMPQB   1,128(FLOATS)
00004c90 PC 1a8016		  8878          BNE     L75:W
				  8879                                  ; line 480
00004c93 PC e7ddffffb371	  8880          ADDR    4(FLOATS),TOS
00004c99 PC d7a180000001	  8881          MOVD    -2147483647,R7
00004c9f PC 8f3f		  8882          ADDQD   -1,R7
00004ca1 PC d73d		  8883          MOVD    R7,TOS
00004ca3 PC 028188		  8884          BSR     D_OR    
				  8885  L75:
00004ca6 PC ea8011		  8886          BR      L76:W
				  8887  L70:
				  8888                                  ; line 484
00004ca9 PC 97840c00843900	  8889          MOVD    0(12(FP)),0(FLOATS)
				  8890                                  ; line 485
00004cb0 PC 97840c04843904	  8891          MOVD    4(12(FP)),4(FLOATS)
				  8892  L76:
				  8893                                  ; line 487
00004cb7 PC 979484390484398084	  8894          MOVD    4(FLOATS),132(FLOATS)
				  8895                                  ; line 488
00004cc0 PC 5db8		  8896          MOVQW   0,TOS
00004cc2 PC d795843904		  8897          MOVD    4(FLOATS),TOS
00004cc7 PC ced0a51f		  8898          MOVXBW  31,TOS
00004ccb PC 02818f		  8899          BSR     D_TBIT  
00004cce PC 9cb8		  8900          CMPQB   1,TOS
00004cd0 PC 1a800c		  8901          BNE     L77:W
				  8902                                  ; line 489
00004cd3 PC dc9084398080	  8903          MOVQB   1,128(FLOATS)
00004cd9 PC ea8009		  8904          BR      L78:W
				  8905
				  8906  L77:
				  8907                                  ; line 490
00004cdc PC 5c9084398080	  8908          MOVQB   0,128(FLOATS)
				  8909  L78:
				  8910                                  ; line 491
00004ce2 PC e7ddffffb3a2	  8911          ADDR    132(FLOATS),TOS
00004ce8 PC d7a57ff00000	  8912          MOVD    2146435072,TOS
00004cee PC 028131		  8913          BSR     D_AND   
				  8914                                  ; line 492
00004cf1 PC e7ddffffb393	  8915          ADDR    132(FLOATS),TOS
00004cf7 PC ced0a5ec		  8916          MOVXBW  -20,TOS
00004cfb PC 02813c		  8917          BSR     D_SHF   
				  8918                                  ; line 493
00004cfe PC e7ddffffb306	  8919          ADDR    4(FLOATS),TOS
00004d04 PC d7a5000fffff	  8920          MOVD    1048575,TOS
00004d0a PC 028115		  8921          BSR     D_AND   
				  8922                                  ; line 494
00004d0d PC d79184398084	  8923          MOVD    132(FLOATS),R7
00004d13 PC db91843904		  8924          ORD     4(FLOATS),R7
00004d18 PC db91843900		  8925          ORD     0(FLOATS),R7
00004d1d PC 1f38		  8926          CMPQD   0,R7
00004d1f PC 1a8006		  8927          BNE     L79:W
				  8928                                  ; line 494
00004d22 PC ea80b9		  8929          BR      L74:W
				  8930  L79:
				  8931                                  ; line 495
00004d25 PC a3a4000003ff84398084  8932          SUBD    1023,132(FLOATS)
				  8933                                  ; line 496
00004d2f PC e7ddffffb2d5	  8934          ADDR    4(FLOATS),TOS
00004d35 PC d7a500100000	  8935          MOVD    1048576,TOS
00004d3b PC 0280f0		  8936          BSR     D_OR    
				  8937                                  ; line 497
00004d3e PC e7ddffffb2c2	  8938          ADDR    0(FLOATS),TOS
00004d44 PC ddbb		  8939          MOVQW   7,TOS
00004d46 PC 02b721		  8940          BSR     P3_Q_SHF   
				  8941                                  ; line 498
00004d49 PC a3a40000003b84398084  8942          SUBD    59,132(FLOATS)
				  8943                                  ; line 499
00004d53 PC 5d9084398082	  8944          MOVQW   0,130(FLOATS)
				  8945                                  ; line 501
00004d59 PC 1f9284398084	  8946          CMPQD   4,132(FLOATS)
00004d5f PC 6a8036		  8947          BGT     L80:W
				  8948                                  ; line 503
00004d62 PC ea8028		  8949          BR      L82:W
				  8950  L81:
				  8951                                  ; line 505
00004d65 PC e7ddffffb29b	  8952          ADDR    0(FLOATS),TOS
00004d6b PC 028128		  8953          BSR     Q_DIV_10
				  8954                                  ; line 506
00004d6e PC cedd9184398082	  8955          MOVXWD  130(FLOATS),R7
00004d75 PC 8f38		  8956          ADDQD   1,R7
00004d77 PC 953c84398082	  8957          MOVW    R7,130(FLOATS)
				  8958                                  ; line 507
00004d7d PC 02bb02		  8959          BSR     P11_NORMALIZ
				  8960                                  ; line 508
				  8961
00004d80 PC 83948439806084398084  8962          ADDD    96(FLOATS),132(FLOATS)
				  8963  L82:
				  8964                                  ; line 509
00004d8a PC 1f9284398084	  8965          CMPQD   4,132(FLOATS)
00004d90 PC 7a55		  8966          BLE     L81
00004d92 PC ea8036		  8967          BR      L83:W
				  8968  L80:
				  8969                                  ; line 511
00004d95 PC 1f9684398084	  8970          CMPQD   -4,132(FLOATS)
00004d9b PC ca802d		  8971          BLT     L84:W
				  8972                                  ; line 513
00004d9e PC ea8022		  8973          BR      L86:W
				  8974  L85:
				  8975                                  ; line 515
00004da1 PC 02b755		  8976          BSR     P4_Q_MUL_10
				  8977                                  ; line 516
00004da4 PC cedd9184398082	  8978          MOVXWD  130(FLOATS),R7
00004dab PC 8f3f		  8979          ADDQD   -1,R7
00004dad PC 953c84398082	  8980          MOVW    R7,130(FLOATS)
				  8981                                  ; line 517
00004db3 PC 02bacc		  8982          BSR     P11_NORMALIZ
				  8983                                  ; line 518
00004db6 PC 83948439806084398084  8984          ADDD    96(FLOATS),132(FLOATS)
				  8985  L86:
				  8986                                  ; line 519
00004dc0 PC 1f9684398084	  8987          CMPQD   -4,132(FLOATS)
00004dc6 PC da5b		  8988          BGE     L85
				  8989  L84:
				  8990  L83:
				  8991                                  ; line 521
00004dc8 PC e7ddffffb238	  8992          ADDR    0(FLOATS),TOS
00004dce PC ced09584398084	  8993          MOVXBW  132(FLOATS),TOS
00004dd5 PC 02b692		  8994          BSR     P3_Q_SHF   
				  8995                                  ; line 522
00004dd8 PC 02b977		  8996          BSR     P8_ROUND   
				  8997  L74:
				  8998                                  ; line 524
00004ddb PC dfc07c		  8999          MOVQD   1,(-4)(FP)
00004dde PC ea8006		  9000          BR      L89:W
				  9001  L88:
00004de1 PC 8fc07c		  9002          ADDQD   1,(-4)(FP)
				  9003  L89:
				  9004                                  ; line 524
00004de4 PC d7c17c		  9005          MOVD    (-4)(FP),R7
00004de7 PC 14a7972084392f	  9006          MOVB    32,47(FLOATS)[R7:B]
				  9007                                  ; line 524
00004dee PC 07a6000000287c	  9008          CMPD    40,(-4)(FP)
00004df5 PC 1a6c		  9009          BNE     L88
				  9010  L87:
				  9011                                  ; line 525
00004df7 PC 02b836		  9012          BSR     P7_DEC_CONV
				  9013                                  ; line 526
00004dfa PC dfc07c		  9014          MOVQD   1,(-4)(FP)
00004dfd PC ea8006		  9015          BR      L92:W
				  9016  L91:
				  9017
00004e00 PC 8fc07c		  9018          ADDQD   1,(-4)(FP)
				  9019  L92:
				  9020                                  ; line 526
00004e03 PC d7c17c		  9021          MOVD    (-4)(FP),R7
00004e06 PC 97c17c		  9022          MOVD    (-4)(FP),R6
00004e09 PC 14e7978684392f147f	  9023          MOVB    47(FLOATS)[R7:B],-1(20(FP))[R6:B]
				  9024                                  ; line 526
00004e12 PC 07a6000000267c	  9025          CMPD    38,(-4)(FP)
00004e19 PC 1a67		  9026          BNE     L91
				  9027  L90:
				  9028                                  ; line 527
00004e1b PC 9203120c		  9029          .ENDPROC
				  9030
				  9031  ; end of float.32k
				  9032  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				  9033  ; start of pasutil.32k
				  9034
				  9035  D_AND:          .proc
			  9036  VECT_AND:       .blkd   ;  var ANUMBER :integer 
			  9037  MASK_AND:       .blkd   ;  MASK :integer
				  9038                  .var 
00004e1f PC 820000		  9039                  .begin
				  9040
00004e22 PC 2bc4080c00		  9041                  andd    MASK_AND, 0(VECT_AND)
				  9042
00004e27 PC 92001208		  9043                  .endproc
				  9044
				  9045  ;------------------------------------------------------------------------------
				  9046
				  9047  D_OR:           .proc
			  9048  VECT_OR:        .blkd   ;  var ANUMBER :integer 
			  9049  MASK_OR:        .blkd   ;  MASK :integer
				  9050                  .var 
00004e2b PC 820000		  9051                  .begin
				  9052
00004e2e PC 1bc4080c00		  9053                  ord     MASK_OR, 0(VECT_OR)
				  9054
00004e33 PC 92001208		  9055                  .endproc
				  9056  ;------------------------------------------------------------------------------
				  9057
				  9058
				  9059  D_SHF:          .proc
			  9060  VECT_SHF:       .blkd   ; var ABIT_FIELD : DOUB_WRD
			  9061                  .blkb
			  9062  CNT:            .blkb   ; SHF_VAL : BYTE
				  9063                  .var [ r0 ]
00004e37 PC 820100		  9064                  .begin
				  9065
00004e3a PC 14c008		  9066                  movb    CNT, r0
00004e3d PC 040500		  9067                  cmpb    r0, 0
00004e40 PC 7a0d		  9068                  ble     SHFR:b
00004e42 PC 4e17a4010a00	  9069          SHF_1L: lshd    1, 0(VECT_SHF)
00004e48 PC cc077a		  9070                  acbb    -1, r0, SHF_1L
00004e4b PC ea0b		  9071                  br      EXX:b
				  9072          SHFR:
00004e4d PC 4e17a4ff0a00	  9073          SHF_1R: lshd    -1, 0(VECT_SHF)
00004e53 PC cc007a		  9074                  acbb    1, r0, SHF_1R
				  9075          EXX:
00004e56 PC 92801206		  9076                  .endproc
				  9077
				  9078  ;--------------------------------------------------------------------------
				  9079
				  9080  D_TBIT:         .proc
			  9081                  .blkw
			  9082  T_BIT_FLD:      .blkd
			  9083                  .blkb
			  9084  OFFSET:         .blkb
				  9085                  .returns
			  9086  BIT_VAL:        .blkb
				  9087                  .var
00004e5a PC 820000		  9088                  .begin
				  9089
00004e5d PC 34c6080a		  9090                  tbitb   OFFSET, T_BIT_FLD
00004e61 PC 5cc00f		  9091                  movqb   FALSE, BIT_VAL
00004e64 PC 9a05		  9092                  bfc     BIT_IS_0:b
00004e66 PC dcc00f		  9093                  movqb   TRUE, BIT_VAL
				  9094  BIT_IS_0:
00004e69 PC 92001207		  9095                  .endproc
				  9096
				  9097  ;----------------------------------------------------------------------------
				  9098
				  9099  Q_ADD:          .proc
			  9100  VECT_ADD:       .blkd
			  9101  VECT_VAL:       .blkd
				  9102                  .var 
00004e6d PC 820000		  9103                  .begin
				  9104
00004e70 PC 038408000c00	  9105                  addd    0(VECT_VAL), 0(VECT_ADD)        ;add low double wrd
00004e76 PC 138408040c04	  9106                  addcd   4(VECT_VAL), 4(VECT_ADD)        ; add high double wrd
				  9107
00004e7c PC 92001208		  9108                  .endproc
				  9109
				  9110  ;----------------------------------------------------------------------------
				  9111
				  9112  Q_SUB:          .proc
			  9113  VECT_SUB:       .blkd
			  9114  VECT_SVAL:      .blkd
				  9115                  .var 
00004e80 PC 820000		  9116                  .begin
				  9117
00004e83 PC 238408000c00	  9118                  subd    0(VECT_SVAL), 0(VECT_SUB)       ;add low double wrd
00004e89 PC 338408040c04	  9119                  subcd   4(VECT_SVAL), 4(VECT_SUB)       ; add high double wrd
				  9120
00004e8f PC 92001208		  9121                  .endproc
				  9122
				  9123  ;---------------------------------------------------------------------------
				  9124  ;       R O U T I N E        Q U A D div 1 0
				  9125  ;        the general derivation of a split datum length divide by 10
				  9126  ; routine. (I.E. in this case 64bit / 10 in a basic 32 bit machine)
				  9127  ; Definition of terms:
				  9128  ;       N....................................a 64 bit number
				  9129  ;       Nh...........................the high doub word of N
				  9130  ;       Nl............................the low doub word of N
				  9131  ;       D..............the value of N, Nh, Nl after a div 10
				  9132  ;       Q...........................................is 2**32
				  9133  ;       CONST1......................................Q div 10
				  9134  ;       CONST2......................................Q mod 10
				  9135  ;
				  9136  ;       N = Nh*Q + Nl
				  9137  ;       N/10 = (Nh*Q)/10 + Nl/10
				  9138  ;       D = Dh + (Nh mod 10)Q/10 + Dl   by definiton of remainder
				  9139  ;       D = Dh + (Nh mod 10)(CONST1 + CONST2/10) + Dl + (Nl mod 10)/10
				  9140  ;       D =   Dh  
				  9141  ;           + (Nh mod 10)CONST1  
				  9142  ;           + ((Nh mod 10)CONST2)/10  
				  9143  ;           + (Nl mod 10)/10            
				  9144  ;           + Dl
				  9145  ;       D =   Dh 
				  9146  ;           + (Nh mod 10)CONST1
				  9147  ;           + [(Nh mod 10)CONST2 
				  9148  ;           + (Nl mod 10)]/10
				  9149  ;           + Dl                
				  9150  ;           
				  9151
				  9152  Q_DIV_10:       .proc
			  9153  VECT_DIV:       .blkd
				  9154                  .var [r0,r1,r2,r3,r6,r7]
00004e93 PC 82cf00		  9155                  .begin
				  9156
00004e96 PC ced8a10a		  9157                  movzbd  10, r7
				  9158
00004e9a PC 5f08		  9159                  movqd   0, r1           ;DOUB_WRD hi := 0 
00004e9c PC 17800804		  9160                  movd    4(VECT_DIV), r0 ;DOUB_WRD lo := Nh
00004ea0 PC ce2f38		  9161                  deid    r7, r0          ;r0 := Nh mod 10
				  9162                                          ;r1 := Nh / 10
				  9163
00004ea3 PC 5f18		  9164                  movqd   0, r3           ;DOUB_WRD hi := 0
00004ea5 PC 97800800		  9165                  movd    0(VECT_DIV), r2 ;DOUB_WRD lo := Nl
00004ea9 PC ceaf38		  9166                  deid    r7, r2          ;r2 := Nl mod 10
				  9167                                          ;r3 := Nl / 10
				  9168
00004eac PC 9701		  9169                  movd    r0, r6
				  9170
00004eae PC cea3a100000006	  9171                  muld    CONST2, r6      ;[ (Nh mod 10)*CONST2
00004eb5 PC 8311		  9172                  addd    r2, r6          ;+ (Nl mod 10)]
00004eb7 PC cebf39		  9173                  divd    r7, r6          ; / 10
00004eba PC 8319		  9174                  addd    r3, r6          ;+ (Nl / 10)
				  9175
00004ebc PC 9700		  9176                  movd    r0, r2          ;r2 := (Nh mod 10) DOUB_WRD lo
00004ebe PC 5f18		  9177                  movqd   0, r3           ;r3 := 0 DOUB_WRD hi
00004ec0 PC cea7a019999999	  9178                  meid    CONST1, r2      ;r2 := (Nh mod 10)*CONST2
00004ec7 PC 8330		  9179                  addd    r6, r2          ; +  final summation
				  9180
00004ec9 PC 17140800		  9181                  movd    r2, 0(VECT_DIV) ; .DOUB_WRD_LO
00004ecd PC 170c0804		  9182                  movd    r1, 4(VECT_DIV) ; .DOUB_WRD_HI
				  9183
00004ed1 PC 92f31204		  9184                  .endproc
				  9185
				  9186  ; end of pasutil.32k
				  9187  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				  9188  ; start of tio.32k
				  9189
				  9190
				  9191  ;+++++++++++++
				  9193  ;+++++++++++++
				  9194
				  9195
				  9196  ;                       CASSETTE TAPE IO DESCRIPTION
				  9197  ;
				  9198  ;       This tape io driver is designed for the db16000.
				  9199  ;       Its implementation is made possible thru the parallel port.
				  9200  ;       Simple interface circuitry is required at the parallel port.
				  9201  ;
				  9202  ;       DB16000 Hardware implementation @ PPI_BASE
				  9203  ;
				  9204  ;       ---------------------------------    Special simple cassette interface 
				  9205  ;                      +5v------>       |       connected to J1
				  9206  ;       PPI_A(BASE)             < 4.7k  |
				  9207  ;                    8________  |       |
				  9208  ;    data bit in -----| 8303 |----------->------                   to recorder
				  9209  ;      (bit 0)        | U4   |     J1-47|    c \| 2N2222    1k  ||    aux out  
				  9210  ;                     /      /          /       |-----|---/\/\--||-------->
				  9211  ;                                       |    e V| b   <1k       ||.1uf   -- 
				  9212  ;                                       |      |      >                   |
				  9213  ;           DB16000                     |     ---    ---                 ---
				  9214  ;                                       |      - gnd  -                   - gnd
				  9215  ;                                       |
				  9216  ;      PPI_B(BASE)                      |     
				  9217  ;                     ________11        |      
				  9218  ;    data bit out-----| 7437 |----------->-- 
				  9219  ;      (bit 0)        | XU7  |     J1-15|  < 2.2k
				  9220  ;                     /      /          /  >
				  9221  ;                                          |---------->  to recorder input
				  9222  ;                                          <         --
				  9223  ;   note on db16000 J1 2-50                > 22*      |
				  9224  ;      are gnd                             |          | 
				  9225  ;                                         ---        ---
				  9226  ;                                          - gnd      -
				  9227  ;  * This value may be dependent on
				  9228  ;    the particular recorder used.
				  9229  ;
				  9230  ;
				  9231
				  9232
				  9233  ;       TIMING DATA:
				  9234  ;
				  9235  ;       The timings generated by the program produce a serial data flow rate
				  9236  ;       of approximately 330 baud. The effective recording frequency is approx
				  9237  ;       660 hz. The recorded pulses are not square waves for two reasons.
				  9238  ;       1. Recording a square pulse of greater than 1ms period is meaningless.
				  9239  ;       2. Therefore the input circuitry RC constant is set to approx 10k input
				  9240  ;       transition. Also the pulse lo time is good time for functions to be
				  9241  ;       executed by the processor.
				  9242  ;       The constant CYCLE is of key importance and must be adjusted to 
				  9243  ;       produce the specified timings in fig 3. 
				  9244  ;
				  9245  ;       OUTPUT PULSE TIMING:
				  9246  ;                                at UX7 pin 11 (J1-15)
				  9247  ;       
				  9248  ;       <------ CLOCK PERIOD ------><------ DATA  PERIOD ------>
				  9249  ;       ++++++++++                  ++++++++++                  ++++++//
				  9250  ;       +        +                  +        +                  +
				  9251  ;       +        +                  +  HI=1  +                  +  
				  9252  ;       +        +                  +  LO=0  +                  +
				  9253  ;       +        +                  +        +                  +
				  9254  ;    //++        ++++++++++++++++++++        ++++++++++++++++++++
				  9255  ;       <   Tw   >                  <   Tw   >                  |
				  9256  ;       <             Tp            >                           |
				  9257  ;       |                           <            Tp             >
				  9258  ;       <------------ 1 / (2 * Tp) = BAUD RATE ----------------->
				  9259  ;
				  9260  ;               Tw = .500 ms +/- 5%
				  9261  ;               Tp = 1.50 ms +/- 5%
				  9262  ;
				  9263  ;                       FIG. 3
				  9264  ;
				  9265  ; The above timings are satisfied by setting CYCLE to 100 for a 5 mhz CPU.
				  9266  ;
				  9267  ;
				  9268
				  9269
				  9270  ;
				  9271  ;       TAPE FORMAT:
				  9272  ;                              Start of recording
				  9273  ;    ------------------------------------------------------------------------>
				  9274  ;    |    start of tape       |      16000 master clock sync bits           
				  9275  ;    |                        |
				  9276  ;    |                        |
				  9277  ;    ------------------------------------------------------------------------>
				  9278  ;
				  9279  ;    Byte sync data   Recorded data
				  9280  ;    >--------//----------------------------------//-------------------------->
				  9281  ;    |  64 bytes of  | record start byte |                |            |next 
				  9282  ;    |  H'A5         | DATA = H'B7       | 128 data bytes | CRC byte   |record 
				  9283  ;    |               | EOD = H'FF        |                |            |or EOD
				  9284  ;    >--------//----------------------------------//-------------------------->
				  9285  ;
				  9286  ;       BYTE FORMAT:
				  9287  ;                        III = CLOCK HI , HHH = DATAHI, ______ = LO
				  9288  ;
				  9289  ;      | one clk |
				  9290  ;      v         bit 7               bit 6                bit 5  > to bit 0    
				  9291  ;      III_______HHH_______III_________________III________HHH_______III_______
				  9292  ;      ^ ^       ^ ^
				  9293  ;      | |       | D         The basic bit write is acomplished in the TPUT  
				  9294  ;      | |       C           routine where where the byte bits are sensed
				  9295  ;      | B                   and control whether a hi or lo is recorded. All 
				  9296  ;      A       FIG. 4        bits are preceded by a clock bit. The hi or lo 
				  9297  ;                            pulse time is generated by the PULSEhi/lo routines
				  9298  ;                            which access the parrallel port and loop CYCLE
				  9299  ;                            number of times to generate timings of figure 3.
				  9300  ;                            Readback starts in the master clock sync routine
				  9301  ;                            CSYNC. Here time period AC (fig. 4) is averaged
				  9302  ;                            over 10000 bits. Next the bit flow is synced to
				  9303  ;                            a byte by the BYTSYNC routine. Bytes are grabbed
				  9304  ;                            by the TGET routine which syncs to a clock pules
				  9305  ;                            by the CLKP routine. Upon exit from CLKP the TGET
				  9306  ;                            routine is at point B. It then samples for a hi
				  9307  ;                            from point B to D using the time base generated
				  9308  ;                            by CSYNC.
				  9309
				  9310
				  9311
				  9312  ;------------------------------------------------------------------------
				  9313  ;                       T A P E    W R I T E  
				  9314  ;------------------------------------------------------------------------
				  9315  ;       TAPE IO ROUTINE REGISTER DUTY LIST
				  9316  ;       R0 = PPI_BASE,  R1 = DATA BYTE, R2 = BIT OFFSET FOR DATA BYTE
				  9317  ;       R3 = CHECKSUM,  R4 = LOOP CONTROL, R5 = TIMING CONTROL
				  9318  ;       R6 = MAX WAIT AND GP, R7 = GP
				  9319
				  9320          TPUT:   ;BYTE WRITE ROUTINE
				  9321
00004ed5 PC dc13		  9322                          MOVQB   7, R2           ;START WITH BIT 7
00004ed7 PC 028447		  9323                  NEXBIT: BSR     PULSELO         ;CREATE A CLOCK PULSE
00004eda PC 028439		  9324                          BSR     PULSEHI         ;INVERTED LOGIC BECAUSE
00004edd PC 028436		  9325                          BSR     PULSEHI         ;INVERTING PORT
00004ee0 PC 7410		  9326                          TBITB   R2, R1          ;OFFSET = R2, BASE = R1
00004ee2 PC 8a07		  9327                          BFS     AHI:B           ;WANT TO CRATE POSITIVE PULSE 
00004ee4 PC 02842f		  9328                          BSR     PULSEHI         ;IMAGE ON TAPE.
00004ee7 PC ea05		  9329                          BR      ENDCYC:B        ;1/2 HI TO LO RATIO
00004ee9 PC 028435		  9330                  AHI:    BSR     PULSELO         ;IF BIT IS ZERO THEN PULSEHI
00004eec PC 028427		  9331                  ENDCYC: BSR     PULSEHI
00004eef PC 028424		  9332                          BSR     PULSEHI
00004ef2 PC 8c17		  9333                          ADDQB   -1, R2          ;DO 8 BITS AND FINISH
00004ef4 PC 1c10		  9334                          CMPQB   0, R2
00004ef6 PC 7a61		  9335                          BLE     NEXBIT                          
00004ef8 PC 1200		  9336                          RET     0
				  9337
				  9338
				  9339          THEAD:  ;ROUTINE TO PRODUCE TAPE HEADER
				  9340
00004efa PC 17a1000007d0	  9341                          MOVD    LEADN * 2, R4   ;1000 X 2 X 8 = 16000 SYNC BITS
00004f00 PC dc0f		  9342          CLCKIT:         MOVQB   -1, R1          ;MASTER SYNC BITS
00004f02 PC dc3b		  9343                          MOVQB   7, R7
00004f04 PC cc3f00		  9344                          ACBB    -1, R7, $
00004f07 PC 024e		  9345                          BSR     TPUT
00004f09 PC cf2777		  9346                          ACBD    -1, R4, CLCKIT
00004f0c PC 17a100000040	  9347                          MOVD    RLEN / 2, R4    ;64 BYTE SYNC MARKS
00004f12 PC 54a0a5		  9348          MARKIT:         MOVB    TMARK, R1
00004f15 PC dc3b		  9349                          MOVQB   7, R7
00004f17 PC cc3f00		  9350                          ACBB    -1, R7, $
00004f1a PC 02bfbb		  9351                          BSR     TPUT
00004f1d PC cf2775		  9352                          ACBD    -1, R4, MARKIT
00004f20 PC 1200		  9353                          RET     0
				  9354
				  9355  ;* * * * * * * * * * M A I N    R O U T I N E * * * * * * * * * * * * * * * 
				  9356
				  9357          TWRITE:                 .PROC
				  9358
				  9359                                  ;EXPORTED TAPE WRITE ROUTINE
			  9360                  STRTD:  .BLKD   ;START OF WRITE DATA -ADDR-
			  9361                  ENDD:   .BLKD   ;ADDR OF LAST WRITE BYTE
			  9362                  BAUD:   .BLKD
				  9363                          .VAR    [R0, R1, R2, R3, R4, R5, R6, R7]
			  9364                  EOD:    .BLKB
			  9365                  TCYCLE: .BLKD
00004f22 PC 82ff05		  9366                          .BEGIN
00004f25 PC 17c6087b		  9367                          MOVD    BAUD,TCYCLE     ;SET BAUD SPEED
00004f29 PC 0283de		  9368                          BSR     INI8255         ;INITIALIZE PARALLEL PORT
00004f2c PC 024e		  9369                          BSR     THEAD           ;WRITE OUT SYNC PULSES AND HEADER
00004f2e PC 5cc07f		  9370                          MOVQB   FALSE, EOD      ;FLAG NOT END OF DATA
00004f31 PC 9cc07f		  9371                  NEXREC: CMPQB   TRUE, EOD       ;LOOP WRITING OUT RECORDS
00004f34 PC 0a803f		  9372                          BEQ     ENDMARK:W       ;OF RLEN UNTIL EOD FLAGGED
00004f37 PC 54a0b7		  9373                          MOVB    RECMARK, R1     ;WRITE RECORD START
00004f3a PC dc3b		  9374                          MOVQB   7, R7
00004f3c PC cc3f00		  9375                          ACBB    -1, R7, $
00004f3f PC 02bf96		  9376                          BSR     TPUT
00004f42 PC 5f18		  9377                          MOVQD   0, R3           ;R3 = CHECKSUM REGISTER
00004f44 PC 15a10080		  9378                          MOVW    RLEN, R4        ;R4 RLOOP COUNTER
00004f48 PC 5c08		  9379                  RLOOP:  MOVQB   NUL, R1         ;IF EOD TRUE THEN WRITE NULL
00004f4a PC 9cc07f		  9380                          CMPQB   TRUE, EOD       ;ELSE GET BYTE
00004f4d PC 0a14		  9381                          BEQ     NULLS:B         ;CHECK FOR END
00004f4f PC 54801000		  9382                          MOVB    0(STRTD), R1    ;IF AT LAST ADDR THEN SET EOD
00004f53 PC 07c6100c		  9383                          CMPD    STRTD, ENDD     ;WRITE NULLS AFTER EOD TILL
00004f57 PC ca05		  9384                          BLT     NEXBYT:B        ;RECORD END
00004f59 PC dcc07f		  9385                          MOVQB   TRUE, EOD
00004f5c PC 8fc010		  9386                  NEXBYT: ADDQD   1, STRTD        ;INDEX TO NEXT BYTE
00004f5f PC c008		  9387                          ADDB    R1, R3          ;UPDATE CHECKSUM
				  9388                  NULLS:  
00004f61 PC 02bf74		  9389                          BSR     TPUT            ;WRITE BYTE TO TAPE
00004f64 PC cd2764		  9390                          ACBW    -1, R4, RLOOP   ;IF RECORD LOOP DONE
00004f67 PC 5418		  9391                          MOVB    R3, R1          ;THEN WRITE CHECKSUM BYTE
00004f69 PC dc3b		  9392                          MOVQB   7, R7
00004f6b PC cc3f00		  9393                          ACBB    -1, R7, $
00004f6e PC 02bf67		  9394                          BSR     TPUT
00004f71 PC ea40		  9395                          BR      NEXREC
				  9396                  ENDMARK:
00004f73 PC dc0f		  9397                          MOVQB   -1, R1          ;WRITE EOD MARK
00004f75 PC 02bf60		  9398                          BSR     TPUT
00004f78 PC 92ff120c		  9399                          .ENDPROC
				  9400
				  9401  ;------------------------------------------------------------------------
				  9402  ;                       T A P E    R E A D
				  9403  ;------------------------------------------------------------------------
				  9404
				  9405                  CSYNC:  ;CLOCK SYNC ROUTINE     
00004f7c PC d710		  9406                          MOVD    R2, R3          ;SAVE AVERAGE LOOP
00004f7e PC 97a1007a1200	  9407                          MOVD    MAXWAIT, R6     ;ESTABLISH MAX WAIT TIME
00004f84 PC 5f38		  9408                          MOVQD   0, R7
00004f86 PC 34a20000		  9409                  LLOOP:  TBITB   0, PPI_A(R0)    ;LOOP FOR A PLUS TRANSITION
00004f8a PC 8a07		  9410                          BFS     PEDGE:B         ;ONCE FOUND START COUNTER
00004f8c PC cf377a		  9411                          ACBD    -1, R6, LLOOP
00004f8f PC 1200		  9412                          RET     0               ;WAITED TO LONG EXIT
00004f91 PC 5f28		  9413                  PEDGE:  MOVQD   0, R5           ;COUNTER IS R5, SET TO 0
00004f93 PC 34a20000		  9414                  PLOOP1: TBITB   0, PPI_A(R0)    ;LOOP NOW WAITING FOR
00004f97 PC 9a09		  9415                          BFC     PLOOP2:B        ;NEGATIVE TRANSITON
00004f99 PC 8f28		  9416                          ADDQD   1, R5           ;COUNT PULSE WIDTH IN R5
00004f9b PC cf3778		  9417                          ACBD    -1, R6, PLOOP1
00004f9e PC 1200		  9418                          RET     0
00004fa0 PC 34a20000		  9419                  PLOOP2: TBITB   0, PPI_A(R0)    ;LOOP NOW WAITING FOR
00004fa4 PC 8a09		  9420                          BFS     SUNK:B          ;NEGATIVE TRANSITON
00004fa6 PC 8f28		  9421                          ADDQD   1, R5           ;COUNT PULSE WIDTH IN R5
00004fa8 PC cf3778		  9422                          ACBD    -1, R6, PLOOP2
00004fab PC 1200		  9423                          RET     0
00004fad PC c329		  9424                  SUNK:   ADDD    R5, R7          ;MAKE AVERAGE
00004faf PC 34a20000		  9425                  FORLO:  TBITB   0, PPI_A(R0)
00004fb3 PC 8a7c		  9426                          BFS     FORLO
00004fb5 PC cf1751		  9427                          ACBD    -1, R2, LLOOP
00004fb8 PC ceff19		  9428                          DIVD    R3, R7          ;CALCULATE AVERAGE
00004fbb PC 5739		  9429                          MOVD    R7, R5          ;AND STORE IN R5
00004fbd PC 1200		  9430                          RET     0
				  9431
				  9432                  CLKP:   ;EDGE SYNC ROUTINE      
00004fbf PC 97a1000007d0	  9433                          MOVD    MAXCYCLE, R6    ;ESTABLISH MAX WAIT TIME
00004fc5 PC 34a20000		  9434                  ELOOP:  TBITB   0, PPI_A(R0)    ;LOOP FOR A PLUS TRANSITION
00004fc9 PC 8a07		  9435                          BFS     EDGE1:B         ;ONCE FOUND START COUNTER
00004fcb PC cf377a		  9436                          ACBD    -1, R6, ELOOP
00004fce PC 1200		  9437                          RET     0               ;WAITED TO LONG EXIT
00004fd0 PC 34a20000		  9438                  EDGE1:  TBITB   0, PPI_A(R0)
00004fd4 PC 9a05		  9439                          BFC     EDGE2:B
00004fd6 PC cf377a		  9440                          ACBD    -1, R6, EDGE1
00004fd9 PC 1200		  9441                  EDGE2:  RET     0
				  9442
				  9443
				  9444                  TGET:   ;TAPE GET BYTE ROUTINE
00004fdb PC 5c08		  9445                          MOVQB   0, R1           ;DATA START
00004fdd PC 94a008		  9446                          MOVB    8, R2           ;BIT COUNT
00004fe0 PC 025f		  9447                  GBIT:   BSR     CLKP            ;SYNC TO CLOCK
00004fe2 PC 1f30		  9448                          CMPQD   FALSE, R6       ;CHECK FOR TIME OUT
00004fe4 PC 0a802c		  9449                          BEQ     GOUT:W          ;AND EXIT
00004fe7 PC 5c38		  9450                          MOVQB   0, R7
00004fe9 PC 9729		  9451                          MOVD    R5, R6          ;SET DATA SAMPLE TIME
00004feb PC 4e54a001		  9452                          LSHB    1, R1
00004fef PC 34a20000		  9453                  SAMPLE: TBITB   0, PPI_A(R0)    ;SAMPLE DATA BIT
00004ff3 PC 9a08		  9454                          BFC     ZBIT:B          ;SET IF BIT IS 1
00004ff5 PC 8c38		  9455                          ADDQB   1, R7           ;ADD TO NOISE COUNT
00004ff7 PC 4e58a000		  9456                          SBITB   0, R1
00004ffb PC cf3774		  9457                  ZBIT:   ACBD    -1, R6, SAMPLE  ;WAIT FOR SAFE START OF NEXT
00004ffe PC c4a106		  9458                          CMPB    FILTER, R7      ;CHECK FOR NOISE ACTIVATED
00005001 PC 7a06		  9459                          BLE     WAITLO:B
00005003 PC 4e48a000		  9460                          CBITB   0, R1           ;CHECK FOR NOISE PULSE
00005007 PC 34a20000		  9461                  WAITLO: TBITB   0, PPI_A(R0)
0000500b PC 8a7c		  9462                          BFS     WAITLO
0000500d PC cc1753		  9463                          ACBB    -1, R2, GBIT    ;CLOCK PULSE
00005010 PC 1200		  9464                  GOUT:   RET     0               ;DO 8 BITS AND RETURN 
				  9465
				  9466                  BYTSYNC:;ALIGN CLOCK/DATA TO BYTE BOUNDRY
00005012 PC 15a10080		  9467                          MOVW    RLEN, R4        ;DO FOR MAX OF RLEN
00005016 PC 44a0a5		  9468                  BSINK:  CMPB    TMARK, R1       ;IF NOT SYNC CHAR
00005019 PC 0a20		  9469                          BEQ     BSUNK:B         ;THEN SKIP A CLOCK PULSE
0000501b PC 02bfa4		  9470                          BSR     CLKP                    
0000501e PC 9729		  9471                          MOVD    R5, R6          ;CODE TO SKIP A CLOCK PULSE
00005020 PC 34a20000		  9472                  DLOOP:  TBITB   0, PPI_A(R0)
00005024 PC 9a06		  9473                          BFC     ZDUM:B
00005026 PC 4e58a000		  9474                          SBITB   0, R1
0000502a PC cf3776		  9475                  ZDUM:   ACBD    -1, R6, DLOOP
0000502d PC 34a20000		  9476                  ALO:    TBITB   0, PPI_A(R0)
00005031 PC 8a7c		  9477                          BFS     ALO
00005033 PC 02bfa8		  9478                          BSR     TGET
00005036 PC cd2760		  9479                          ACBW    -1, R4, BSINK   ;TRY AGAIN
00005039 PC 1200		  9480                  BSUNK:  RET     0       
				  9481
				  9482                  RHEAD:  ;READ TAPE HEADER
0000503b PC 97a000001388	  9483                          MOVD    LEADN * 5, R2   ;ROUGH SYNC -GET PASS SETTLING
00005041 PC 02bf3b		  9484                          BSR     CSYNC           ;AND START UP NOISE
00005044 PC 1f30		  9485                          CMPQD   0, R6           ;CHECK FOR TIME OUT
00005046 PC 1a04		  9486                          BNE     HLOOP1:B
00005048 PC 1200		  9487                          RET     0
0000504a PC 97a000002710	  9488                  HLOOP1: MOVD    LEADN * 10, R2  ;FINE SYNC
00005050 PC 02bf2c		  9489                          BSR     CSYNC
00005053 PC 1f30		  9490                          CMPQD   0, R6           ;CHECK FOR TIME OUT
00005055 PC 1a04		  9491                          BNE     HLOOP2:B
00005057 PC 1200		  9492                          RET     0
00005059 PC 02bf82		  9493                  HLOOP2: BSR     TGET
0000505c PC 9c0f		  9494                          CMPQB   -1, R1          ;FINISH OF SYNC BITS
0000505e PC 0a7b		  9495                          BEQ     HLOOP2
00005060 PC 02bfb2		  9496                  RECMRK: BSR     BYTSYNC         ;SYNC TO BYTE BOUNDRY
00005063 PC df30		  9497                          MOVQD   1, R6           ;FLAG NO TIME OUT
00005065 PC 1200		  9498                          RET     0
				  9499
				  9500  ; * * * * * * * * * * * * * M A I N    R O U T I N E * * * * * * * * * * *
				  9501
				  9502          TREAD:          .PROC
				  9503                          ;EXPORTED TAPE READ ROUTINE
			  9504                  STRTR:  .BLKD   ;STORE DATA STARTING HERE
			  9505                  RERR:   .BLKD   ;ERROR CODE ADDR
				  9506                          .RETURNS
			  9507                  LXADDR: .BLKD   ;LAST ADDRESS OF STORED DATA
				  9508                          .VAR    [R0, R1, R2, R3, R4, R5, R6, R7]
00005067 PC 82ff00		  9509                          .BEGIN
0000506a PC 5f800800		  9510                          MOVQD   FALSE, 0(RERR)
0000506e PC 028299		  9511                          BSR     INI8255         ;INITIALIZE PARALLEL PORT
00005071 PC 024a		  9512                          BSR     RHEAD
00005073 PC 1f30		  9513                          CMPQD   0, R6           ;CHECK FOR NO HEAD SYNC
00005075 PC 1a09		  9514                          BNE     MLOOP:B
00005077 PC df800800		  9515                          MOVQD   ASYNC, 0(RERR)  ;SET NO HEAD ERROR
0000507b PC ea8044		  9516                          BR      TROUT:W
0000507e PC 02bf5d		  9517                  MLOOP:  BSR     TGET            ;SKIP BYTE SYNC MARKS
00005081 PC 44a0a5		  9518                          CMPB    TMARK, R1
00005084 PC 0a7a		  9519                          BEQ     MLOOP   
00005086 PC 9c0f		  9520                  GREC:   CMPQB   -1, R1          ;RECORD LOOP
00005088 PC 0a37		  9521                          BEQ     TROUT:B         ;IF LAST RECORD THEN DONE
0000508a PC 44a0b7		  9522                          CMPB    RECMARK, R1     ;ELSE IF RECORD MARK DO READ
0000508d PC 0a08		  9523                          BEQ     DOREC:B         ;ELSE
0000508f PC 5f810800		  9524                          MOVQD   FREC, 0(RERR)   ;SET NO RECORD ERROR
00005093 PC ea2c		  9525                          BR      TROUT:B
00005095 PC 5f18		  9526                  DOREC:  MOVQD   0, R3           ;INIT CHECKSUM TO 0
00005097 PC 15a10080		  9527                          MOVW    RLEN, R4        ;BYTE COUNT
				  9528                  RECLOOP:
0000509b PC 02bf40		  9529                          BSR     TGET            ;GET A BYTE
0000509e PC 140c0c00		  9530                          MOVB    R1, 0(STRTR)    ;STOREIT
000050a2 PC 8fc00c		  9531                          ADDQD   1, STRTR        ;NEXT STORE ADDR
000050a5 PC c008		  9532                          ADDB    R1, R3          ;CALCULATE CHECKSUM
000050a7 PC cd2774		  9533                          ACBW    -1, R4, RECLOOP ;GET NEXT BYTE
000050aa PC 02bf31		  9534                          BSR     TGET            ;GET CHECKSUM
000050ad PC c408		  9535                          CMPB    R1, R3          ;CHECK IT
000050af PC 1a07		  9536                          BNE     CRCER:B         ;SET ERROR IF BAD
000050b1 PC 02bf2a		  9537                          BSR     TGET            ;GET RECORD MARK
000050b4 PC ea52		  9538                          BR      GREC
000050b6 PC 5f820800		  9539                  CRCER:  MOVQD   RCRC, 0(RERR)
000050ba PC 02bf21		  9540                          BSR     TGET            ;SET CRC ERROR
000050bd PC ea49		  9541                          BR      GREC
000050bf PC 8fc70c		  9542                  TROUT:  ADDQD   -1, STRTR       ;SET TRUE LAST ADDR
000050c2 PC 17c60c0c		  9543                          MOVD    STRTR, LXADDR   ;RETURN IT
000050c6 PC 92ff1204		  9544                          .ENDPROC                        
				  9546  ;+++++++++++++
				  9547
				  9548  ;@@@@@@@@@@@@@@
				  9643
				  9644  ; end of tio.32k
				  9645  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				  9646
				  9647  ; all hardware specific code has been moved here for easy modification...
				  9648
				  9649  ;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				  9650
				  9651  ;+++++++++++++
				  9653  ;+++++++++++++
				  9654
				  9655  ;============================================================================
				  9656  IOBEG:   .EQU   H'C00000        ;  IO BEGIN ADDRESS
				  9657  SWITCHP: .EQU   IOBEG+H'30      ; DIP SWICHES PORT ADDRESS
				  9658  ;============================================================================
				  9659
				  9660  ;============================================================================
				  9661  ;;;;;;;;;;;;;;;;;;;;;;;;
				  9662  ; 8251 USART CONSTANTS ;
				  9663  ;;;;;;;;;;;;;;;;;;;;;;;;
				  9664
				  9665  ; 0xc00000 to 0xc0000F          ; USART#1
				  9666  ; 0xc00040 to 0xc0004F          ; USART#1
				  9667
				  9668  USRTCS: .EQU    2               ; USRT CONTROL & STATUS PORT
				  9669  USRTCS2: .EQU   USRTCS+H'40     ; USART # 2
				  9670  DATAP:  .EQU    0               ; USRT DATA INPUT OUTPUT PORT
				  9671  OUT_RDY: .EQU   0               ; TX-RDY BIT OF STATUS WORD
				  9672  IN_RDY: .EQU    1               ; RX-RDY BIT OF STATUS
				  9673
000050ca PC 000000404e37	  9674  RUSRT:  .BYTE   0,0,0,H'40,H'4E,H'37    ; INIT USRT SEQUENCE
				  9675
				  9676  INITUART:
000050d0 PC 57a000c00002	  9677          MOVD    USRTCS+IOBEG,R1         ; {INIT USARTS}
000050d6 PC 5f15		  9678          MOVQD   -6,R2                   ; FOR I=1,6 DO
				  9679  UARTRST2:   
000050d8 PC 54e2dafffffff800	  9680          MOVB    RUSRT+6:D[R2:B],0(R1)   ; migry add :D ;  USRT1_CONTROL:=RUSRT[I];
000050e0 PC 54e2dafffffff08040	  9681          MOVB    RUSRT+6:D[R2:B],(USRTCS2-USRTCS):W(R1) ; migry add :D ;
				  9682                                          ;  USRT2-CONTROL:=RUSRT[I];
000050e9 PC d5a003e8		  9683          MOVW    1000,R3                 ; WAIT FOR USART TO SETTLE
000050ed PC cd1f00		  9684          ACBW    -1,R3,$                 ;BEFORE NEXT COMMAND
000050f0 PC cc1068		  9685          ACBB    1,R2,UARTRST2           ; END;
000050f3 PC 1200		  9686          RET     0
				  9687
				  9688  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				  9689  ;  R D C H R      ( DUMMY READ CHAR PROCEDURE )  ;
				  9690  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				  9691  ;
				  9692  RDCHR:  .PROC                   ; PROCEDURE RDCHR (WAIT,TRM)
			  9693  RD_CHR: .BLKB   ;BYTE           ; PROCEDURE VALUE
			  9694  RD_WAIT: .BLKB  ;BYTE           ; WAIT/NOWAIT FLAG
			  9695  RD_TRM: .BLKB   ;BYTE           ; TERMINAL NUMBER
				  9696          .RETURNS
			  9697          .BLKW   ;WORD           ; RETURN CHR,CHR_RDY FLAG
				  9698          .VAR    [R1,R2]
000050f5 PC 820600		  9699          .BEGIN
000050f8 PC 57a000c00002	  9700          MOVD    USRTCS+IOBEG,R1 ; R1: ADDRESS OF TRMINAL A
000050fe PC 1cc008		  9701          CMPQB   TRMA,RD_TRM     ; IF TRMINAL_NUM<> 0 THEN
00005101 PC 0a08		  9702          BEQ     RDCHRLP:B
00005103 PC 57a000c00042	  9703          MOVD    USRTCS2+IOBEG,R1 ; R1: ADDRESS OF TRMINAL B
				  9704  RDCHRLP:                        ; DO WHILE IN_RDY=0 AND RD_WAIT=TRUE
00005109 PC 74a20100		  9705          TBITB   IN_RDY,0(R1)    ;   INPUT IN_RDY
0000510d PC 8a09		  9706          BFS     RDCHR3:B        
				  9707  ;       BR      RDCHR3:B        ; *** FOR DEBUG ONLY ***
0000510f PC 9cc009		  9708          CMPQB   TRUE,RD_WAIT
00005112 PC 0a77		  9709          BEQ     RDCHRLP         ; END;
00005114 PC ea09		  9710          BR      RDCHREX:B
00005116 PC 144e7e0a		  9711  RDCHR3: MOVB    (DATAP-USRTCS)(R1),RD_CHR ; RDCHR:=USART DATA
0000511a PC dcc009		  9712          MOVQB   TRUE,RD_WAIT    ; RD_WAIT:=TRUE
				  9713  ;
				  9714  RDCHREX:
0000511d PC 92601201		  9715          .ENDPROC
				  9716
				  9717  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				  9718  ;  P R C H R    ( PRINT CHARACTER )  ;
				  9719  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				  9720  ;
				  9721  ;       FUNCTION - SEND ONE CHARACTER TO TERMINAL
				  9722  ;
				  9723  ;       CALLING SEQUENCE PRCHR(ENDF,WAIT,CHR,TRM)
				  9724  ;
				  9725  ;        ENDF/WAIT      
				  9726  ;               BOOLEANO  IN/OUT ON INPUT FLAGE WAIT TO END OF OPERATION
				  9727  ;                                OR REURN
				  9728  ;                                ON OUTPUT INDICATES END OF OPERATION
				  9729  ;        CHR  - CHARACTER INPUT  CHARACTER TO BE PRINTED
				  9730  ;        TRM  - INTEGER   INPUT  TERMINAL NUMBER
				  9731  ;
00005121 PC			  9732          .ALIGN 2
				  9733  PRCHR:   .PROC
			  9734  WAIT_PR: .BLKB  ;BYTE                   ; WAIT : BOOLEAN
			  9735  CHR_PR:  .BLKB  ;BYTE                   ; ASCII CHR
			  9736  TRM_CHR: .BLKB  ;BYTE                   ; TERMINAL NUMBER
			  9737  DUMMY2:  .BLKB  ;BYTE for alignment
				  9738          .RETURNS
			  9739          .BLKB   ;BYTE                   ; OUTPUT WAIT WAIT:BOOLEAN
				  9740          .VAR    [R1,R2]
			  9741  HOLD_:  .BLKB
			  9742  A_WAIT: .BLKB
00005122 PC 820602		  9743          .BEGIN
00005125 PC 57a000c00002	  9744          MOVD    USRTCS+IOBEG,R1 ; R1: ADDRESS OF TRMINAL A
0000512b PC 1cc009		  9745          CMPQB   TRMA,TRM_CHR    ; IF TRMINAL_NUM<> 0 THEN
0000512e PC 0a08		  9746          BEQ     PRCHRLP:B
00005130 PC 57a000c00042	  9747          MOVD    USRTCS2+IOBEG,R1 ; R1: ADDRESS OF TRMINAL B
00005136 PC 74a20000		  9748  PRCHRLP: TBITB  OUT_RDY,0(R1)   ; IF TX-RDY = 0 
0000513a PC 8a09		  9749          BFS     PRCHR3:B        ; THEN
0000513c PC 1cc00b		  9750          CMPQB   FALSE,WAIT_PR   ;   IF WAIT THEN REPET
0000513f PC 1a77		  9751          BNE     PRCHRLP
00005141 PC ea09		  9752          BR      PRCHREX:B               ;   ELSE WAIT:=FALSE
00005143 PC 54c20a7e		  9753  PRCHR3: MOVB    CHR_PR,(DATAP-USRTCS)(R1)
00005147 PC dcc00b		  9754          MOVQB   TRUE,WAIT_PR    ; ELSE WRITE(DATA-PORT,CHR)
				  9755  PRCHREX:
0000514a PC 1cc009		  9756          CMPQB   TRMA,TRM_CHR
0000514d PC 1a8035		  9757          BNE     P_OUT:W     
				  9758          ;++++++++++++++++
00005150 PC 5db8		  9759          MOVQW   FALSE, TOS      ;READ WITH NO WAIT
00005152 PC d4c509		  9760          MOVB    TRM_CHR, TOS    ;TERM A
				  9761          ;migry;SPRD    MOD, TOS
00005155 PC 02bfa0		  9762          BSR     RDCHR
00005158 PC 14be7e		  9763          MOVB    TOS, A_WAIT     ;CLEAN STACK
0000515b PC 14be7f		  9764          MOVB    TOS, HOLD_      ;
				  9765          ;----------------
0000515e PC 1cc07e		  9766          CMPQB   FALSE, A_WAIT   ;
00005161 PC 0a8021		  9767          BEQ     P_OUT:W         ;IF NO INPUT THEN PRINT NEXT
00005164 PC 04a6137f		  9768          CMPB    XOFF, HOLD_     ;ELSE CHECK FOR XOFF SIGNAL
00005168 PC 0a8006		  9769          BEQ     HOLD_LP:W       ;IF TRUE THEN GO INTO HOLD LOOP
0000516b PC ea8017		  9770          BR      P_OUT:W         ;ELSE BRANCH OUT AND PRINT NEXT
				  9771  HOLD_LP:
				  9772          ;++++++++++++++++
0000516e PC ddb8		  9773          MOVQW   TRUE, TOS       ;READ WITH  WAIT
00005170 PC d4c509		  9774          MOVB    TRM_CHR, TOS    
				  9775          ;migry;SPRD    MOD, TOS
00005173 PC 02bf82		  9776          BSR     RDCHR
00005176 PC 14be7e		  9777          MOVB    TOS, A_WAIT     ;WAIT RETURN DOES NOT COUNT
00005179 PC 14be7f		  9778          MOVB    TOS, HOLD_      ;GET CHAR
				  9779          ;----------------
0000517c PC 04c57f11		  9780          CMPB    HOLD_, XON      ;NO NOT PROCEED UNTIL XON
00005180 PC 1a6e		  9781          BNE     HOLD_LP
				  9782  P_OUT:
00005182 PC 92601203		  9783          .ENDPROC
				  9784
				  9785  ;
				  9786  ;WILL READ DIP SWITCH AND PROGRAM USART FOR AUX PORT
				  9787  ;
				  9788  INITAUXU:
00005186 PC 5700		  9789          MOVD    R0,R1                   ;PARAM PASSED IN R0
00005188 PC 9f0f		  9790          CMPQD   -1,R1
0000518a PC 1a09		  9791          BNE     SETP1:B
				  9792                                          ;    STARTING VALUE
0000518c PC ce58a8c0c00030	  9793          MOVZBD  @SWITCHP,R1             ; LOAD SWITCH FOR BAUD RATE
				  9794  SETP1:
00005193 PC 69a0000f		  9795          ANDW    H'0F,R1
00005197 PC 54a576c0c00056	  9796          movb    mo82531,@timcmo         ; set 8253 mode (square wave, select timer 1)
0000519e PC 54edd98014c0c00052	  9797          movb    tb:w[r1:w],@timcd1      ; load lsb of count divisor
000051a7 PC 54edd9800cc0c00052	  9798          movb    tb+1:w[r1:w],@timcd1    ; load msb of count divisor
000051b0 PC 1200		  9799          RET     0
				  9800
				  9801  ;============================================================================
				  9802  ;;;;;;;;;;;;;;;;;;;;;;;;
				  9803  ; 8253 USART CONSTANTS ;
				  9804  ;;;;;;;;;;;;;;;;;;;;;;;;
				  9805
				  9806  ; 0xc00050 to 0xc0005F          ; USART#1
				  9807
				  9808  ; Programmable Interval Timer (8253)
				  9809  ;
				  9810  pit_base:       .equ    io_base + x'050 ;Programmable interval timer
				  9811  ;
				  9812  ;               PIT register definitions
				  9813  ;
				  9814  pit_c0:         .equ    0
				  9815  pit_c1:         .equ    2
				  9816  pit_c2:         .equ    4
				  9817  pit_moff:       .equ    6
				  9818  pit_mode:       .equ    pit_base + pit_moff
				  9819  ;
				  9820  ;               PIT mode register definitions
				  9821  ;
				  9822  pit_bcd:        .equ    1
				  9823  pit_binary:     .equ    0
				  9824  pit_sc0:        .equ    0 << 6          ;select counter 0
				  9825  pit_sc1:        .equ    1 << 6          ;select counter 1
				  9826  pit_sc2:        .equ    2 << 6          ;select counter 2
				  9827  pit_latch:      .equ    0 << 4          ;counter latching operation
				  9828  pit_rllsb:      .equ    1 << 4          ;read / load lsbyte
				  9829  pit_rlmsb:      .equ    2 << 4          ;read / load msbyte
				  9830  pit_rlboth:     .equ    3 << 4          ;read / load lsbyte then msbyte
				  9831  pit_rate_gen:   .equ    2 << 1          ;rate generator
				  9832  pit_square:     .equ    3 << 1          ;square wave
				  9833  ;
				  9834  ;       Timer profile defintion (8253)
				  9835
				  9836  timcpo: .equ    h'c00050        ; port address for timer
				  9837  timc_mo:.equ    6               ; offset for timer c mode 
				  9838  timc_d1:.equ    2               ; offset to timer 1 data port
				  9839  timc_d2:.equ    4               ; offset to timer 2 data port
				  9840  timcmo: .equ    timcpo + timc_mo; port addr to timer mode
				  9841  timcd1: .equ    timcpo + timc_d1; port addr for timer 1 data
				  9842  timcd2: .equ    timcpo + timc_d2; port addr for timer 2 data
				  9843  mo82531:.equ    h'76            ; required operation mode of 8253 timer 1
				  9844  mo82532:.equ    h'b6            ; required operation mode of 8253 timer 2
				  9845
				  9846  ; 8253 TIMER DIVISOR RATES FOR DB16A
				  9847  ;
				  9848  tb:
000051b2 PC 040008000b001000	  9849  TB:     .WORD   4,8,11,16               ; 19200,9600,7200,4800
000051ba PC 1500200026002b00	  9850          .WORD   21,32,38,43             ;  3600,2400,2000,1800
000051c2 PC 4000800000010002	  9851          .WORD   64,128,256,512          ;  1200,600,300,150
000051ca PC 3d02ba0200040006	  9852          .WORD   573,698,1024,1536       ;   134,110,75,50
				  9853  ;       Timer initialization sequence (after reset)
				  9854
				  9855  INITTIMER:
000051d2 PC ce58a8c0c00030	  9856          MOVZBD  @SWITCHP,R1             ; LOAD SWITCH FOR BAUD RATE
000051d9 PC 69a0000f		  9857          ANDW    H'0F,R1
000051dd PC 54a576c0c00056	  9858          movb    mo82531,@timcmo         ; set 8253 mode (square wave, select timer 1)
000051e4 PC 54edd9bfcec0c00052	  9859          movb    tb:w[r1:w],@timcd1      ; load lsb of count divisor
000051ed PC 54edd9bfc6c0c00052	  9860          movb    tb+1:w[r1:w],@timcd1    ; load msb of count divisor
000051f6 PC 54a5b6c0c00056	  9861          movb    mo82532,@timcmo         ; set 8253 mode (square wave, select timer 2)
000051fd PC 54edd9bfb5c0c00054	  9862          movb    tb:w[r1:w],@timcd2      ; load lsb of count divisor
00005206 PC 54edd9bfadc0c00054	  9863          movb    tb+1:w[r1:w],@timcd2    ; load msb of count divisor
0000520f PC 1200		  9864          ret     0
				  9865
				  9866  ;============================================================================
				  9867  ;
				  9868  ;  I C U   R E G.
				  9869  ;
				  9870  ICUADR:  .EQU   H'FFFE00        ; ICU REGISTER  0 ADDRESS
				  9871  ICU16:   .EQU   ICUADR+16*2     ; ICU REG 16
				  9872  ICU22:   .EQU   ICUADR+22*2     ; ICU REG 22
				  9873  ICU24:   .EQU   ICUADR+24*2     ; ICU REG 24
				  9874  ICU28:   .EQU   ICUADR+28*2     ; ICU REG 28
				  9875  icu_code:       .equ    x'b00
				  9876  icu_min:        .equ     7373
				  9877  icu_max:        .equ    65000
				  9878
				  9879  ;
				  9880  ;
				  9881  ;  DIVIDE FACTOR FOR ICU COUNTER TO GENERATE USRT CLOCK
				  9882  ;   N := 1.84MHZ/(BAUD_RATE*16*2)
				  9883  ;          1.84 HZ IS CRYSTAL FREQUENCY (DIVIDE BY 12 TO GET 9600)
				  9884  ;          THE 16 FACTOR BEACUSE USRT DIVIDE BY 16
				  9885  ;          THE 2 FACTOR BEACUSE THE SQUARE WAVE CHANGES TWICE IN CYCLE
				  9886  ;     N-1 MUST BE WRITTEN TO ICU REG.
00005211 PC 0200050007000b00	  9887  ICUTB:  .WORD   2,5,7,11                ; 19200,9600,7200,4800
00005219 PC 0f0017001c001f00	  9888          .WORD   15,23,28,31             ;  3600,2400,2000,1800
00005221 PC 2f005f00bf007f01	  9889          .WORD   47,95,191,383           ;  1200,600,300,150
00005229 PC ad010b02ff027f04	  9890          .WORD   429,523,767,1151        ;   134,110,75,50
				  9891
				  9892  INITICU:
00005231 PC 5ca8c0fffe20	  9893          MOVQB   0,@ICU16                ; 8 BITS MOD,COUT OUTPUT,SQUARE WAVE
00005237 PC 5ca8c0fffe2c	  9894          MOVQB   0,@ICU22                ; COUNTER HALT {ENABLE WRINIG OF 
				  9895                                          ;    STARTING VALUE
0000523d PC ce58a8c0c00030	  9896          MOVZBD  @SWITCHP,R1             ; LOAD SWITCH FOR BAUD RATE
00005244 PC 68a00f		  9897          ANDB    H'0F,R1
00005247 PC 54edd9bfcac0fffe30	  9898          MOVB    ICUTB:W[R1:W],@ICU24    ; ICU24 := ICUTB[R1],ICU25 := 0; LOAD
00005250 PC 54edd9bfc2c0fffe32	  9899          MOVB    ICUTB+1:W[R1:W],@ICU24+2;     COUNTING VALUE;
00005259 PC 54edd9bfb8c0fffe38	  9900          MOVB    ICUTB:W[R1:W],@ICU28    ; ICU28 := ICUTB[R1],ICU29 := 0; INIT
00005262 PC 54edd9bfb0c0fffe3a	  9901          MOVB    ICUTB+1:W[R1:W],@ICU28+2;     COUNTING VALUE;
0000526b PC 54a554c0fffe2c	  9902          MOVB    H'54,@ICU22             ; NOT PRESCALED,L COUNTER RUNNIG,
				  9903                                          ;  L COUNTER OUTPUT TO PIN COUT!
00005272 PC 1200		  9904          RET     0
				  9905
				  9906  ;============================================================================
				  9907  ;
				  9908  ;       PPI configuration       
				  9909  ;
				  9910  ;port A = INPUT(SELECT,BUSY)
				  9911  ;port B = OUTPUT(DATA STROBE)                           
				  9912  ;port C = OUTPUT(DATA)
				  9913  ;port A = bit 0 INPUT
				  9914  ;port B = bit 0 OUTPUT                          
				  9915  PPI_CON:        .equ    h'90
				  9916  PPI_BASE:       .equ    h'C00020        ;base 8255 PPI port address
				  9917  PPI_A:          .equ    0               ;offset to port A
				  9918  PPI_B:          .equ    2               ;offset to port B
				  9919  PPI_C:          .equ    4               ;offset to port C
				  9920  PPI_CNTL:       .equ    6               ;offset to control word
				  9921
				  9922
				  9923  ;               routine for print db16000 to centronics 307
				  9924  ;                       OR EQUIVALENT
				  9925
				  9926  ;               H A R D W A R E     N O T E S
				  9927  ;         this is a low level I/O driver for running Centronics 307 or
				  9928  ; equivalent type strobed input line printers.
				  9929  ;       The program logic supports DB16000's with 8303 type transceivers
				  9930  ; on port A and 7437 type buffers on ports B and C. Stake pins 1-2 @W11
				  9931  ; must be straped together for proper operation.
				  9932  ;       The data strobe routine has been ISE tuned for maximum thruput
				  9933  ; and should not be changed.
				  9934  ;
				  9935  PRINTC:         .proc
			  9936          VECP:   .blkd           ;vector to buffer
			  9937          PCNT:   .blkd           ;char count
				  9938                  .var [r0,r1,r2,r3,r4,r5,r6,r7]  ;save r0=PPI_BASE, r7=counter, r1=vec base, r6=time out flag
00005274 PC 82ff00		  9939                  .begin
00005277 PC 5f30		  9940                      movqd   FALSE,r6                ;set time out flag to false
00005279 PC 17a000c00020	  9941                      movd    PPI_BASE,r0     ;init addr mode for PPI I/O
0000527f PC 14a29006		  9942                      movb    PPI_CON,PPI_CNTL(r0)    ;init 8255
00005283 PC 5c4002		  9943                      movqb   pTRUE,PPI_B(r0)         ;init strobe to high
00005286 PC 34a20500		  9944                      tbitb   PRI_SLCT,PPI_A(r0)      ;if selected then go on
0000528a PC 9a09		  9945                      bfc     PRLP:b                  ;else try to select
				  9946  ;               movb    com(DC1),PPI_C(r0)      ;output select control
0000528c PC 14a2ee04		  9947                      movb    ~DC1, PPI_C(r0)
00005290 PC 028057		  9948                      bsr     STROBIT:w               ;strobe it in
00005293 PC dc20		  9949          PRLP:       MOVQB   TRUE, R4                ;DO LF WITH CR
00005295 PC 37a60000001f08	  9950                      TBITD   31, PCNT
0000529c PC 9a0c		  9951                      BFC     PRILP:B
0000529e PC 4e0ba60000001f08	  9952                      CBITD   31, PCNT
000052a6 PC 5c20		  9953                      MOVQB   FALSE, R4
000052a8 PC 4e33c60808		  9954          PRILP:      ABSD    PCNT, PCNT
000052ad PC 1fc008		  9955                      CMPQD   0, PCNT
000052b0 PC ca05		  9956                      BLT     PRILOOP:B
000052b2 PC 8fc008		  9957                      ADDQD   1, PCNT                 ;AVOID DUMMY MISTAKES
				  9958          PRILOOP:
000052b5 PC 028074		  9959                      bsr     BUSY                    ;wait till not busy
000052b8 PC 9f30		  9960                      cmpqd   TRUE,r6                 ;if timed out 
000052ba PC 0a29		  9961                      beq     ABORT:b                 ;then abort printing
000052bc PC 54800c00		  9962                      movb    0(VECP),r1              ;reverse logic drivers
000052c0 PC 4e7408		  9963                      comb    r1,r1                   ;must complement data
000052c3 PC 140a04		  9964                      movb    r1,PPI_C(r0)            ;output a char  
000052c6 PC 028021		  9965                      bsr     STROBIT:w               ;strobe it in
000052c9 PC 1c20		  9966                      CMPQB   FALSE, R4               ;CR CHRCK
000052cb PC 0a11		  9967                      BEQ     NOLF:B
				  9968  ;               CMPB    COM(CR), R1
000052cd PC 44a0f2		  9969                      cmpb    ~CR, R1
000052d0 PC 1a0c		  9970                      BNE     NOLF:B                  ;IF NOT CR THEN SKIP
000052d2 PC 028057		  9971                      bsr     BUSY                    ;wait till not busy
				  9972  ;               MOVB    COM(LF), PPI_C(r0)
000052d5 PC 14a2f504		  9973                      MOVB    ~LF, PPI_C(r0)
000052d9 PC 02800e		  9974                      bsr     STROBIT:w               ;strobe it in
000052dc PC 8fc00c		  9975          NOLF:       addqd   1,VECP                  ;vec to next char
000052df PC cfc70856		  9976                      acbd    -1,PCNT,PRILOOP         ;loop till PCNT=0
				  9977          ABORT:
000052e3 PC 92ff1208		  9978                  .endproc
				  9979
000052e7 PC ced8a101		  9980  STROBIT:        movzbd  STRB_TIME,r7    ;pulse active time init
000052eb PC 5c4002		  9981                  movqb   pTRUE,PPI_B(r0) ;pulse high
000052ee PC cc3f00		  9982                  acbb    -1,r7,$         ;wait high
				  9983
000052f1 PC ced8a102		  9984                  movzbd  STRB_TIME*2,r7
000052f5 PC dc4002		  9985                  movqb   pFALSE,PPI_B(r0)        ;pulse low
000052f8 PC cc3f00		  9986                  acbb    -1,r7,$         ;wait low
				  9987
000052fb PC ced8a101		  9988                  movzbd  STRB_TIME,r7
000052ff PC 5c4002		  9989                  movqb   pTRUE,PPI_B(r0) ;pulse high
00005302 PC cc3f00		  9990                  acbb    -1,r7,$
				  9991
00005305 PC 1200		  9992                  ret 0
				  9993
				  9994  INI8255:
00005307 PC 17a000c00020	  9995          movd    PPI_BASE,r0             ;init addr mode for PPI I/O
0000530d PC 14a29006		  9996          movb    PPI_CON,PPI_CNTL(r0)    ;init 8255
00005311 PC 1200		  9997          RET     0
				  9998
				  9999  PULSEHI:
00005313 PC 57c17b		 10000          movd -5(fp),r5                  ; migry;movd    TCYCLE:B, r5             ;pulse active time init
00005316 PC dc4002		 10001          movqb   TRUE, PPI_B(r0)         ;pulse high
00005319 PC cf2f00		 10002          acbd    -1, r5, $               ;wait high
0000531c PC 1200		 10003          RET     0
				 10004
				 10005  PULSELO:
0000531e PC 57c17b		 10006          movd -5(fp),r5                  ; migry;movd    TCYCLE:B, r5
00005321 PC 5c4002		 10007          movqb   FALSE, PPI_B(r0)        ;pulse low
00005324 PC cf2f00		 10008          acbd    -1, r5, $               ;wait low
00005327 PC 1200		 10009          RET     0
				 10010
00005329 PC ea800f		 10011  BUSY:           br START1:w
0000532c PC 636865636b206c70743a 10012          E_PRI:  .byte 'check lpt:',CR,LF
				 10013          M_NUM:  .equ ($ - E_PRI)
				 10014
00005338 PC d7a10007a120	 10015          START1:  movd    BUSY_WAIT,r7    ;initialize wait counter
				 10016                                          ;total wait ~ 20secs
0000533e PC 34a20000		 10017          BLOOP:  tbitb   PRI_BUSY,PPI_A(r0)      
00005342 PC 8a13		 10018                  bfs     CONTIN:b        ;if not busy then exit
00005344 PC cf3f7a		 10019                  acbd    -1,r7,BLOOP     ;else loop 
				 10020
00005347 PC 5f02		 10021                  movqd   4,r0            ;set I/O parms -write ser port
00005349 PC 67d863		 10022                  addr    E_PRI,r1        ; -address of error message
0000534c PC ce98a00c		 10023                  movzbd  M_NUM,r2        ; - count char err
00005350 PC 5f18		 10024                  movqd   0,r3            ;out to term 1
00005352 PC df30		 10025                  movqd   TRUE, r6        ;timed out      
00005354 PC e2			 10026                  svc                     ; pass to supervisor
				 10027
00005355 PC 1200		 10028          CONTIN: ret 0
				 10029
				 10031  ;+++++++++++++
				 10032
				 10033
				 10034  ;@@@@@@@@@@@@@@
				 10347  ;@@@@@@@@@@@@@@
				 10348
				 10349  ;+++++++++++++
				 10351  ;+++++++++++++

00006000                           .org MODTB
				 10353  MD_MAIN:
				 10354          ; standard MODULE TABLE ENTRY, composed of...
00006000 PC 00800000		 10355          .double SB_MAIN    ; Static Base Pointer
00006004 PC 00000000		 10356          .double 0          ; Link Base Pointer
00006008 PC 00000000		 10357          .double RESET      ; Program Base Pointer
0000600c PC 00000000		 10358          .double 0          ; reserved
				 10359  ; module descriptors normally done by the linker
				 10360  MD_NVIRT:
00006010 PC 00800000		 10361          .double SB_NVIRT
00006014 PC 00000000		 10362          .double 0
00006018 PC cc020000		 10363          .double NVIRT
0000601c PC 00000000		 10364          .double 0
				 10365  MD_NMIRT:
00006020 PC 00800000		 10366          .double SB_NMIRT
00006024 PC 00000000		 10367          .double 0
00006028 PC 7e020000		 10368          .double NMIRT
0000602c PC 00000000		 10369          .double 0
				 10370  MD_ABTRT:
00006030 PC 00800000		 10371          .double SB_ABTRT
00006034 PC 00000000		 10372          .double 0
00006038 PC 98020000		 10373          .double ABTRT
0000603c PC 00000000		 10374          .double 0
				 10375  MD_FPURT:
00006040 PC 00800000		 10376          .double SB_FPURT
00006044 PC 00000000		 10377          .double 0
00006048 PC d2020000		 10378          .double FPURT
0000604c PC 00000000		 10379          .double 0
				 10380  MD_ILLRT:
00006050 PC 00800000		 10381          .double SB_ILLRT
00006054 PC 00000000		 10382          .double 0
00006058 PC d8020000		 10383          .double ILLRT
0000605c PC 00000000		 10384          .double 0
				 10385  MD_SVCRT:
00006060 PC 00800000		 10386          .double SB_SVCRT
00006064 PC 00000000		 10387          .double 0
00006068 PC f4020000		 10388          .double SVCRT
0000606c PC 00000000		 10389          .double 0
				 10390  MD_DVZRT:
00006070 PC 00800000		 10391          .double SB_DVZRT
00006074 PC 00000000		 10392          .double 0
00006078 PC de020000		 10393          .double DVZRT
0000607c PC 00000000		 10394          .double 0
				 10395  MD_FLGRT:
00006080 PC 00800000		 10396          .double SB_FLGRT
00006084 PC 00000000		 10397          .double 0
00006088 PC e4020000		 10398          .double FLGRT
0000608c PC 00000000		 10399          .double 0
				 10400  MD_BPTRT:
00006090 PC 00800000		 10401          .double SB_BPTRT
00006094 PC 00000000		 10402          .double 0
00006098 PC f3010000		 10403          .double BPTRT
0000609c PC 00000000		 10404          .double 0
				 10405  MD_TRCRT:
000060a0 PC 00800000		 10406          .double SB_TRCRT
000060a4 PC 00000000		 10407          .double 0
000060a8 PC ff010000		 10408          .double TRCRT
000060ac PC 00000000		 10409          .double 0
				 10410  MD_UNINS:
000060b0 PC 00800000		 10411          .double SB_UNINS
000060b4 PC 00000000		 10412          .double 0
000060b8 PC c9020000		 10413          .double INSRT
000060bc PC 00000000		 10414          .double 0
				 10416  ;+++++++++++++
				 10417
				 10418

00006100                           .org INTTAB
				 10420          ; Interrupt/Trap Dispatch Table
00006100 PC 1060		 10421          .word  MD_NVIRT    ; Maskable interrupt (label must exist in first 64k of address range)
00006102 PC 0000		 10422          .word  0           ; OFFSET always zero (added to program base pointer)
00006104 PC 2060		 10423          .word  MD_NMIRT    ; NON Maskable interrupt
00006106 PC 0000		 10424          .word  0           ; OFFSET always zero
00006108 PC 3060		 10425          .word  MD_ABTRT    ; Abort
0000610a PC 0000		 10426          .word  0           ; OFFSET always zero
0000610c PC 4060		 10427          .word  MD_FPURT    ; FPU (or other slave) trap
0000610e PC 0000		 10428          .word  0           ; OFFSET always zero
00006110 PC 5060		 10429          .word  MD_ILLRT    ; Illegal operation
00006112 PC 0000		 10430          .word  0           ; OFFSET always zero
00006114 PC 6060		 10431          .word  MD_SVCRT    ; Supervisor Call trap
00006116 PC 0000		 10432          .word  0           ; OFFSET always zero
00006118 PC 7060		 10433          .word  MD_DVZRT    ; Divide by Zero trap
0000611a PC 0000		 10434          .word  0           ; OFFSET always zero
0000611c PC 8060		 10435          .word  MD_FLGRT    ; Flag trap
0000611e PC 0000		 10436          .word  0           ; OFFSET always zero
00006120 PC 9060		 10437          .word  MD_BPTRT    ; BPT instruction was executed
00006122 PC 0000		 10438          .word  0           ; OFFSET always zero
00006124 PC a060		 10439          .word  MD_TRCRT    ; Trace trap
00006126 PC 0000		 10440          .word  0           ; OFFSET always zero
00006128 PC b060		 10441          .word  MD_UNINS    ; Undefined instruction trap
0000612a PC 0000		 10442          .word  0           ; OFFSET always zero
0000612c PC 1100		 10443          .word  0x11
0000612e PC 0000		 10444          .word  0x0
00006130 PC 1200		 10445          .word  0x12
00006132 PC 0000		 10446          .word  0x0
00006134 PC 1300		 10447          .word  0x13
00006136 PC 0000		 10448          .word  0x0
00006138 PC 1400		 10449          .word  0x14
0000613a PC 0000		 10450          .word  0x0
0000613c PC 1500		 10451          .word  0x15
0000613e PC 0000		 10452          .word  0x0
				 10453
				 10454  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0 Assembly error(s) detected.

LABEL DUMP
**********
00000000 RESET
00000003 RESETF
0000001C RESET2
0000005D RST1
0000008E ERROR1
0000008E BEGINA
00000091 ERROR2
00000093 ERROR3
0000009E ERROR4
000000A1 MNENTRA
000000A4 MNENTR
00000101 MNENTR2
00000106 MNENTR3
0000010F MNEXIT
00000167 MNEXT1
00000169 BRKRMV
00000172 RMV1
00000190 RMV1A
00000196 RMV2
000001BB RMV2A
000001BE RMV4
000001CA RMV6
000001E4 RMV5
000001EE RMVEX
000001F0 MESG
000001F3 BPTRT
000001F9 BPTER
000001FF TRCRT
00000202 TRCT1
00000207 TRCCS
0000020B TRCCT
00000213 TRCER
00000219 TRCGO
0000021E TRCGO2
0000022E TRC2
00000233 TRCSTPN
0000023B TRC3
0000024A TRC33
00000250 TRCSTU
00000277 TRC5
00000277 TRC55
0000027A TRC6
0000027E NMIRT
00000298 ABTRT
000002C9 INSRT
000002CC NVIRT
000002D2 FPURT
000002D8 ILLRT
000002DE DVZRT
000002E4 FLGRT
000002EA UNDRT
000002F0 RNG
000002F2 SVCLM
000002F4 SVCRT
0000030A SVCER
00000311 SVCS
00000315 SVCTB
0000031F SVC3
0000031F ENDINT
0000032D SVCEX
00000337 SVCEX1
0000033C SVC4
0000034E SVC5
0000035C HERE
00000360 NUMS
00000368 A_S
0000036E A_L
00000372 FLOATIT
00000387 A_D
0000038E A_H
00000393 NUMIT
000003A3 EXx
000003AF ERR_EX
000003AF EX_IT
000003B6 SVC6
000003C1 PHERE
000003C5 ASCN
000003CD S_A
000003D3 L_A
000003D7 UNFLOATIT
000003EC D_A
000003F3 H_A
000003FC UNNUMIT
0000040A EXP
00000421 SVC7
00000435 stack_top
00000435 sign_on
0000046B pass_msg
00000491 fail_msg
000004A9 cpu_msg
000004B6 prom_msg
000004D1 j2_pr_msg
000004EC j2_rd_msg
00000507 j2_ll_msg
00000522 j3_pr_msg
0000053D j3_rd_msg
00000558 j3_ll_msg
00000573 om_msg
0000058E rdt_msg
000005B1 rat_msg
000005CC rrt_msg
000005E6 mmur_msg
000005FE mmu_msg
00000616 fpu_msg
00000627 pit_msg
0000063B ppi_msg
0000064F icu_msg
00000664 icu_imsg
0000067B exc_tab
000006A7 exc_msg
000006CE sp_msg
000006D0 nvisvc
000006D3 nvierr
000006D9 nmisvc
000006DF abtsvc
000006E5 fpusvc
000006EB illsvc
000006F1 svcsvc
000006F7 dvzsvc
000006FD flgsvc
00000703 bptsvc
00000709 trcsvc
0000070F undsvc
00000713 excp_abt
00000726 exc_1
00000731 exc_2
0000073C ascii_tab
0000074C CRLFb
00000750 fcemsg
0000075D fce_rtn
00000763 fce_loop
00000765 fce_nxt
00000781 fce_pr_wait
0000078A fce_print_it
000007A7 CRLFbspace
000007AF errmsg
000007BB err_rtn
000007C1 outmsg
000007C5 s_outmsg
000007CB om_loop
000007CD om_nxt
000007DF om_pr_wait
000007F4 om_print_it
000007FF msg_error
0000080D om_done
00000810 CRLF_tick
00000812 tick_only
00000814 tick
00000824 disp_binary
0000082A db_loop
0000082C db_nxbit
00000840 db_wait
00000849 db_print
00000850 db_0
00000859 db_1
0000085D db_la
00000870 db_done
00000873 disp_hex
00000879 dh_loop
00000886 dh_adj
0000088D dh_noadj
0000088F dh_nxdig
000008A5 dh_wait
000008AE dh_print
000008CC dh_done
000008CF dct16
000008F3 cpu_bgn
0000091D cpu_tag1
0000095E cpu_tag2
00000967 cpu_tag3
000009A9 cpu_error
000009B3 cpu_tag4
000009DD c_base
000009E4 c_table
000009E8 c_11
000009F0 c_10
000009F8 c_01
00000A00 c_00
00000A03 c_done
00000A06 icutbx
00000A26 wctb
00000A46 icu_init
00000A7B termi
00000A81 init_usart
00000A83 iulp
00000A9A ll_bgn
00000AA0 ll_loop
00000AA4 pr_bgn
00000AB4 pr_wait
00000AD1 not_j3
00000AD7 print_it
00000AEB rd_wait
00000B08 not_j3a
00000B0D read_it
00000B27 not_j3b
00000B2A read_ok
00000B2A next_chr
00000B32 usart_error
00000B41 ll_te_done
00000B45 oe_bgn
00000B59 ocpu_rtn
00000B62 oprom_rtn
00000B71 oe_loop
00000B7B oe_rtn
00000B88 rdt_bgn
00000B9A rdt_loop
00000BCD rdf_dsp
00000BDF rdt_pass
00000BE5 rat_bgn
00000BE5 rdt_done
00000BF1 rat_loop
00000C05 rat_ns
00000C35 rat_1ok
00000C44 rat_2ok
00000C4F rat_exit
00000C67 raf_dsp
00000C73 rat_pass
00000C79 rrt_bgn
00000C79 rat_done
00000CEE rrt_wait
00000D00 rrt7
00000D14 rrt0
00000D28 rrt1
00000D3C rrt2
00000D50 rrt3
00000D64 rrt4
00000D74 rrt5
00000D88 rrt6
00000D99 rrt_error
00000DAD mmu_bgn
00000DAD rrt_done
00000EA7 mmur_error
00000EBD mmur_rtn
00000EC8 mmur_ok
00000ECE mmurt
00000EE5 extra
00000EE7 pf1_addr
00000EED pf0_addr
00000F1F no_mmu
00000F25 mmu_error
00000F39 fpu_bgn
00000F39 mmu_done
00000FDC no_fpu
00000FE2 fpu_error
00000FF6 pit_bgn
00000FF6 fpu_done
00000FF8 pit_m_cmd
00000FFB pit_l_cmd
00000FFE pit_s_cmd
00001001 pit_min
00001007 pit_max
0000100D pit_s
00001019 pit_loop
00001039 pit_w0
0000106F pit_err
0000107D pit_u
00001085 pit_nxt
000010AD pit_2loop
000010CA pit_error
000010D0 ppi_bgn
000010D0 pit_done
000010EC ppi_loop
0000110B ppi_d_err
00001119 ppi_2
00001121 ppi_nxt
00001144 no_ppi
0000114A ppi_error
00001150 icu_bgn
00001150 ppi_done
0000119F icu_w1
000011CB icu_t_err
000011DF icu_1
000011E8 icu_t_ok
000011F2 icu_int
00001206 icu_itest
00001295 icu_iw
00001298 icu_i_error
000012AC icu_iok
000012B4 no_icu
000012BD icu_done
000012BD diag_end
000012DD diag_pass
000012E4 sf_rtn
000012F0 ex
000012F3 REGNTB
00001329 CMNDTB
0000134F RMSG
0000137F CRL
0000137F RMSGE
00001384 MAINLP
000013B0 PROCS
000013B4 PROTB
000013B7 PRO0
000013D2 RNMES
000013DA PRO1
000013E5 PRO2
000013EB PROPT1
00001412 ACR
00001418 PROX
0000142E MOVON
00001433 FSCN
0000143A FSCN2
00001444 FSCN4
00001444 FSCN3
0000145B MAINCS
00001460 BRTB
00001486 SYNTERR
00001495 ERRORC
000014A3 MSGENT
000014AB ERTAB
00001503 ERENT
00001525 SHXTOBN
0000154D SHXTBEX
00001555 ALLRN
00001566 ALLREG
00001572 ALLCP
00001585 ALLCPU
00001591 ALLMM
000015B8 ALLMMU
000015C4 ALLFP
000015D7 ALLFPU
000015E0 ALLEND
000015F4 SYM_MAT
0000160F LS
00001619 NX_CMP
00001631 APCVAL
00001644 NEXTM
0000164E S_OUT
00001650 REGTB
00001654 USX
00001658 ISX
00001684 BREKX
000016A4 PA_
000016A8 MF_
000016AC ML_
000016B0 MB_
000016B8 MD_
000016BC SFTX
000016C0 PRNTC
000016FA NOTPAD
000016FE NO_1
00001701 PCH0
0000171C PCH1
00001742 NO_2
00001754 AFLOAT
00001779 AINT
0000177C DOPU
00001784 PCH3
00001796 UNFLOAT
000017B0 UNINT
000017C2 PCH3X
000017D8 SPIT
000017E0 GOLP
000017E9 STDGO
000017ED GOL1
0000181C GOL4
0000182E GOL5
00001835 STEPL
00001849 STP2
0000185C BEGINL
00001878 ZME
00001885 JUSTB
0000188B MOK
00001894 NOT_A
0000189E CXPL
000018AF CXPL1
000018BA CXPL2
000018C8 NO_A_SP
000018D4 CXPL3
000018E3 GETMA
000018E6 SETMA
000018F9 GETOF
000018FC SETOF
00001929 NOB
0000192E CXPL5
00001947 CXPRL
00001948 STULP
00001952 STU2
00001981 STU3
00001989 STU5
0000198B STU6
000019A2 LOADLP
000019A5 DUMPLP
000019A9 DUX
000019AB MDU5
000019C6 DULIN
000019CC DUL3
000019D3 DUL3X
000019F0 DULOOP
00001A08 NOSPAC
00001A1F NOASCD
00001A32 DUEXT
00001A4A OPTB
00001A50 BCOM
00001A53 VRFERR1
00001A59 FILLP
00001A59 MOVELP
00001A59 SRCHLP
00001A7C SPC5
00001A90 SPC9
00001A96 SPCL
00001A98 SPCS
00001A9C SPCBTB
00001AA8 MOVEB
00001AAD FILLB
00001AB0 SRCHB
00001AB3 SPCF
00001AC2 SPC10
00001ADA SPCRP
00001AE8 SPERR
00001AEF FILLW
00001AF5 SRCHW
00001AFB FILLD
00001B00 SRCHD
00001B06 SERR
00001B09 OPC
00001B0C OP8
00001B13 OP10
00001B19 PROCIT
00001B44 NX_COMP
00001B57 NEXT
00001B6A ALIST
00001B7C PROLOOP
00001B92 STOIT
00001BB5 TWOCHR
00001BC7 PRCDONE
00001BCF PRCEXT
00001BD3 DUMPASC
00001BF2 NOCHR
00001BFA MOVASC
00001BFF MOVNXT
00001C17 MONASM
00001C1A INITAL
00001C1F INVAL
00001C31 NO_SUCH_INST
00001C39 SYM_ERR1
00001C41 SYM_ERR2
00001C49 SYM_ERR3
00001C51 PSU_ERR
00001C59 REAL_BAD
00001C61 ERR_SEG
00001C69 BAD_LIN
00001C71 CODTABL
000021DA SYM_SRCH
000021E8 SYM_SR
000021FA FND_SYM
00002211 NOT_FND
00002215 MOVTONXT
00002219 ONEOVER
00002237 NO_BRA
00002249 DONEX
0000224B DONE
0000224B DONEF
0000224F VALU
0000225D PUSH_A
0000226E ASCIT
0000227D AN
00002295 VAL_OK
000022A3 NOT_PB
000022A9 MOVABYT
000022BA DISP1
000022C6 DISP2
000022D0 DISPIT
000022EF DISPLCR
0000231B N_BYT
00002321 NEGWRD
00002327 POSDISP
00002349 POS_D
00002351 POSWRD
00002357 MOVDOUB
0000235D MOVWRD
00002360 MOVBYT
00002369 MODTABX
000023B5 IMMX
000023B9 ABSX
000023BD EXTX
000023C1 TOSX
000023CD SBX
000023D1 PCX
000023D5 MODCODE
000023F0 INX
000023F4 SYMBOL
0000241D ASYM
00002447 OPT_W3
00002452 N_OPT
00002459 TRY_PCRT
00002473 GET_LT
0000248A OPT_W2
00002495 OPT_D2
0000249F PUT_IT
000024A9 DISP_ADD
000024BE OPT_W
000024C9 OPT_D
000024D5 DISP__IT
000024D5 NOSYM
000024D7 OPERATE
00002520 OP3_CHK
00002520 OP2_CHK
0000253D OP4_CHK
00002551 A_ADDR_MODE
00002567 ABS_CAS
00002592 NX_R
0000259F nx_chr
000025A3 modwalk
000025BE NX_MOD
000025CF IMMSET
000025D3 CASMOD
000025D7 STAR_T
000025D9 CASEM
000025DD BRTAB
00002613 ABLOCK
00002628 FIXIT
0000263C ALIST1
00002640 LOOK
0000265B NOFLOP
00002660 NEXT_
0000266E DONREG
00002677 AQUICK
00002677 ASPC_REG
00002687 ASTRNG
0000269B OTHER_OP
000026A7 W_
000026B3 U_
000026C5 NEX_O
000026D6 SHR_FLD
000026F3 REG3
000026F3 REG5
000026F3 REG4
000026F3 REG6
000026F3 REG2
000026F3 REG0
000026F3 REG1
000026F3 REG7
000026F3 TOSMOD
000026F6 FPREL
000026F6 REGREL6
000026F6 REGREL2
000026F6 REGREL4
000026F6 REGREL0
000026F6 REGREL7
000026F6 PCREL
000026F6 REGREL1
000026F6 REGREL3
000026F6 REGREL5
000026F6 SBREL
000026F6 SPREL
000026FF SPMEM
000026FF FPMEM
000026FF SBMEM
00002710 EXTMOD
00002723 IMMED
0000273A DISP___IT
0000273F OPISDISP
0000275B ABS
0000275D OP_IS_D
00002769 L_DISP
00002770 PARSEND
0000277B MODE_SET
0000277F NEXON
00002795 NOCOM
000027A0 E_L
000027AB INDEXMOD
000027CF QUADINX
000027D1 DOUBINX
000027D3 WORDINX
000027D5 BYTEINX
000027F0 DONEPARS
00002807 TRY_8
00002817 NORM_ADDR
0000281F INSED
00002823 FINISH
00002825 MOVDISP
00002828 MOVLOOP
0000282E MOVADIP
0000283A MOVOVER
0000283C MOV_ASC
0000283E ASC_LP
00002858 STAT_
0000285C ENDS_
00002860 BLKB_
00002864 BLKW_
00002868 BLKD_
0000286C PSUEDOP
0000288A TRYEND
00002899 SBSEG
000028BC FINBLK
000028C2 SEGERR
000028CA A_SB_SEG
000028EB NOREAP
000028F7 PCSEG
00002910 A_WRD_
00002922 A_DOU_
00002947 A_FLT
00002951 A_LNG
00002959 HFLOATIT
0000298A REAL_G
000029A6 A_DOUB
000029AC GET_VAL
000029CA OK_OP
000029E7 CALC_V
000029EB MOV_COUNT
000029FA MOV_2
00002A09 MOV_4
00002A10 SET_NX
00002A21 BAD_SYM
00002A29 DUP_SYM
00002A31 ADDSYM
00002A40 SYM_S
00002A54 EMPTY
00002A70 ENTERPC
00002A75 DONAME
00002A8C DONT
00002A93 LEAD_SPAC
00002A93 NX_SPC
00002AA9 NOT_SPC
00002AAB PACK
00002AAB SPAC_PAK
00002AB7 SKIP_STR
00002AC7 NO_STR
00002ACF SQ
00002AE1 INC
00002AE5 EOL
00002AE7 UPCASE
00002AEB DELO
00002AF5 ACAP1
00002AFF REALEND
00002B03 ACOM
00002B13 TILFIN
00002B1D CODIT
00002B60 A_COM
00002B71 A_SYM
00002B7A ADDRET
00002B91 THE_INS
00002B95 INSX
00002BA5 O_FLD
00002BAA SRET
00002BC5 INSTLOOP
00002BDD NEXCHAR
00002C0B A_REAL
00002C26 REAL_REAL
00002C41 OTHER
00002C49 NEXONE
00002C54 NEXTINST
00002C6F FOUNDIT
00002C76 AFIND
00002C8A MOVECODE
00002CB5 BIT8C
00002CBD OPERANS
00002CCC S_R
00002CDB ALLSET
00002D08 DO1
00002D28 DO2
00002D46 DO3
00002D6E CODEBUILD
00002D8E SUFF2
00002D9D SUFF3
00002DAC NOSUF
00002DB0 NEXTDISP
00002DDC NEXTD
00002DE8 ALLDONE
00002DEC COMD_IN
00002E00 CR_SRCH
00002E11 NOTTAB
00002E19 END__L
00002E2E ACAP3
00002E40 NOT_CMD
00002E43 COMD_LOOP
00002E4A BAD_LOOP
00002E52 BADMEM
00002E5A COMTAB
00002E78 MEM_SIZ
00002E84 DOFIND
00002E8A HALF
00002E9C GOT_CRU
00002EAF GOT_SIZ
00002EB3 ERR_MES
00002ED1 NO_ERR
00002ED3 INSANE
00002EDE BAD_MEM
00002EE9 WRIT_LN
00002EF8 ALISTING
00002F24 NOLF0
00002F25 PRI_C
00002F45 A_LF
00002F4A WRT_EN
00002F4C BUF_CLR
00002F53 SPACITH
00002F63 LINE_PARS
00002F84 DO_F
00002F88 LOOKMO
00002FA7 GET_LN
00002FBD DEF_L
00002FBF BEGIN
00002FF1 IN_LIN
00003013 START
00003015 FIND
0000302D FOUND
0000303A CMD_V
0000303E CMD_VEC
0000305C INIT
00003062 AUX_PORT
00003066 PRINTER
0000306A SLHST
0000308B CR_CHK
000030A0 EDINI
000030AF EDINS
000030AF EDREP
000030E0 USE_DEF
0000310E NO_SEQ
00003113 EDDEL
00003130 DEL_DEF
0000314F EDDIS
0000316E DIDEF
00003187 DI_ERR
0000318E DI_LOOP
000031C2 INDX
000031C6 LAST
000031E3 TWO
000031EC TRE
000031F7 FOU
00003202 SKE
00003237 ED_END
0000324F SH_ALL
0000326F CONT_LOOP
00003276 PASS1_MES
0000327C PASS2_MES
00003282 ASMIT
000032F2 SYSA
00003306 NOT_AUTO
00003344 PASS_2
00003365 NEXT_LINE
00003388 ATWO
00003392 ATRE
0000339E ASKE
000033C0 NO_ADD
000033C6 XXX
000033DE ENDL
00003418 CODEL
00003459 ENTERL
0000346F ENTR_SY
00003475 ENTR_SG
0000347B NO_INFO
000034A3 C_LOOP
000034CB OUT_C
000034DB NO_CODE_OUT
00003505 END_MES
00003511 END_MESA
00003517 DID_ASM
0000355D NOT_A1
00003561 OUT_ASM
00003564 T_OUT
0000356B B_FRM
00003572 E_CRC
00003579 TAPER
00003597 BINLOAD
000035BD LOADT
000035DA FORMC
000035EC FIT
00003605 MOL
00003614 NOTL
0000361A ENDT
00003626 ABIN
0000362F ECRC_
0000363B TAPEW
00003664 NOBAUD
000036AF WTEXT
000036B9 T_W
000036C1 RADIX
000036E8 SHEX
000036EF SDEC
000036F6 BYT_ZOUT
00003708 BYT_ZIN
0000371A BAD_SYN
00003721 ZCOM
00003753 ZERR1
00003758 ZPAR1
00003781 ZPAR2
00003795 ZERR2
0000379A ZOK1
000037E6 ZDOIT
000037F3 ZECHO
000037F5 ZOUT
0000381A ZOBIN
0000383D ZO0
0000384E ZO5
0000384E ZOFAST
0000385E ZO1
0000386A ZO2
0000386F ZO3
000038AA ZO4
000038CD ZO11
000038DA ZO10
00003906 ZO6
00003917 ZOFAST1
00003917 ZO7
0000393B ZO8
0000393F ZIN
00003957 ZIST
0000395D ZIBIN
0000397A ZI0
00003995 ZI1
0000399A ZI4
000039DF ZI8
000039ED ZI11
00003A2C ZI21
00003A36 ZI22
00003A5A ZI9
00003A5B ZIFAST
00003A5E ZI100
00003A7C ZI200
00003AA7 ZI50
00003AA8 ZI40
00003AAB ATR
00003AD7 AT01
00003AD9 AT02
00003ADF ATM
00003B0C ATMX
00003B13 SRDLIN
00003B2C RDLIN
00003B3D RDLINA
00003B3F RDLIN1
00003B57 RDLIN3
00003B74 RDLIN2
00003B8D RDLINEX
00003B94 DOECHO
00003BA6 EC3
00003BB3 DOALL
00003BD2 EC4
00003BD7 ZAP
00003BF7 ECEX
00003BFB COMP1
00003BFD COMPS
00003C0F COMPEX
00003C12 PRINTA
00003C22 PRNTLP
00003C52 PRNT8
00003C60 PRTA5
00003C67 PRTAEX
00003C6C SPRINTA
00003C7B HEXAN
00003C8B HXTOBN
00003C94 NLOOP
00003CAA ENDN
00003CC9 A_NUMERR
00003CD1 BNTOHX
00003D11 DO_IT
00003D23 MOCH
00003D35 DOHEX
00003D4F NOT6
00003D5F BTHLP
00003D83 BTH2
00003D8C BTH3
00003D8E BTH4
00003D95 BTHEX
00003DA2 BTHEX2
00003DA6 TBSRCH
00003DB6 ACAP5
00003DC0 ACAP2
00003DC2 SRCHL
00003DDA SRC2
00003DEB SRFND
00003DED SRFND2
00003DF5 SRCHEX
00003DF9 GETPUT
00003DF9 GETPUTX
00003E16 LGPX
00003E19 LGP
00003E1D CASE_GP
00003E2F GMSRL
00003E33 GMPUL
00003E36 BRL
00003E47 GMPUL2
00003E57 GMPUL3
00003E70 PMPUL
00003E81 PMPULX
00003E87 GSPL
00003E9D MOVFI1
00003EA1 MOVFI2
00003EA5 GFPUL
00003EB6 PFPUL
00003EC1 GFPU4
00003EC8 GFPU6
00003ECD GFSRL
00003ED4 PFSRL
00003EDC SMRL
00003EE0 LMRL
00003EE4 RET0
00003EE6 GMMUL
00003EFC MMUL2
00003F03 MMUL3
00003F31 PCFGL
00003F40 NOM
00003F47 SCFGL
00003F4B GCFG
00003F51 GML
00003F5B GMCASE
00003F5F GM2
00003F65 GB
00003F6B PB
00003F70 GW
00003F76 PW
00003F7B GD
00003F80 PD
00003F83 GPREX
00003F8B AUERROR
00003F93 A_NUM
00003FCD A_DEC
00003FCF DEC_NUM
00003FDD PLUS_SIGN
00003FE5 INTLOOP
00003FEE ANUM
00003FEE POSI
0000400E A_HEX
00004010 HEX_NUM
0000401E HEXPLUS
00004026 HEXLOOP
00004045 HEXLET
0000404D UP
0000405A MAKEHEX
00004067 DONE1
00004078 NONEG
0000407F N_TO_ASC
0000408A CLRIT
000040B8 H_WRILOOP
000040CF H_OUTIT
000040DA H_NUMCHR
000040E8 H_SKIPI
000040FB H_NO
00004102 D_WRI
00004119 POS
0000412E ILOOP
00004154 FIN
00004165 NON
00004167 PACKLEFT
00004177 EX_N_T_
0000417B INIT__
00004182 EDIT
00004188 E_MES
00004190 E_MES2
00004198 CHR_CNT
000041A2 NXCHR0
000041B5 SANE0
000041C2 CHREX
000041C4 LINE_ADDR
000041E0 NOTSAM
000041EA NXCHR
000041FD SANE
0000420D FRST
0000420F MOVSB_B
0000421C EXPAND
0000423E NOEXP
00004240 ADDLIN
00004250 SQUEEZ
0000426A NO_SQE
0000426C STARTE
00004294 RESETE
00004298 CMD_VE
0000429C CMD_VECE
000042A6 INVALE
000042C2 INITE
000042C7 INS_LINE
000042D6 INSERT
000042FB DISPLY
0000431B DEL_LINE
00004324 DELETEE
00004339 DO_DEL
0000433E REPLAC
00004365 A_DEL
00004368 INSE
0000436E ER2
00004374 ER
00004378 SET
00004398 OK_N
0000439E EX
000043A4 LEAVE
000043B6 EDIT_EX
000043BA P1_DIGIT
000043E0 L1
000043F0 L2
000043F8 P2_MOVE_PNT
00004421 L3
00004438 L4
0000444D L5
00004463 L6
00004467 P3_Q_SHF
00004476 L7
000044CC L9
000044F2 L8
000044F2 L10
000044F6 P4_Q_MUL_10
00004532 P5_Q_MOD_10
0000456D P6_REAL_CON
00004581 L11
000045AA L13
000045C5 L14
000045D1 L15
000045D7 L12
000045DD L16
000045F7 L17
00004613 L19
00004616 L18
00004629 L21
00004629 L20
0000462D P7_DEC_CONV
00004648 L22
00004672 L23
00004696 L24
000046B6 L25
000046BC L26
000046E3 L27
00004729 L28
0000474B L29
0000474F P8_ROUND
00004769 L30
0000477C L32
0000477F L33
0000479D L31
000047A1 P9_EXP
000047A7 L34
000047C5 L35
000047E1 L36
00004800 L38
00004816 L39
00004819 L37
0000482F L41
00004845 L40
00004845 L42
00004849 P10_SIGN_CHK
00004867 L43
0000487B L44
0000487B L45
0000487F P11_NORMALIZ
0000488B L46
0000489C L47
000048CB ASC_2_RE
000048DA L49
000048DD L50
000048F5 L48
0000495C L51
0000496B L52
0000497D L53
00004989 L55
000049A5 L56
000049B6 L57
000049E7 L58
00004A15 L60
00004A3A L61
00004A3A L59
00004AEB L63
00004AEB L62
00004B25 L64
00004B56 L66
00004B56 L65
00004B90 L67
00004BAA L68
00004BB5 L69
00004BB5 L54
00004BC1 REAL_2_A
00004BFA L71
00004C00 L72
00004C4F L73
00004CA6 L75
00004CA9 L70
00004CB7 L76
00004CDC L77
00004CE2 L78
00004D25 L79
00004D65 L81
00004D8A L82
00004D95 L80
00004DA1 L85
00004DC0 L86
00004DC8 L83
00004DC8 L84
00004DDB L74
00004DE1 L88
00004DE4 L89
00004DF7 L87
00004E00 L91
00004E03 L92
00004E1B L90
00004E1F D_AND
00004E2B D_OR
00004E37 D_SHF
00004E42 SHF_1L
00004E4D SHF_1R
00004E4D SHFR
00004E56 EXX
00004E5A D_TBIT
00004E69 BIT_IS_0
00004E6D Q_ADD
00004E80 Q_SUB
00004E93 Q_DIV_10
00004ED5 TPUT
00004ED7 NEXBIT
00004EE9 AHI
00004EEC ENDCYC
00004EFA THEAD
00004F00 CLCKIT
00004F12 MARKIT
00004F22 TWRITE
00004F31 NEXREC
00004F48 RLOOP
00004F5C NEXBYT
00004F61 NULLS
00004F73 ENDMARK
00004F7C CSYNC
00004F86 LLOOP
00004F91 PEDGE
00004F93 PLOOP1
00004FA0 PLOOP2
00004FAD SUNK
00004FAF FORLO
00004FBF CLKP
00004FC5 ELOOP
00004FD0 EDGE1
00004FD9 EDGE2
00004FDB TGET
00004FE0 GBIT
00004FEF SAMPLE
00004FFB ZBIT
00005007 WAITLO
00005010 GOUT
00005012 BYTSYNC
00005016 BSINK
00005020 DLOOP
0000502A ZDUM
0000502D ALO
00005039 BSUNK
0000503B RHEAD
0000504A HLOOP1
00005059 HLOOP2
00005060 RECMRK
00005067 TREAD
0000507E MLOOP
00005086 GREC
00005095 DOREC
0000509B RECLOOP
000050B6 CRCER
000050BF TROUT
000050CA RUSRT
000050D0 INITUART
000050D8 UARTRST2
000050F5 RDCHR
00005109 RDCHRLP
00005116 RDCHR3
0000511D RDCHREX
00005122 PRCHR
00005136 PRCHRLP
00005143 PRCHR3
0000514A PRCHREX
0000516E HOLD_LP
00005182 P_OUT
00005186 INITAUXU
00005193 SETP1
000051B2 tb
000051B2 TB
000051D2 INITTIMER
00005211 ICUTB
00005231 INITICU
00005274 PRINTC
00005293 PRLP
000052A8 PRILP
000052B5 PRILOOP
000052DC NOLF
000052E3 ABORT
000052E7 STROBIT
00005307 INI8255
00005313 PULSEHI
0000531E PULSELO
00005329 BUSY
0000532C E_PRI
00005338 START1
0000533E BLOOP
00005355 CONTIN
00006000 MD_MAIN
00006010 MD_NVIRT
00006020 MD_NMIRT
00006030 MD_ABTRT
00006040 MD_FPURT
00006050 MD_ILLRT
00006060 MD_SVCRT
00006070 MD_DVZRT
00006080 MD_FLGRT
00006090 MD_BPTRT
000060A0 MD_TRCRT
000060B0 MD_UNINS

SB OFFSET DUMP
**************
00000000 FIRST
00000002 OPMOD
00000003 OPHND
00000004 MON_USR
00000005 NOTECHO
00000006 NDTRM
00000007 ERRTYP
00000008 CONFIG
00000009 DTRM
0000000D L
00000010 SCRCH1
00000010 JMPRAM
00000014 SCRCH2
00000018 STRTADR
0000001C ENDADR
00000020 SEREA
00000020 SVFP
00000024 SVUS
00000028 SVIS
0000002C SVPC
00000030 SVMOD
00000034 SVPSR
00000038 SVINTB
0000003C SVR7
00000058 SVR0
0000005C SVMSR
00000060 SVBPR0
00000064 SVBPR1
00000068 DUM1
0000006C DUM2
00000070 DUM3
00000074 MNFP
00000078 MNMSR
0000007C MNSP
00000080 MNINTB
00000084 MNPSR
00000086 BRKAR
000000BE STPCNT
000000C2 ACTBRK
000000C6 INS
000000D4 OLDPC
000000E4 STUADD
000000F4 STEPFLG
000000F5 ACKFLG
000000F6 CXPFLG
00000100 TERM1
00000154 TERM2
000001A8 ASCII
000001A8 DEFSET
000001A9 SPACIT
000001AA PROCESS
000001AB ALONFLG
000001AC NEGIT
000001AE LADDR
000001B2 CHRNUM
000001B2 REGCHR
000001B6 PROCBUF
000001B6 ASCDUMP
000001EA TEMP1
000001F6 ANUMBER
0000021E LASTSEG
0000021F SEGMENT
00000220 SBCOUNT
00000228 SBSTRT
00000228 BASECODE
0000022E SUFFIX
0000022E SUFFIX1
0000022F SUFFIX2
00000230 SUFFIX3
00000231 SUFFIX4
00000232 S_FLG1
00000232 SUFF_FLGS
00000233 S_FLG2
00000234 S_FLG3
00000235 S_FLG4
00000236 DISP1A
00000236 DISP1X
0000023A DISP1B
0000023E DISP1C
00000242 DISP1D
00000246 DISP2X
00000246 DISP2A
0000024A DISP2B
0000024E DISP2C
00000252 DISP2D
00000256 LEN1A
00000256 LEN1
00000257 LEN1B
00000258 LEN1C
00000259 LEN1D
0000025A LEN2A
0000025A LEN2
0000025B LEN2B
0000025C LEN2C
0000025D LEN2D
0000025E SYM_TYPE
0000025F SBC
00000263 LABEL
00000267 CODELGTH
00000268 ITYPE
00000269 DISPLACE
0000026A NUMLETS
0000026B ADDRMODE
0000026C OPFIELD
0000026D OPCLGTH
0000026E ICODE
0000026F OPSTRT
00000273 INS_4BIT
00000274 INS_8BIT
00000275 CATGORY
00000276 OP_IS_DISP
00000277 ADISP
00000278 IMM_IS_BYT
00000279 A_LONG_F
0000027A VECIN
0000027E ENDLIN
00000282 PC_ADDR
00000286 ERR_FLG
00000287 YES_SYM
00000288 S_FOUND
00000289 SYM_VAL
0000028D PC_REL
0000028E DISP_FLGS
0000028E DISP_B
0000028F DISP_W
00000290 DISP_D
00000292 FORM
00000296 F_ERROR
0000029A CONREAL
0000029B SHRTREAL
0000029C A_REAL_NUM
000002A4 TXT_BUF
000002F8 SBEND
000002FA VECIN3
000002FE VECEN
00000302 MEMSIZ
00000306 PAR_VAL
0000030A MON_BASE
0000030B BASE
0000030C A_PARAM
0000030D HISTF
00000311 DELIMIT
00000312 LEADZERO
00000313 ERROR
00000317 ASM_ERR
0000031B ERR_CNT
0000031F TEMP4
00000323 TEMP2
00000327 TEMP3
0000032B COUNTER
0000032F PROG_BASE
00000333 ASM_LIN
00000337 ASS_BLED
00000338 PASS_NUM
00000339 LIN_ERR
0000033A SYM_TAB
0000033E CODESTAR
00000342 A_SP
00000346 A_MOD
0000034A IOBUF
00000390 IOBUF2
000003D0 A_SB
000003D0 MODTAB
000003D8 A_PC
000003E0 SAFETY
000003E1 NUMCH
00000433 LEAD_0
00000434 DEC_VAL
00000438 STROBE
00000439 FLOATS
00000800 LGTH
00000804 LINNUM
00000808 NEXT_LN
0000080C LAST_L
00000810 LAST_AD
00000814 L_ADDR
00000818 LINES
0000081C TXTEND
00000820 TEXT

DSECT OFFSET DUMP
*****************
00000000 INBUF
00000050 INLM

IDENTIFIER DUMP

***************
00000000 F1OFF
00000000 BYTLONG
00000000 FALSE
00000000 ppi_pa
00000000 tx_rdy
00000000 TRMA
00000000 pit_sc0
00000000 PRINTE
00000000 MAIN
00000000 pTRUE
00000000 bus8
00000000 MOVC
00000000 DATAP
00000000 SHRT_REAL
00000000 MONT
00000000 hvct
00000000 pit_binary
00000000 SHRT
00000000 PPI_A
00000000 STALON
00000000 on
00000000 NOTRC
00000000 OUT_RDY
00000000 ETRC
00000000 PRI_BUSY
00000000 INITMOD
00000000 HANDB
00000000 pit_c0
00000000 NUL
00000000 pit_latch
00000000 GETI
00000000 OUTB
00000001 ASYNC
00000001 LNG
00000001 pFALSE
00000001 PSRC
00000001 PC_SEG
00000001 BIT0
00000001 WRDLONG
00000001 PUTI
00000001 OP1_DISP
00000001 STRB_TIME
00000001 TRUE
00000001 USERT
00000001 IN_RDY
00000001 TRANSP
00000001 CNTRA
00000001 AUX
00000001 PASS1
00000001 STPN
00000001 LONG_REAL
00000001 rx_rdy
00000001 pit_bcd
00000001 EXTR
00000001 PSR_T
00000001 PC_SYM
00000001 HANDLF
00000001 off
00000001 TRMB
00000002 ECHOB
00000002 PNDMOD
00000002 OP2_DISP
00000002 BIT8
00000002 SRCHC
00000002 TEXT_BAD
00000002 CNTRB
00000002 SB_SEG
00000002 pit_c1
00000002 FREC
00000002 PPI_B
00000002 svct
00000002 CNFMMU
00000002 timc_d1
00000002 F3LGTH
00000002 PSRT
00000002 STU
00000002 DEC
00000002 EBPR
00000002 SB_SYM
00000002 ntar
00000002 F2LGTH
00000002 PASS2
00000002 USRTCS
00000002 ppi_pb
00000002 statp
00000003 DOUBLNG
00000003 ECHOLF
00000003 OPTBL
00000003 HEX
00000003 ENST
00000003 F2OFF
00000003 BLOCK
00000003 STW
00000003 F1LGTH
00000003 OP3_DISP
00000003 READ
00000004 pit_rate_gen
00000004 ACB_I
00000004 pit_c2
00000004 WRITE
00000004 CRunl
00000004 RCRC
00000004 QUICK
00000004 eltgl
00000004 ppi_pc
00000004 fpu_bit
00000004 STBRK
00000004 PPI_C
00000004 PSRL
00000004 EABT
00000004 timc_d2
00000005 FLGTHO
00000005 MOMOD
00000005 F5LGTH
00000005 F6LGTH
00000005 EUSR
00000005 F7LGTH
00000005 PRI_SLCT
00000005 F3OFF
00000005 CAT
00000005 mmu_bit
00000005 PRNTAC
00000005 F4LGTH
00000006 CONST2
00000006 PPI_CNTL
00000006 timc_mo
00000006 USRT_BN
00000006 eltgh
00000006 EPND
00000006 pit_moff
00000006 STWC
00000006 pit_square
00000006 ppi_ctl
00000006 FILTER
00000006 test_ppi
00000007 JSBC
00000007 F4OFF
00000007 ACB_INS
00000007 ECRC
00000007 EMES_L
00000007 bell
00000008 BACKSP
00000008 ESRC
00000008 PSR_U
00000008 tpll
00000008 REGLIST
00000008 frz
00000008 lor
00000008 CRunh
00000009 ESVC
00000009 PSR_S
0000000A ENT_I
0000000A tplh
0000000A LF
0000000A ECXP
0000000A PSR_P
0000000B EMOD
0000000B EVIO
0000000C M_NUM
0000000C STRNG
0000000C EVRF
0000000C ipndl
0000000C HUTERM
0000000C PRC
0000000C F5OFF
0000000D ERTS
0000000D CHCM
0000000D CR
0000000D BREKT
0000000E ipndh
0000000E ALONE
0000000E NSFBR
0000000F CMD_N
00000010 flag_base
00000010 isrvl
00000010 cpu_fail
00000010 SPC_REG
00000010 clkm
00000010 pit_rllsb
00000010 PSRV
00000010 NLIN
00000011 prom_fail
00000011 DC1
00000011 XON
00000011 F6OFF
00000012 j2_pr_fail
00000012 isrvh
00000012 RNNUM
00000013 XOFF
00000013 CMNTLN
00000013 j2_rd_fail
00000013 IMMINX
00000014 FPNUM
00000014 imskl
00000014 ABSINX
00000014 CPNUM
00000014 SHR_I
00000014 CNTRT
00000014 j2_ll_fail
00000015 PA
00000015 j3_pr_fail
00000015 EXTINX
00000016 MF
00000016 j3_rd_fail
00000016 TOSINX
00000016 imskh
00000016 F7OFF
00000017 ML
00000017 msr_ft
00000017 j3_ll_fail
00000018 msr_ut
00000018 csrcl
00000018 LNG_I
00000018 ARAY_I
00000018 om_fail
00000018 MB
00000019 pit_fail
00000019 SBINX
00000019 MSR_NT
0000001A ppi_fail
0000001A csrch
0000001A PCINX
0000001A MD
0000001B NUMADM
0000001B REGTLN
0000001B f_msg_size
0000001B INXB
0000001B SFTBT
0000001B icu_fail
0000001B CATOFF
0000001C SWIP
0000001C fprtl
0000001D usart_rdy
0000001D BPR_BE
0000001E any_fail
0000001E fprth
0000001F msg_present
00000020 SPACE
00000020 PSRF
00000020 mctl
00000020 pit_rlmsb
00000022 ocasn
00000024 ciptr
00000024 BUFLGT
00000026 pdat
00000028 ips
00000028 MMNUM
0000002A pdir
0000002C cctl
0000002C COMMA
0000002E cictl
0000002E DOT
00000030 pit_rlboth
00000030 lcsvl
00000032 lcsvh
00000034 hcsvl
00000036 hcsvh
00000038 lccvl
0000003A lccvh
0000003A LINE_LGTH
0000003C hccvl
0000003E hccvh
00000040 pit_sc1
00000040 coutd
00000040 PSRZ
00000042 USRTCS2
00000048 LINLIM
00000050 OUTLM
00000054 TRMRLG
00000055 byte_pat
00000064 CYCLE
00000076 mo82531
0000007F DELETE
00000080 ppi_out_mode
00000080 cfrz
00000080 RLEN
00000080 pit_sc2
00000080 PSRN
00000083 NUMOFINST
00000090 PPI_CON
0000009B ppi_inp_mode
0000009D DEB_FLG
000000A5 TMARK
000000B6 mo82532
000000B7 RECMARK
000000D0 SBSIZE
000000F2 BPTC
00000100 PSRU
000001F4 cpms
00000200 PSRS
00000200 spsr
000003E8 LEADN
000003E8 ms_wait
00000400 PSRP
00000500 STACKL
000007D0 MAXCYCLE
00000800 PSRI
00000800 ipsr
0000081F STATICSZ
00000B00 icu_code
00001CCD icu_min
00002020 SPACES
00005746 tru_pat
00006000 MODTB
00006100 INTTAB
00008000 SB_NVIRT
00008000 SB_BPTRT
00008000 SB_UNINS
00008000 SB_FPURT
00008000 SB_DVZRT
00008000 SB_NMIRT
00008000 SB_SVCRT
00008000 SB_FLGRT
00008000 SB_ILLRT
00008000 SB_MAIN
00008000 SB_TRCRT
00008000 SB_ABTRT
00008000 RAMBOT
0000C000 STATIC
0000FDE8 icu_max
00010000 ram_start
00027FF7 ram_end
00027FFF ram_top
0007A120 BUSY_WAIT
007A1200 MAXWAIT
00C00000 j2base
00C00000 j2data
00C00000 io_base
00C00000 IOBEG
00C00002 j2stat
00C00020 PPI_BASE
00C00020 ppi_base
00C00030 SWITCHP
00C00030 statbase
00C00032 ds3
00C00034 diag_fail
00C00034 ds2
00C00036 diag_run
00C00036 ds1
00C00038 diag_mode
00C00040 j3base
00C00040 j3data
00C00042 j3stat
00C00050 timcpo
00C00050 pit_base
00C00052 timcd1
00C00054 timcd2
00C00056 timcmo
00C00056 pit_mode
00FFFE00 icu
00FFFE00 ICUADR
00FFFE20 ICU16
00FFFE2C ICU22
00FFFE30 ICU24
00FFFE38 ICU28
00FFFFFF bcnt_mask
00FFFFFF bpr_mask
19999999 CONST1
80FFFC00 ptbr_mask
FFFFFF80 NOERR
FFFFFFB0 READ_NUM
FFFFFFF8 ENMI
FFFFFFF9 ENVI
FFFFFFFA EFPU
FFFFFFFB EDVZ
FFFFFFFC EUND
FFFFFFFD EFLG
FFFFFFFE EBPT
FFFFFFFF sc_mask
FFFFFFFF EILL
